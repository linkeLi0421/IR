; ModuleID = '/llk/IR/drivers/tty/vt/conmakehash.c_pt.bc'
source_filename = "../drivers/tty/vt/conmakehash.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"-\00", align 1
@stdin = external local_unnamed_addr global ptr, align 8
@.str.1 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@unicount = dso_local local_unnamed_addr global [256 x i32] zeroinitializer, align 16
@stderr = external local_unnamed_addr global ptr, align 8
@.str.3 = private unnamed_addr constant [28 x i8] c"%s: Warning: line too long\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Bad input line: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [49 x i8] c"%s: Glyph number (0x%x) larger than font length\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"%s: Bad end of range (0x%x)\0A\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"idem\00", align 1
@.str.8 = private unnamed_addr constant [81 x i8] c"%s: Corresponding to a range of font positions, there should be a Unicode range\0A\00", align 1
@.str.9 = private unnamed_addr constant [70 x i8] c"%s: Bad Unicode range corresponding to font position range 0x%x-0x%x\0A\00", align 1
@.str.10 = private unnamed_addr constant [85 x i8] c"%s: Unicode range U+%x-U+%x not of the same length as font position range 0x%x-0x%x\0A\00", align 1
@.str.11 = private unnamed_addr constant [32 x i8] c"%s: trailing junk (%s) ignored\0A\00", align 1
@.str.12 = private unnamed_addr constant [161 x i8] c"/*\0A * Do not edit this file; it was automatically generated by\0A *\0A * conmakehash %s > [this file]\0A *\0A */\0A\0A#include <linux/types.h>\0A\0Au8 dfont_unicount[%d] = \0A{\0A\09\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c",\0A\09\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.17 = private unnamed_addr constant [31 x i8] c"\0Au16 dfont_unitable[%d] = \0A{\0A\09\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"0x%04x\00", align 1
@unitable = dso_local local_unnamed_addr global [256 x [255 x i16]] zeroinitializer, align 16
@.str.19 = private unnamed_addr constant [67 x i8] c"Usage: \0A        %s chartable [hashsize] [hashstep] [maxhashlevel]\0A\00", align 1
@.str.20 = private unnamed_addr constant [43 x i8] c"ERROR: Only 255 unicodes/glyph permitted!\0A\00", align 1
@str.21 = private unnamed_addr constant [4 x i8] c"\0A};\00", align 1

; Function Attrs: noreturn nounwind uwtable
define dso_local i32 @main(i32 noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #0 {
  %3 = alloca [65536 x i8], align 16
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 65536, ptr nonnull %3) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #11
  %6 = add i32 %0, -6
  %7 = icmp ult i32 %6, -4
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  %9 = load ptr, ptr %1, align 8, !tbaa !5
  %10 = load ptr, ptr @stderr, align 8, !tbaa !5
  %11 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %10, ptr noundef nonnull @.str.19, ptr noundef %9) #12
  tail call void @exit(i32 noundef 64) #13
  unreachable

12:                                               ; preds = %2
  %13 = getelementptr inbounds ptr, ptr %1, i64 1
  %14 = load ptr, ptr %13, align 8, !tbaa !5
  %15 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %14, ptr noundef nonnull dereferenceable(2) @.str) #14
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %12
  %18 = load ptr, ptr @stdin, align 8, !tbaa !5
  br label %23

19:                                               ; preds = %12
  %20 = tail call ptr @fopen(ptr noundef %14, ptr noundef nonnull @.str.2)
  %21 = icmp eq ptr %20, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  tail call void @perror(ptr noundef %14) #15
  tail call void @exit(i32 noundef 66) #13
  unreachable

23:                                               ; preds = %19, %17
  %24 = phi ptr [ %14, %19 ], [ @.str.1, %17 ]
  %25 = phi ptr [ %20, %19 ], [ %18, %17 ]
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(1024) @unicount, i8 0, i64 1024, i1 false), !tbaa !9
  %26 = call ptr @fgets(ptr noundef nonnull %3, i32 noundef 65536, ptr noundef %25)
  %27 = icmp eq ptr %26, null
  br i1 %27, label %250, label %28

28:                                               ; preds = %43, %23
  %29 = call ptr @strchr(ptr noundef nonnull %3, i32 noundef 10) #14
  %30 = icmp eq ptr %29, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %28
  store i8 0, ptr %29, align 1, !tbaa !11
  br label %35

32:                                               ; preds = %28
  %33 = load ptr, ptr @stderr, align 8, !tbaa !5
  %34 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %33, ptr noundef nonnull @.str.3, ptr noundef %24) #15
  br label %35

35:                                               ; preds = %32, %31
  br label %36

36:                                               ; preds = %39, %35
  %37 = phi ptr [ %40, %39 ], [ %3, %35 ]
  %38 = load i8, ptr %37, align 1, !tbaa !11
  switch i8 %38, label %46 [
    i8 32, label %39
    i8 9, label %39
    i8 0, label %41
    i8 35, label %41
  ]

39:                                               ; preds = %36, %36
  %40 = getelementptr inbounds i8, ptr %37, i64 1
  br label %36

41:                                               ; preds = %36, %36
  store ptr %37, ptr %4, align 8, !tbaa !5
  br label %43

42:                                               ; preds = %242, %242
  store ptr %243, ptr %4, align 8, !tbaa !5
  br label %43

43:                                               ; preds = %247, %42, %41
  %44 = call ptr @fgets(ptr noundef nonnull %3, i32 noundef 65536, ptr noundef %25)
  %45 = icmp eq ptr %44, null
  br i1 %45, label %250, label %28

46:                                               ; preds = %36
  %47 = call i64 @strtol(ptr noundef nonnull %37, ptr noundef nonnull %5, i32 noundef 0) #11
  %48 = trunc i64 %47 to i32
  %49 = load ptr, ptr %5, align 8, !tbaa !5
  %50 = icmp eq ptr %49, %37
  br i1 %50, label %51, label %54

51:                                               ; preds = %46
  %52 = load ptr, ptr @stderr, align 8, !tbaa !5
  %53 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %52, ptr noundef nonnull @.str.4, ptr noundef nonnull %3) #15
  call void @exit(i32 noundef 65) #13
  unreachable

54:                                               ; preds = %57, %46
  %55 = phi ptr [ %58, %57 ], [ %49, %46 ]
  %56 = load i8, ptr %55, align 1, !tbaa !11
  switch i8 %56, label %70 [
    i8 32, label %57
    i8 9, label %57
    i8 45, label %59
  ]

57:                                               ; preds = %54, %54
  %58 = getelementptr inbounds i8, ptr %55, i64 1
  br label %54

59:                                               ; preds = %54
  %60 = getelementptr inbounds i8, ptr %55, i64 1
  %61 = call i64 @strtol(ptr noundef nonnull %60, ptr noundef nonnull %5, i32 noundef 0) #11
  %62 = load ptr, ptr %5, align 8, !tbaa !5
  %63 = icmp eq ptr %62, %60
  br i1 %63, label %64, label %67

64:                                               ; preds = %59
  %65 = load ptr, ptr @stderr, align 8, !tbaa !5
  %66 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %65, ptr noundef nonnull @.str.4, ptr noundef nonnull %3) #15
  call void @exit(i32 noundef 65) #13
  unreachable

67:                                               ; preds = %59
  %68 = trunc i64 %61 to i32
  store ptr %62, ptr %4, align 8, !tbaa !5
  %69 = icmp ugt i32 %48, 255
  br i1 %69, label %72, label %76

70:                                               ; preds = %54
  store ptr %55, ptr %4, align 8, !tbaa !5
  %71 = icmp ugt i32 %48, 255
  br i1 %71, label %72, label %78

72:                                               ; preds = %70, %67
  %73 = trunc i64 %47 to i32
  %74 = load ptr, ptr @stderr, align 8, !tbaa !5
  %75 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %74, ptr noundef nonnull @.str.5, ptr noundef %24, i32 noundef %73) #15
  call void @exit(i32 noundef 65) #13
  unreachable

76:                                               ; preds = %67
  %77 = icmp eq i32 %68, 0
  br i1 %77, label %78, label %85

78:                                               ; preds = %76, %70
  %79 = call fastcc i32 @getunicode(ptr noundef nonnull %4)
  %80 = icmp sgt i32 %79, -1
  br i1 %80, label %81, label %240

81:                                               ; preds = %78
  %82 = shl i64 %47, 32
  %83 = ashr exact i64 %82, 32
  %84 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %83
  br label %210

85:                                               ; preds = %76
  %86 = icmp slt i32 %68, %48
  %87 = icmp sgt i32 %68, 255
  %88 = or i1 %86, %87
  br i1 %88, label %89, label %93

89:                                               ; preds = %85
  %90 = trunc i64 %61 to i32
  %91 = load ptr, ptr @stderr, align 8, !tbaa !5
  %92 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %91, ptr noundef nonnull @.str.6, ptr noundef %24, i32 noundef %90) #15
  call void @exit(i32 noundef 65) #13
  unreachable

93:                                               ; preds = %96, %85
  %94 = phi ptr [ %97, %96 ], [ %62, %85 ]
  %95 = load i8, ptr %94, align 1, !tbaa !11
  switch i8 %95, label %98 [
    i8 32, label %96
    i8 9, label %96
  ]

96:                                               ; preds = %93, %93
  %97 = getelementptr inbounds i8, ptr %94, i64 1
  br label %93

98:                                               ; preds = %93
  store ptr %94, ptr %4, align 8, !tbaa !5
  %99 = call i32 @strncmp(ptr noundef nonnull %94, ptr noundef nonnull dereferenceable(5) @.str.7, i64 noundef 4) #14
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %140

101:                                              ; preds = %98
  %102 = shl i64 %47, 32
  %103 = ashr exact i64 %102, 32
  %104 = add i32 %68, 1
  br label %105

105:                                              ; preds = %134, %101
  %106 = phi i64 [ %103, %101 ], [ %135, %134 ]
  %107 = icmp slt i64 %106, 65535
  br i1 %107, label %108, label %134

108:                                              ; preds = %105
  %109 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %106
  %110 = load i32, ptr %109, align 4, !tbaa !9
  %111 = icmp sgt i32 %110, 0
  br i1 %111, label %112, label %129

112:                                              ; preds = %108
  %113 = zext i32 %110 to i64
  %114 = trunc i64 %106 to i32
  br label %118

115:                                              ; preds = %118
  %116 = add nuw nsw i64 %119, 1
  %117 = icmp eq i64 %116, %113
  br i1 %117, label %124, label %118

118:                                              ; preds = %115, %112
  %119 = phi i64 [ 0, %112 ], [ %116, %115 ]
  %120 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %106, i64 %119
  %121 = load i16, ptr %120, align 2, !tbaa !12
  %122 = zext i16 %121 to i32
  %123 = icmp eq i32 %114, %122
  br i1 %123, label %134, label %115

124:                                              ; preds = %115
  %125 = icmp sgt i32 %110, 254
  br i1 %125, label %126, label %129

126:                                              ; preds = %124
  %127 = load ptr, ptr @stderr, align 8, !tbaa !5
  %128 = call i64 @fwrite(ptr nonnull @.str.20, i64 42, i64 1, ptr %127) #12
  call void @exit(i32 noundef 65) #13
  unreachable

129:                                              ; preds = %124, %108
  %130 = trunc i64 %106 to i16
  %131 = sext i32 %110 to i64
  %132 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %106, i64 %131
  store i16 %130, ptr %132, align 2, !tbaa !12
  %133 = add nsw i32 %110, 1
  store i32 %133, ptr %109, align 4, !tbaa !9
  br label %134

134:                                              ; preds = %129, %118, %105
  %135 = add nsw i64 %106, 1
  %136 = trunc i64 %135 to i32
  %137 = icmp eq i32 %104, %136
  br i1 %137, label %138, label %105

138:                                              ; preds = %134
  %139 = getelementptr inbounds i8, ptr %94, i64 4
  store ptr %139, ptr %4, align 8, !tbaa !5
  br label %240

140:                                              ; preds = %98
  %141 = call fastcc i32 @getunicode(ptr noundef nonnull %4)
  %142 = load ptr, ptr %4, align 8, !tbaa !5
  br label %143

143:                                              ; preds = %146, %140
  %144 = phi ptr [ %147, %146 ], [ %142, %140 ]
  %145 = load i8, ptr %144, align 1, !tbaa !11
  switch i8 %145, label %148 [
    i8 32, label %146
    i8 9, label %146
    i8 45, label %151
  ]

146:                                              ; preds = %143, %143
  %147 = getelementptr inbounds i8, ptr %144, i64 1
  br label %143

148:                                              ; preds = %143
  %149 = load ptr, ptr @stderr, align 8, !tbaa !5
  %150 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %149, ptr noundef nonnull @.str.8, ptr noundef %24) #15
  call void @exit(i32 noundef 65) #13
  unreachable

151:                                              ; preds = %143
  %152 = getelementptr inbounds i8, ptr %144, i64 1
  store ptr %152, ptr %4, align 8, !tbaa !5
  %153 = call fastcc i32 @getunicode(ptr noundef nonnull %4)
  %154 = icmp slt i32 %141, 0
  %155 = icmp slt i32 %153, 0
  %156 = select i1 %154, i1 true, i1 %155
  br i1 %156, label %157, label %162

157:                                              ; preds = %151
  %158 = trunc i64 %47 to i32
  %159 = trunc i64 %61 to i32
  %160 = load ptr, ptr @stderr, align 8, !tbaa !5
  %161 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %160, ptr noundef nonnull @.str.9, ptr noundef %24, i32 noundef %158, i32 noundef %159) #15
  call void @exit(i32 noundef 65) #13
  unreachable

162:                                              ; preds = %151
  %163 = sub nsw i32 %153, %141
  %164 = sub nsw i32 %68, %48
  %165 = icmp eq i32 %163, %164
  br i1 %165, label %166, label %171

166:                                              ; preds = %162
  %167 = sub nsw i32 %141, %48
  %168 = shl i64 %47, 32
  %169 = ashr exact i64 %168, 32
  %170 = add i32 %68, 1
  br label %176

171:                                              ; preds = %162
  %172 = trunc i64 %47 to i32
  %173 = trunc i64 %61 to i32
  %174 = load ptr, ptr @stderr, align 8, !tbaa !5
  %175 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %174, ptr noundef nonnull @.str.10, ptr noundef %24, i32 noundef %141, i32 noundef %153, i32 noundef %172, i32 noundef %173) #15
  call void @exit(i32 noundef 65) #13
  unreachable

176:                                              ; preds = %206, %166
  %177 = phi i64 [ %169, %166 ], [ %207, %206 ]
  %178 = trunc i64 %177 to i32
  %179 = add nsw i32 %167, %178
  %180 = icmp slt i32 %179, 65535
  br i1 %180, label %181, label %206

181:                                              ; preds = %176
  %182 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %177
  %183 = load i32, ptr %182, align 4, !tbaa !9
  %184 = icmp sgt i32 %183, 0
  br i1 %184, label %185, label %201

185:                                              ; preds = %181
  %186 = zext i32 %183 to i64
  br label %190

187:                                              ; preds = %190
  %188 = add nuw nsw i64 %191, 1
  %189 = icmp eq i64 %188, %186
  br i1 %189, label %196, label %190

190:                                              ; preds = %187, %185
  %191 = phi i64 [ 0, %185 ], [ %188, %187 ]
  %192 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %177, i64 %191
  %193 = load i16, ptr %192, align 2, !tbaa !12
  %194 = zext i16 %193 to i32
  %195 = icmp eq i32 %179, %194
  br i1 %195, label %206, label %187

196:                                              ; preds = %187
  %197 = icmp sgt i32 %183, 254
  br i1 %197, label %198, label %201

198:                                              ; preds = %196
  %199 = load ptr, ptr @stderr, align 8, !tbaa !5
  %200 = call i64 @fwrite(ptr nonnull @.str.20, i64 42, i64 1, ptr %199) #12
  call void @exit(i32 noundef 65) #13
  unreachable

201:                                              ; preds = %196, %181
  %202 = trunc i32 %179 to i16
  %203 = sext i32 %183 to i64
  %204 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %177, i64 %203
  store i16 %202, ptr %204, align 2, !tbaa !12
  %205 = add nsw i32 %183, 1
  store i32 %205, ptr %182, align 4, !tbaa !9
  br label %206

206:                                              ; preds = %201, %190, %176
  %207 = add nsw i64 %177, 1
  %208 = trunc i64 %207 to i32
  %209 = icmp eq i32 %170, %208
  br i1 %209, label %240, label %176

210:                                              ; preds = %237, %81
  %211 = phi i32 [ %79, %81 ], [ %238, %237 ]
  %212 = icmp ult i32 %211, 65535
  br i1 %212, label %213, label %237

213:                                              ; preds = %210
  %214 = load i32, ptr %84, align 4, !tbaa !9
  %215 = icmp sgt i32 %214, 0
  br i1 %215, label %216, label %232

216:                                              ; preds = %213
  %217 = zext i32 %214 to i64
  br label %221

218:                                              ; preds = %221
  %219 = add nuw nsw i64 %222, 1
  %220 = icmp eq i64 %219, %217
  br i1 %220, label %227, label %221

221:                                              ; preds = %218, %216
  %222 = phi i64 [ 0, %216 ], [ %219, %218 ]
  %223 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %83, i64 %222
  %224 = load i16, ptr %223, align 2, !tbaa !12
  %225 = zext i16 %224 to i32
  %226 = icmp eq i32 %211, %225
  br i1 %226, label %237, label %218

227:                                              ; preds = %218
  %228 = icmp sgt i32 %214, 254
  br i1 %228, label %229, label %232

229:                                              ; preds = %227
  %230 = load ptr, ptr @stderr, align 8, !tbaa !5
  %231 = call i64 @fwrite(ptr nonnull @.str.20, i64 42, i64 1, ptr %230) #12
  call void @exit(i32 noundef 65) #13
  unreachable

232:                                              ; preds = %227, %213
  %233 = trunc i32 %211 to i16
  %234 = sext i32 %214 to i64
  %235 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %83, i64 %234
  store i16 %233, ptr %235, align 2, !tbaa !12
  %236 = add nsw i32 %214, 1
  store i32 %236, ptr %84, align 4, !tbaa !9
  br label %237

237:                                              ; preds = %232, %221, %210
  %238 = call fastcc i32 @getunicode(ptr noundef nonnull %4)
  %239 = icmp sgt i32 %238, -1
  br i1 %239, label %210, label %240

240:                                              ; preds = %237, %206, %138, %78
  %241 = load ptr, ptr %4, align 8, !tbaa !5
  br label %242

242:                                              ; preds = %245, %240
  %243 = phi ptr [ %246, %245 ], [ %241, %240 ]
  %244 = load i8, ptr %243, align 1, !tbaa !11
  switch i8 %244, label %247 [
    i8 32, label %245
    i8 9, label %245
    i8 0, label %42
    i8 35, label %42
  ]

245:                                              ; preds = %242, %242
  %246 = getelementptr inbounds i8, ptr %243, i64 1
  br label %242

247:                                              ; preds = %242
  store ptr %243, ptr %4, align 8, !tbaa !5
  %248 = load ptr, ptr @stderr, align 8, !tbaa !5
  %249 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %248, ptr noundef nonnull @.str.11, ptr noundef %24, ptr noundef nonnull %243) #15
  br label %43

250:                                              ; preds = %43, %23
  %251 = call i32 @fclose(ptr noundef %25)
  br label %252

252:                                              ; preds = %252, %250
  %253 = phi i64 [ 0, %250 ], [ %283, %252 ]
  %254 = phi <4 x i32> [ zeroinitializer, %250 ], [ %281, %252 ]
  %255 = phi <4 x i32> [ zeroinitializer, %250 ], [ %282, %252 ]
  %256 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %253
  %257 = load <4 x i32>, ptr %256, align 16, !tbaa !9
  %258 = getelementptr inbounds i32, ptr %256, i64 4
  %259 = load <4 x i32>, ptr %258, align 16, !tbaa !9
  %260 = add <4 x i32> %257, %254
  %261 = add <4 x i32> %259, %255
  %262 = or i64 %253, 8
  %263 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %262
  %264 = load <4 x i32>, ptr %263, align 16, !tbaa !9
  %265 = getelementptr inbounds i32, ptr %263, i64 4
  %266 = load <4 x i32>, ptr %265, align 16, !tbaa !9
  %267 = add <4 x i32> %264, %260
  %268 = add <4 x i32> %266, %261
  %269 = or i64 %253, 16
  %270 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %269
  %271 = load <4 x i32>, ptr %270, align 16, !tbaa !9
  %272 = getelementptr inbounds i32, ptr %270, i64 4
  %273 = load <4 x i32>, ptr %272, align 16, !tbaa !9
  %274 = add <4 x i32> %271, %267
  %275 = add <4 x i32> %273, %268
  %276 = or i64 %253, 24
  %277 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %276
  %278 = load <4 x i32>, ptr %277, align 16, !tbaa !9
  %279 = getelementptr inbounds i32, ptr %277, i64 4
  %280 = load <4 x i32>, ptr %279, align 16, !tbaa !9
  %281 = add <4 x i32> %278, %274
  %282 = add <4 x i32> %280, %275
  %283 = add nuw nsw i64 %253, 32
  %284 = icmp eq i64 %283, 256
  br i1 %284, label %285, label %252, !llvm.loop !14

285:                                              ; preds = %252
  %286 = add <4 x i32> %282, %281
  %287 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %286)
  %288 = load ptr, ptr %13, align 8, !tbaa !5
  %289 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.12, ptr noundef %288, i32 noundef 256)
  br label %290

290:                                              ; preds = %298, %285
  %291 = phi i64 [ 0, %285 ], [ %303, %298 ]
  %292 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %291
  %293 = load i32, ptr %292, align 4, !tbaa !9
  %294 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.13, i32 noundef %293)
  %295 = icmp eq i64 %291, 255
  br i1 %295, label %296, label %298

296:                                              ; preds = %290
  %297 = call i32 @puts(ptr nonnull @str.21)
  br label %305

298:                                              ; preds = %290
  %299 = and i64 %291, 7
  %300 = icmp eq i64 %299, 7
  %301 = select i1 %300, ptr @.str.15, ptr @.str.16
  %302 = call i32 (ptr, ...) @printf(ptr noundef nonnull %301)
  %303 = add nuw nsw i64 %291, 1
  %304 = icmp eq i64 %303, 256
  br i1 %304, label %305, label %290

305:                                              ; preds = %298, %296
  %306 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.17, i32 noundef %287)
  %307 = icmp sgt i32 %287, 0
  br i1 %307, label %308, label %347

308:                                              ; preds = %305
  %309 = add nsw i32 %287, -1
  br label %310

310:                                              ; preds = %344, %308
  %311 = phi i64 [ 0, %308 ], [ %327, %344 ]
  %312 = phi i32 [ 0, %308 ], [ %328, %344 ]
  %313 = phi i32 [ 0, %308 ], [ %345, %344 ]
  %314 = shl i64 %311, 32
  %315 = ashr exact i64 %314, 32
  %316 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %315
  %317 = load i32, ptr %316, align 4, !tbaa !9
  %318 = icmp slt i32 %312, %317
  br i1 %318, label %325, label %319

319:                                              ; preds = %319, %310
  %320 = phi i64 [ %321, %319 ], [ %315, %310 ]
  %321 = add i64 %320, 1
  %322 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %321
  %323 = load i32, ptr %322, align 4, !tbaa !9
  %324 = icmp sgt i32 %323, 0
  br i1 %324, label %325, label %319, !llvm.loop !16

325:                                              ; preds = %319, %310
  %326 = phi i32 [ %312, %310 ], [ 0, %319 ]
  %327 = phi i64 [ %315, %310 ], [ %321, %319 ]
  %328 = add nsw i32 %326, 1
  %329 = sext i32 %326 to i64
  %330 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %327, i64 %329
  %331 = load i16, ptr %330, align 2, !tbaa !12
  %332 = zext i16 %331 to i32
  %333 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.18, i32 noundef %332)
  %334 = icmp eq i32 %313, %309
  br i1 %334, label %335, label %337

335:                                              ; preds = %325
  %336 = call i32 @puts(ptr nonnull @str.21)
  br label %344

337:                                              ; preds = %325
  %338 = and i32 %313, 7
  %339 = icmp eq i32 %338, 7
  br i1 %339, label %340, label %342

340:                                              ; preds = %337
  %341 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.15)
  br label %344

342:                                              ; preds = %337
  %343 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.16)
  br label %344

344:                                              ; preds = %342, %340, %335
  %345 = add nuw nsw i32 %313, 1
  %346 = icmp eq i32 %345, %287
  br i1 %346, label %347, label %310

347:                                              ; preds = %344, %305
  call void @exit(i32 noundef 0) #13
  unreachable
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare void @perror(ptr nocapture noundef readonly) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare noundef ptr @fgets(ptr noundef, i32 noundef, ptr nocapture noundef) local_unnamed_addr #3

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare ptr @strchr(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind willreturn
declare i64 @strtol(ptr noundef readonly, ptr nocapture noundef, i32 noundef) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind uwtable
define internal fastcc i32 @getunicode(ptr nocapture noundef %0) unnamed_addr #6 {
  %2 = load ptr, ptr %0, align 8, !tbaa !5
  br label %3

3:                                                ; preds = %6, %1
  %4 = phi ptr [ %2, %1 ], [ %7, %6 ]
  %5 = load i8, ptr %4, align 1, !tbaa !11
  switch i8 %5, label %57 [
    i8 32, label %6
    i8 9, label %6
    i8 85, label %8
  ]

6:                                                ; preds = %3, %3
  %7 = getelementptr inbounds i8, ptr %4, i64 1
  br label %3

8:                                                ; preds = %3
  %9 = getelementptr inbounds i8, ptr %4, i64 1
  %10 = load i8, ptr %9, align 1, !tbaa !11
  %11 = icmp eq i8 %10, 43
  br i1 %11, label %12, label %57

12:                                               ; preds = %8
  %13 = tail call ptr @__ctype_b_loc() #16
  %14 = load ptr, ptr %13, align 8, !tbaa !5
  %15 = getelementptr inbounds i8, ptr %4, i64 2
  %16 = load i8, ptr %15, align 1, !tbaa !11
  %17 = sext i8 %16 to i64
  %18 = getelementptr inbounds i16, ptr %14, i64 %17
  %19 = load i16, ptr %18, align 2, !tbaa !12
  %20 = and i16 %19, 4096
  %21 = icmp eq i16 %20, 0
  br i1 %21, label %57, label %22

22:                                               ; preds = %12
  %23 = getelementptr inbounds i8, ptr %4, i64 3
  %24 = load i8, ptr %23, align 1, !tbaa !11
  %25 = sext i8 %24 to i64
  %26 = getelementptr inbounds i16, ptr %14, i64 %25
  %27 = load i16, ptr %26, align 2, !tbaa !12
  %28 = and i16 %27, 4096
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %57, label %30

30:                                               ; preds = %22
  %31 = getelementptr inbounds i8, ptr %4, i64 4
  %32 = load i8, ptr %31, align 1, !tbaa !11
  %33 = sext i8 %32 to i64
  %34 = getelementptr inbounds i16, ptr %14, i64 %33
  %35 = load i16, ptr %34, align 2, !tbaa !12
  %36 = and i16 %35, 4096
  %37 = icmp eq i16 %36, 0
  br i1 %37, label %57, label %38

38:                                               ; preds = %30
  %39 = getelementptr inbounds i8, ptr %4, i64 5
  %40 = load i8, ptr %39, align 1, !tbaa !11
  %41 = sext i8 %40 to i64
  %42 = getelementptr inbounds i16, ptr %14, i64 %41
  %43 = load i16, ptr %42, align 2, !tbaa !12
  %44 = and i16 %43, 4096
  %45 = icmp eq i16 %44, 0
  br i1 %45, label %57, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds i8, ptr %4, i64 6
  %48 = load i8, ptr %47, align 1, !tbaa !11
  %49 = sext i8 %48 to i64
  %50 = getelementptr inbounds i16, ptr %14, i64 %49
  %51 = load i16, ptr %50, align 2, !tbaa !12
  %52 = and i16 %51, 4096
  %53 = icmp eq i16 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %46
  store ptr %47, ptr %0, align 8, !tbaa !5
  %55 = tail call i64 @strtol(ptr nocapture noundef nonnull %15, ptr noundef null, i32 noundef 16) #11
  %56 = trunc i64 %55 to i32
  br label %57

57:                                               ; preds = %54, %46, %38, %30, %22, %12, %8, %3
  %58 = phi i32 [ %56, %54 ], [ -1, %46 ], [ -1, %38 ], [ -1, %30 ], [ -1, %22 ], [ -1, %12 ], [ -1, %8 ], [ -1, %3 ]
  ret i32 %58
}

; Function Attrs: nofree nounwind
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
declare ptr @__ctype_b_loc() local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #10

attributes #0 = { noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress nofree nounwind willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress nofree nosync nounwind readnone willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree nounwind }
attributes #9 = { argmemonly nofree nounwind willreturn writeonly }
attributes #10 = { nocallback nofree nosync nounwind readnone willreturn }
attributes #11 = { nounwind }
attributes #12 = { cold nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind readonly willreturn }
attributes #15 = { cold }
attributes #16 = { nounwind readnone willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 15.0.0 (/llk/llvm-project-main/clang 126a1f78513fb688819156df98cf7ea83b5e8c18)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !7, i64 0}
!11 = !{!7, !7, i64 0}
!12 = !{!13, !13, i64 0}
!13 = !{!"short", !7, i64 0}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.peeled.count", i32 1}
