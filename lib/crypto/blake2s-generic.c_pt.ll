; ModuleID = '/llk/IR/lib/crypto/blake2s-generic.c_pt.bc'
source_filename = "../lib/crypto/blake2s-generic.c"
target datalayout = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armv7-unknown-linux-gnueabi"

module asm ".syntax unified"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_blake2s_compress_generic:\09\09\09\09\09"
module asm "\09.asciz \09\22blake2s_compress_generic\22\09\09\09\09\09"
module asm "__kstrtabns_blake2s_compress_generic:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"

%struct.kernel_symbol = type { i32, ptr, ptr }
%struct.blake2s_state = type { [8 x i32], [2 x i32], [2 x i32], [64 x i8], i32, i32 }

@__kstrtab_blake2s_compress_generic = external dso_local constant [0 x i8], align 1
@__kstrtabns_blake2s_compress_generic = external dso_local constant [0 x i8], align 1
@__ksymtab_blake2s_compress_generic = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @blake2s_compress_generic to i32), ptr @__kstrtab_blake2s_compress_generic, ptr @__kstrtabns_blake2s_compress_generic }, section "___ksymtab+blake2s_compress_generic", align 4
@__UNIQUE_ID_file104 = internal constant [38 x i8] c"libblake2s.file=lib/crypto/libblake2s\00", section ".modinfo", align 1
@__UNIQUE_ID_license105 = internal constant [26 x i8] c"libblake2s.license=GPL v2\00", section ".modinfo", align 1
@__UNIQUE_ID_description106 = internal constant [45 x i8] c"libblake2s.description=BLAKE2s hash function\00", section ".modinfo", align 1
@__UNIQUE_ID_author107 = internal constant [55 x i8] c"libblake2s.author=Jason A. Donenfeld <Jason@zx2c4.com>\00", section ".modinfo", align 1
@llvm.compiler.used = appending global [5 x ptr] [ptr @__UNIQUE_ID_author107, ptr @__UNIQUE_ID_description106, ptr @__UNIQUE_ID_file104, ptr @__UNIQUE_ID_license105, ptr @__ksymtab_blake2s_compress_generic], section "llvm.metadata"

@blake2s_compress = weak dso_local alias void (ptr, ptr, i32, i32), ptr @blake2s_compress_generic

; Function Attrs: nofree nosync nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @blake2s_compress_generic(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %1227, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.blake2s_state, ptr %0, i32 0, i32 1
  %8 = getelementptr %struct.blake2s_state, ptr %0, i32 0, i32 1, i32 1
  %9 = getelementptr inbounds %struct.blake2s_state, ptr %0, i32 0, i32 2
  %10 = getelementptr %struct.blake2s_state, ptr %0, i32 0, i32 2, i32 1
  %11 = load i32, ptr %0, align 4
  %12 = getelementptr i8, ptr %0, i32 4
  %13 = load i32, ptr %12, align 4
  %14 = getelementptr i8, ptr %0, i32 8
  %15 = load i32, ptr %14, align 4
  %16 = getelementptr i8, ptr %0, i32 12
  %17 = load i32, ptr %16, align 4
  %18 = getelementptr i8, ptr %0, i32 16
  %19 = load i32, ptr %18, align 4
  %20 = getelementptr i8, ptr %0, i32 20
  %21 = load i32, ptr %20, align 4
  %22 = getelementptr i8, ptr %0, i32 24
  %23 = load i32, ptr %22, align 4
  %24 = getelementptr i8, ptr %0, i32 28
  %25 = load i32, ptr %24, align 4
  %26 = load i32, ptr %9, align 4
  %27 = load i32, ptr %10, align 4
  br label %28

28:                                               ; preds = %28, %6
  %29 = phi i32 [ %25, %6 ], [ %1223, %28 ]
  %30 = phi i32 [ %23, %6 ], [ %1220, %28 ]
  %31 = phi i32 [ %21, %6 ], [ %1217, %28 ]
  %32 = phi i32 [ %19, %6 ], [ %1214, %28 ]
  %33 = phi i32 [ %17, %6 ], [ %1211, %28 ]
  %34 = phi i32 [ %15, %6 ], [ %1208, %28 ]
  %35 = phi i32 [ %13, %6 ], [ %1205, %28 ]
  %36 = phi i32 [ %11, %6 ], [ %1202, %28 ]
  %37 = phi ptr [ %1, %6 ], [ %1224, %28 ]
  %38 = phi i32 [ %2, %6 ], [ %1225, %28 ]
  %39 = load i32, ptr %7, align 4
  %40 = add i32 %39, %3
  store i32 %40, ptr %7, align 4
  %41 = icmp ult i32 %40, %3
  %42 = zext i1 %41 to i32
  %43 = load i32, ptr %8, align 4
  %44 = add i32 %43, %42
  store i32 %44, ptr %8, align 4
  %45 = load i32, ptr %37, align 1
  %46 = getelementptr inbounds i8, ptr %37, i32 4
  %47 = load i32, ptr %46, align 1
  %48 = getelementptr inbounds i8, ptr %37, i32 8
  %49 = load i32, ptr %48, align 1
  %50 = getelementptr inbounds i8, ptr %37, i32 12
  %51 = load i32, ptr %50, align 1
  %52 = getelementptr inbounds i8, ptr %37, i32 16
  %53 = load i32, ptr %52, align 1
  %54 = getelementptr inbounds i8, ptr %37, i32 20
  %55 = load i32, ptr %54, align 1
  %56 = getelementptr inbounds i8, ptr %37, i32 24
  %57 = load i32, ptr %56, align 1
  %58 = getelementptr inbounds i8, ptr %37, i32 28
  %59 = load i32, ptr %58, align 1
  %60 = getelementptr inbounds i8, ptr %37, i32 32
  %61 = load i32, ptr %60, align 1
  %62 = getelementptr inbounds i8, ptr %37, i32 36
  %63 = load i32, ptr %62, align 1
  %64 = getelementptr inbounds i8, ptr %37, i32 40
  %65 = load i32, ptr %64, align 1
  %66 = getelementptr inbounds i8, ptr %37, i32 44
  %67 = load i32, ptr %66, align 1
  %68 = getelementptr inbounds i8, ptr %37, i32 48
  %69 = load i32, ptr %68, align 1
  %70 = getelementptr inbounds i8, ptr %37, i32 52
  %71 = load i32, ptr %70, align 1
  %72 = getelementptr inbounds i8, ptr %37, i32 56
  %73 = load i32, ptr %72, align 1
  %74 = getelementptr inbounds i8, ptr %37, i32 60
  %75 = load i32, ptr %74, align 1
  %76 = add i32 %32, %45
  %77 = add i32 %76, %36
  %78 = xor i32 %40, %77
  %79 = xor i32 %78, 1359893119
  %80 = tail call i32 @llvm.fshl.i32(i32 %79, i32 %79, i32 16)
  %81 = add i32 %80, 1779033703
  %82 = xor i32 %81, %32
  %83 = tail call i32 @llvm.fshl.i32(i32 %82, i32 %82, i32 20)
  %84 = add i32 %77, %47
  %85 = add i32 %84, %83
  %86 = xor i32 %85, %80
  %87 = tail call i32 @llvm.fshl.i32(i32 %86, i32 %86, i32 24)
  %88 = add i32 %87, %81
  %89 = xor i32 %88, %83
  %90 = tail call i32 @llvm.fshl.i32(i32 %89, i32 %89, i32 25)
  %91 = add i32 %31, %49
  %92 = add i32 %91, %35
  %93 = xor i32 %44, %92
  %94 = xor i32 %93, -1694144372
  %95 = tail call i32 @llvm.fshl.i32(i32 %94, i32 %94, i32 16)
  %96 = add i32 %95, -1150833019
  %97 = xor i32 %96, %31
  %98 = tail call i32 @llvm.fshl.i32(i32 %97, i32 %97, i32 20)
  %99 = add i32 %92, %51
  %100 = add i32 %99, %98
  %101 = xor i32 %100, %95
  %102 = tail call i32 @llvm.fshl.i32(i32 %101, i32 %101, i32 24)
  %103 = add i32 %102, %96
  %104 = xor i32 %103, %98
  %105 = tail call i32 @llvm.fshl.i32(i32 %104, i32 %104, i32 25)
  %106 = add i32 %30, %53
  %107 = add i32 %106, %34
  %108 = xor i32 %26, %107
  %109 = xor i32 %108, 528734635
  %110 = tail call i32 @llvm.fshl.i32(i32 %109, i32 %109, i32 16)
  %111 = add i32 %110, 1013904242
  %112 = xor i32 %111, %30
  %113 = tail call i32 @llvm.fshl.i32(i32 %112, i32 %112, i32 20)
  %114 = add i32 %107, %55
  %115 = add i32 %114, %113
  %116 = xor i32 %115, %110
  %117 = tail call i32 @llvm.fshl.i32(i32 %116, i32 %116, i32 24)
  %118 = add i32 %117, %111
  %119 = xor i32 %118, %113
  %120 = tail call i32 @llvm.fshl.i32(i32 %119, i32 %119, i32 25)
  %121 = add i32 %29, %57
  %122 = add i32 %121, %33
  %123 = xor i32 %27, %122
  %124 = xor i32 %123, 1541459225
  %125 = tail call i32 @llvm.fshl.i32(i32 %124, i32 %124, i32 16)
  %126 = add i32 %125, -1521486534
  %127 = xor i32 %126, %29
  %128 = tail call i32 @llvm.fshl.i32(i32 %127, i32 %127, i32 20)
  %129 = add i32 %122, %59
  %130 = add i32 %129, %128
  %131 = xor i32 %130, %125
  %132 = tail call i32 @llvm.fshl.i32(i32 %131, i32 %131, i32 24)
  %133 = add i32 %132, %126
  %134 = xor i32 %133, %128
  %135 = tail call i32 @llvm.fshl.i32(i32 %134, i32 %134, i32 25)
  %136 = add i32 %85, %61
  %137 = add i32 %136, %105
  %138 = xor i32 %132, %137
  %139 = tail call i32 @llvm.fshl.i32(i32 %138, i32 %138, i32 16)
  %140 = add i32 %139, %118
  %141 = xor i32 %140, %105
  %142 = tail call i32 @llvm.fshl.i32(i32 %141, i32 %141, i32 20)
  %143 = add i32 %137, %63
  %144 = add i32 %143, %142
  %145 = xor i32 %144, %139
  %146 = tail call i32 @llvm.fshl.i32(i32 %145, i32 %145, i32 24)
  %147 = add i32 %146, %140
  %148 = xor i32 %147, %142
  %149 = tail call i32 @llvm.fshl.i32(i32 %148, i32 %148, i32 25)
  %150 = add i32 %100, %65
  %151 = add i32 %150, %120
  %152 = xor i32 %151, %87
  %153 = tail call i32 @llvm.fshl.i32(i32 %152, i32 %152, i32 16)
  %154 = add i32 %133, %153
  %155 = xor i32 %154, %120
  %156 = tail call i32 @llvm.fshl.i32(i32 %155, i32 %155, i32 20)
  %157 = add i32 %151, %67
  %158 = add i32 %157, %156
  %159 = xor i32 %158, %153
  %160 = tail call i32 @llvm.fshl.i32(i32 %159, i32 %159, i32 24)
  %161 = add i32 %160, %154
  %162 = xor i32 %161, %156
  %163 = tail call i32 @llvm.fshl.i32(i32 %162, i32 %162, i32 25)
  %164 = add i32 %115, %69
  %165 = add i32 %164, %135
  %166 = xor i32 %165, %102
  %167 = tail call i32 @llvm.fshl.i32(i32 %166, i32 %166, i32 16)
  %168 = add i32 %167, %88
  %169 = xor i32 %168, %135
  %170 = tail call i32 @llvm.fshl.i32(i32 %169, i32 %169, i32 20)
  %171 = add i32 %165, %71
  %172 = add i32 %171, %170
  %173 = xor i32 %172, %167
  %174 = tail call i32 @llvm.fshl.i32(i32 %173, i32 %173, i32 24)
  %175 = add i32 %174, %168
  %176 = xor i32 %175, %170
  %177 = tail call i32 @llvm.fshl.i32(i32 %176, i32 %176, i32 25)
  %178 = add i32 %90, %73
  %179 = add i32 %178, %130
  %180 = xor i32 %179, %117
  %181 = tail call i32 @llvm.fshl.i32(i32 %180, i32 %180, i32 16)
  %182 = add i32 %181, %103
  %183 = xor i32 %182, %90
  %184 = tail call i32 @llvm.fshl.i32(i32 %183, i32 %183, i32 20)
  %185 = add i32 %179, %75
  %186 = add i32 %185, %184
  %187 = xor i32 %186, %181
  %188 = tail call i32 @llvm.fshl.i32(i32 %187, i32 %187, i32 24)
  %189 = add i32 %188, %182
  %190 = xor i32 %189, %184
  %191 = tail call i32 @llvm.fshl.i32(i32 %190, i32 %190, i32 25)
  %192 = add i32 %144, %73
  %193 = add i32 %192, %191
  %194 = xor i32 %193, %160
  %195 = tail call i32 @llvm.fshl.i32(i32 %194, i32 %194, i32 16)
  %196 = add i32 %175, %195
  %197 = xor i32 %196, %191
  %198 = tail call i32 @llvm.fshl.i32(i32 %197, i32 %197, i32 20)
  %199 = add i32 %193, %65
  %200 = add i32 %199, %198
  %201 = xor i32 %200, %195
  %202 = tail call i32 @llvm.fshl.i32(i32 %201, i32 %201, i32 24)
  %203 = add i32 %202, %196
  %204 = xor i32 %203, %198
  %205 = tail call i32 @llvm.fshl.i32(i32 %204, i32 %204, i32 25)
  %206 = add i32 %158, %53
  %207 = add i32 %206, %149
  %208 = xor i32 %174, %207
  %209 = tail call i32 @llvm.fshl.i32(i32 %208, i32 %208, i32 16)
  %210 = add i32 %209, %189
  %211 = xor i32 %210, %149
  %212 = tail call i32 @llvm.fshl.i32(i32 %211, i32 %211, i32 20)
  %213 = add i32 %207, %61
  %214 = add i32 %213, %212
  %215 = xor i32 %214, %209
  %216 = tail call i32 @llvm.fshl.i32(i32 %215, i32 %215, i32 24)
  %217 = add i32 %216, %210
  %218 = xor i32 %217, %212
  %219 = tail call i32 @llvm.fshl.i32(i32 %218, i32 %218, i32 25)
  %220 = add i32 %163, %63
  %221 = add i32 %220, %172
  %222 = xor i32 %221, %188
  %223 = tail call i32 @llvm.fshl.i32(i32 %222, i32 %222, i32 16)
  %224 = add i32 %223, %147
  %225 = xor i32 %224, %163
  %226 = tail call i32 @llvm.fshl.i32(i32 %225, i32 %225, i32 20)
  %227 = add i32 %221, %75
  %228 = add i32 %227, %226
  %229 = xor i32 %228, %223
  %230 = tail call i32 @llvm.fshl.i32(i32 %229, i32 %229, i32 24)
  %231 = add i32 %230, %224
  %232 = xor i32 %231, %226
  %233 = tail call i32 @llvm.fshl.i32(i32 %232, i32 %232, i32 25)
  %234 = add i32 %186, %71
  %235 = add i32 %234, %177
  %236 = xor i32 %235, %146
  %237 = tail call i32 @llvm.fshl.i32(i32 %236, i32 %236, i32 16)
  %238 = add i32 %237, %161
  %239 = xor i32 %238, %177
  %240 = tail call i32 @llvm.fshl.i32(i32 %239, i32 %239, i32 20)
  %241 = add i32 %235, %57
  %242 = add i32 %241, %240
  %243 = xor i32 %242, %237
  %244 = tail call i32 @llvm.fshl.i32(i32 %243, i32 %243, i32 24)
  %245 = add i32 %244, %238
  %246 = xor i32 %245, %240
  %247 = tail call i32 @llvm.fshl.i32(i32 %246, i32 %246, i32 25)
  %248 = add i32 %200, %47
  %249 = add i32 %248, %219
  %250 = xor i32 %244, %249
  %251 = tail call i32 @llvm.fshl.i32(i32 %250, i32 %250, i32 16)
  %252 = add i32 %251, %231
  %253 = xor i32 %252, %219
  %254 = tail call i32 @llvm.fshl.i32(i32 %253, i32 %253, i32 20)
  %255 = add i32 %249, %69
  %256 = add i32 %255, %254
  %257 = xor i32 %256, %251
  %258 = tail call i32 @llvm.fshl.i32(i32 %257, i32 %257, i32 24)
  %259 = add i32 %258, %252
  %260 = xor i32 %259, %254
  %261 = tail call i32 @llvm.fshl.i32(i32 %260, i32 %260, i32 25)
  %262 = add i32 %214, %45
  %263 = add i32 %262, %233
  %264 = xor i32 %263, %202
  %265 = tail call i32 @llvm.fshl.i32(i32 %264, i32 %264, i32 16)
  %266 = add i32 %245, %265
  %267 = xor i32 %266, %233
  %268 = tail call i32 @llvm.fshl.i32(i32 %267, i32 %267, i32 20)
  %269 = add i32 %263, %49
  %270 = add i32 %269, %268
  %271 = xor i32 %270, %265
  %272 = tail call i32 @llvm.fshl.i32(i32 %271, i32 %271, i32 24)
  %273 = add i32 %272, %266
  %274 = xor i32 %273, %268
  %275 = tail call i32 @llvm.fshl.i32(i32 %274, i32 %274, i32 25)
  %276 = add i32 %228, %67
  %277 = add i32 %276, %247
  %278 = xor i32 %277, %216
  %279 = tail call i32 @llvm.fshl.i32(i32 %278, i32 %278, i32 16)
  %280 = add i32 %279, %203
  %281 = xor i32 %280, %247
  %282 = tail call i32 @llvm.fshl.i32(i32 %281, i32 %281, i32 20)
  %283 = add i32 %277, %59
  %284 = add i32 %283, %282
  %285 = xor i32 %284, %279
  %286 = tail call i32 @llvm.fshl.i32(i32 %285, i32 %285, i32 24)
  %287 = add i32 %286, %280
  %288 = xor i32 %287, %282
  %289 = tail call i32 @llvm.fshl.i32(i32 %288, i32 %288, i32 25)
  %290 = add i32 %205, %55
  %291 = add i32 %290, %242
  %292 = xor i32 %291, %230
  %293 = tail call i32 @llvm.fshl.i32(i32 %292, i32 %292, i32 16)
  %294 = add i32 %293, %217
  %295 = xor i32 %294, %205
  %296 = tail call i32 @llvm.fshl.i32(i32 %295, i32 %295, i32 20)
  %297 = add i32 %291, %51
  %298 = add i32 %297, %296
  %299 = xor i32 %298, %293
  %300 = tail call i32 @llvm.fshl.i32(i32 %299, i32 %299, i32 24)
  %301 = add i32 %300, %294
  %302 = xor i32 %301, %296
  %303 = tail call i32 @llvm.fshl.i32(i32 %302, i32 %302, i32 25)
  %304 = add i32 %256, %67
  %305 = add i32 %304, %303
  %306 = xor i32 %305, %272
  %307 = tail call i32 @llvm.fshl.i32(i32 %306, i32 %306, i32 16)
  %308 = add i32 %287, %307
  %309 = xor i32 %308, %303
  %310 = tail call i32 @llvm.fshl.i32(i32 %309, i32 %309, i32 20)
  %311 = add i32 %305, %61
  %312 = add i32 %311, %310
  %313 = xor i32 %312, %307
  %314 = tail call i32 @llvm.fshl.i32(i32 %313, i32 %313, i32 24)
  %315 = add i32 %314, %308
  %316 = xor i32 %315, %310
  %317 = tail call i32 @llvm.fshl.i32(i32 %316, i32 %316, i32 25)
  %318 = add i32 %270, %69
  %319 = add i32 %318, %261
  %320 = xor i32 %286, %319
  %321 = tail call i32 @llvm.fshl.i32(i32 %320, i32 %320, i32 16)
  %322 = add i32 %321, %301
  %323 = xor i32 %322, %261
  %324 = tail call i32 @llvm.fshl.i32(i32 %323, i32 %323, i32 20)
  %325 = add i32 %319, %45
  %326 = add i32 %325, %324
  %327 = xor i32 %326, %321
  %328 = tail call i32 @llvm.fshl.i32(i32 %327, i32 %327, i32 24)
  %329 = add i32 %328, %322
  %330 = xor i32 %329, %324
  %331 = tail call i32 @llvm.fshl.i32(i32 %330, i32 %330, i32 25)
  %332 = add i32 %275, %55
  %333 = add i32 %332, %284
  %334 = xor i32 %333, %300
  %335 = tail call i32 @llvm.fshl.i32(i32 %334, i32 %334, i32 16)
  %336 = add i32 %335, %259
  %337 = xor i32 %336, %275
  %338 = tail call i32 @llvm.fshl.i32(i32 %337, i32 %337, i32 20)
  %339 = add i32 %333, %49
  %340 = add i32 %339, %338
  %341 = xor i32 %340, %335
  %342 = tail call i32 @llvm.fshl.i32(i32 %341, i32 %341, i32 24)
  %343 = add i32 %342, %336
  %344 = xor i32 %343, %338
  %345 = tail call i32 @llvm.fshl.i32(i32 %344, i32 %344, i32 25)
  %346 = add i32 %298, %75
  %347 = add i32 %346, %289
  %348 = xor i32 %347, %258
  %349 = tail call i32 @llvm.fshl.i32(i32 %348, i32 %348, i32 16)
  %350 = add i32 %349, %273
  %351 = xor i32 %350, %289
  %352 = tail call i32 @llvm.fshl.i32(i32 %351, i32 %351, i32 20)
  %353 = add i32 %347, %71
  %354 = add i32 %353, %352
  %355 = xor i32 %354, %349
  %356 = tail call i32 @llvm.fshl.i32(i32 %355, i32 %355, i32 24)
  %357 = add i32 %356, %350
  %358 = xor i32 %357, %352
  %359 = tail call i32 @llvm.fshl.i32(i32 %358, i32 %358, i32 25)
  %360 = add i32 %312, %65
  %361 = add i32 %360, %331
  %362 = xor i32 %356, %361
  %363 = tail call i32 @llvm.fshl.i32(i32 %362, i32 %362, i32 16)
  %364 = add i32 %363, %343
  %365 = xor i32 %364, %331
  %366 = tail call i32 @llvm.fshl.i32(i32 %365, i32 %365, i32 20)
  %367 = add i32 %361, %73
  %368 = add i32 %367, %366
  %369 = xor i32 %368, %363
  %370 = tail call i32 @llvm.fshl.i32(i32 %369, i32 %369, i32 24)
  %371 = add i32 %370, %364
  %372 = xor i32 %371, %366
  %373 = tail call i32 @llvm.fshl.i32(i32 %372, i32 %372, i32 25)
  %374 = add i32 %326, %51
  %375 = add i32 %374, %345
  %376 = xor i32 %375, %314
  %377 = tail call i32 @llvm.fshl.i32(i32 %376, i32 %376, i32 16)
  %378 = add i32 %357, %377
  %379 = xor i32 %378, %345
  %380 = tail call i32 @llvm.fshl.i32(i32 %379, i32 %379, i32 20)
  %381 = add i32 %375, %57
  %382 = add i32 %381, %380
  %383 = xor i32 %382, %377
  %384 = tail call i32 @llvm.fshl.i32(i32 %383, i32 %383, i32 24)
  %385 = add i32 %384, %378
  %386 = xor i32 %385, %380
  %387 = tail call i32 @llvm.fshl.i32(i32 %386, i32 %386, i32 25)
  %388 = add i32 %340, %59
  %389 = add i32 %388, %359
  %390 = xor i32 %389, %328
  %391 = tail call i32 @llvm.fshl.i32(i32 %390, i32 %390, i32 16)
  %392 = add i32 %391, %315
  %393 = xor i32 %392, %359
  %394 = tail call i32 @llvm.fshl.i32(i32 %393, i32 %393, i32 20)
  %395 = add i32 %389, %47
  %396 = add i32 %395, %394
  %397 = xor i32 %396, %391
  %398 = tail call i32 @llvm.fshl.i32(i32 %397, i32 %397, i32 24)
  %399 = add i32 %398, %392
  %400 = xor i32 %399, %394
  %401 = tail call i32 @llvm.fshl.i32(i32 %400, i32 %400, i32 25)
  %402 = add i32 %317, %63
  %403 = add i32 %402, %354
  %404 = xor i32 %403, %342
  %405 = tail call i32 @llvm.fshl.i32(i32 %404, i32 %404, i32 16)
  %406 = add i32 %405, %329
  %407 = xor i32 %406, %317
  %408 = tail call i32 @llvm.fshl.i32(i32 %407, i32 %407, i32 20)
  %409 = add i32 %403, %53
  %410 = add i32 %409, %408
  %411 = xor i32 %410, %405
  %412 = tail call i32 @llvm.fshl.i32(i32 %411, i32 %411, i32 24)
  %413 = add i32 %412, %406
  %414 = xor i32 %413, %408
  %415 = tail call i32 @llvm.fshl.i32(i32 %414, i32 %414, i32 25)
  %416 = add i32 %368, %59
  %417 = add i32 %416, %415
  %418 = xor i32 %417, %384
  %419 = tail call i32 @llvm.fshl.i32(i32 %418, i32 %418, i32 16)
  %420 = add i32 %399, %419
  %421 = xor i32 %420, %415
  %422 = tail call i32 @llvm.fshl.i32(i32 %421, i32 %421, i32 20)
  %423 = add i32 %417, %63
  %424 = add i32 %423, %422
  %425 = xor i32 %424, %419
  %426 = tail call i32 @llvm.fshl.i32(i32 %425, i32 %425, i32 24)
  %427 = add i32 %426, %420
  %428 = xor i32 %427, %422
  %429 = tail call i32 @llvm.fshl.i32(i32 %428, i32 %428, i32 25)
  %430 = add i32 %382, %51
  %431 = add i32 %430, %373
  %432 = xor i32 %398, %431
  %433 = tail call i32 @llvm.fshl.i32(i32 %432, i32 %432, i32 16)
  %434 = add i32 %433, %413
  %435 = xor i32 %434, %373
  %436 = tail call i32 @llvm.fshl.i32(i32 %435, i32 %435, i32 20)
  %437 = add i32 %431, %47
  %438 = add i32 %437, %436
  %439 = xor i32 %438, %433
  %440 = tail call i32 @llvm.fshl.i32(i32 %439, i32 %439, i32 24)
  %441 = add i32 %440, %434
  %442 = xor i32 %441, %436
  %443 = tail call i32 @llvm.fshl.i32(i32 %442, i32 %442, i32 25)
  %444 = add i32 %387, %71
  %445 = add i32 %444, %396
  %446 = xor i32 %445, %412
  %447 = tail call i32 @llvm.fshl.i32(i32 %446, i32 %446, i32 16)
  %448 = add i32 %447, %371
  %449 = xor i32 %448, %387
  %450 = tail call i32 @llvm.fshl.i32(i32 %449, i32 %449, i32 20)
  %451 = add i32 %445, %69
  %452 = add i32 %451, %450
  %453 = xor i32 %452, %447
  %454 = tail call i32 @llvm.fshl.i32(i32 %453, i32 %453, i32 24)
  %455 = add i32 %454, %448
  %456 = xor i32 %455, %450
  %457 = tail call i32 @llvm.fshl.i32(i32 %456, i32 %456, i32 25)
  %458 = add i32 %410, %67
  %459 = add i32 %458, %401
  %460 = xor i32 %459, %370
  %461 = tail call i32 @llvm.fshl.i32(i32 %460, i32 %460, i32 16)
  %462 = add i32 %461, %385
  %463 = xor i32 %462, %401
  %464 = tail call i32 @llvm.fshl.i32(i32 %463, i32 %463, i32 20)
  %465 = add i32 %459, %73
  %466 = add i32 %465, %464
  %467 = xor i32 %466, %461
  %468 = tail call i32 @llvm.fshl.i32(i32 %467, i32 %467, i32 24)
  %469 = add i32 %468, %462
  %470 = xor i32 %469, %464
  %471 = tail call i32 @llvm.fshl.i32(i32 %470, i32 %470, i32 25)
  %472 = add i32 %424, %49
  %473 = add i32 %472, %443
  %474 = xor i32 %468, %473
  %475 = tail call i32 @llvm.fshl.i32(i32 %474, i32 %474, i32 16)
  %476 = add i32 %475, %455
  %477 = xor i32 %476, %443
  %478 = tail call i32 @llvm.fshl.i32(i32 %477, i32 %477, i32 20)
  %479 = add i32 %473, %57
  %480 = add i32 %479, %478
  %481 = xor i32 %480, %475
  %482 = tail call i32 @llvm.fshl.i32(i32 %481, i32 %481, i32 24)
  %483 = add i32 %482, %476
  %484 = xor i32 %483, %478
  %485 = tail call i32 @llvm.fshl.i32(i32 %484, i32 %484, i32 25)
  %486 = add i32 %438, %55
  %487 = add i32 %486, %457
  %488 = xor i32 %487, %426
  %489 = tail call i32 @llvm.fshl.i32(i32 %488, i32 %488, i32 16)
  %490 = add i32 %469, %489
  %491 = xor i32 %490, %457
  %492 = tail call i32 @llvm.fshl.i32(i32 %491, i32 %491, i32 20)
  %493 = add i32 %487, %65
  %494 = add i32 %493, %492
  %495 = xor i32 %494, %489
  %496 = tail call i32 @llvm.fshl.i32(i32 %495, i32 %495, i32 24)
  %497 = add i32 %496, %490
  %498 = xor i32 %497, %492
  %499 = tail call i32 @llvm.fshl.i32(i32 %498, i32 %498, i32 25)
  %500 = add i32 %452, %53
  %501 = add i32 %500, %471
  %502 = xor i32 %501, %440
  %503 = tail call i32 @llvm.fshl.i32(i32 %502, i32 %502, i32 16)
  %504 = add i32 %503, %427
  %505 = xor i32 %504, %471
  %506 = tail call i32 @llvm.fshl.i32(i32 %505, i32 %505, i32 20)
  %507 = add i32 %501, %45
  %508 = add i32 %507, %506
  %509 = xor i32 %508, %503
  %510 = tail call i32 @llvm.fshl.i32(i32 %509, i32 %509, i32 24)
  %511 = add i32 %510, %504
  %512 = xor i32 %511, %506
  %513 = tail call i32 @llvm.fshl.i32(i32 %512, i32 %512, i32 25)
  %514 = add i32 %429, %75
  %515 = add i32 %514, %466
  %516 = xor i32 %515, %454
  %517 = tail call i32 @llvm.fshl.i32(i32 %516, i32 %516, i32 16)
  %518 = add i32 %517, %441
  %519 = xor i32 %518, %429
  %520 = tail call i32 @llvm.fshl.i32(i32 %519, i32 %519, i32 20)
  %521 = add i32 %515, %61
  %522 = add i32 %521, %520
  %523 = xor i32 %522, %517
  %524 = tail call i32 @llvm.fshl.i32(i32 %523, i32 %523, i32 24)
  %525 = add i32 %524, %518
  %526 = xor i32 %525, %520
  %527 = tail call i32 @llvm.fshl.i32(i32 %526, i32 %526, i32 25)
  %528 = add i32 %480, %63
  %529 = add i32 %528, %527
  %530 = xor i32 %529, %496
  %531 = tail call i32 @llvm.fshl.i32(i32 %530, i32 %530, i32 16)
  %532 = add i32 %511, %531
  %533 = xor i32 %532, %527
  %534 = tail call i32 @llvm.fshl.i32(i32 %533, i32 %533, i32 20)
  %535 = add i32 %529, %45
  %536 = add i32 %535, %534
  %537 = xor i32 %536, %531
  %538 = tail call i32 @llvm.fshl.i32(i32 %537, i32 %537, i32 24)
  %539 = add i32 %538, %532
  %540 = xor i32 %539, %534
  %541 = tail call i32 @llvm.fshl.i32(i32 %540, i32 %540, i32 25)
  %542 = add i32 %494, %55
  %543 = add i32 %542, %485
  %544 = xor i32 %510, %543
  %545 = tail call i32 @llvm.fshl.i32(i32 %544, i32 %544, i32 16)
  %546 = add i32 %545, %525
  %547 = xor i32 %546, %485
  %548 = tail call i32 @llvm.fshl.i32(i32 %547, i32 %547, i32 20)
  %549 = add i32 %543, %59
  %550 = add i32 %549, %548
  %551 = xor i32 %550, %545
  %552 = tail call i32 @llvm.fshl.i32(i32 %551, i32 %551, i32 24)
  %553 = add i32 %552, %546
  %554 = xor i32 %553, %548
  %555 = tail call i32 @llvm.fshl.i32(i32 %554, i32 %554, i32 25)
  %556 = add i32 %499, %49
  %557 = add i32 %556, %508
  %558 = xor i32 %557, %524
  %559 = tail call i32 @llvm.fshl.i32(i32 %558, i32 %558, i32 16)
  %560 = add i32 %559, %483
  %561 = xor i32 %560, %499
  %562 = tail call i32 @llvm.fshl.i32(i32 %561, i32 %561, i32 20)
  %563 = add i32 %557, %53
  %564 = add i32 %563, %562
  %565 = xor i32 %564, %559
  %566 = tail call i32 @llvm.fshl.i32(i32 %565, i32 %565, i32 24)
  %567 = add i32 %566, %560
  %568 = xor i32 %567, %562
  %569 = tail call i32 @llvm.fshl.i32(i32 %568, i32 %568, i32 25)
  %570 = add i32 %522, %65
  %571 = add i32 %570, %513
  %572 = xor i32 %571, %482
  %573 = tail call i32 @llvm.fshl.i32(i32 %572, i32 %572, i32 16)
  %574 = add i32 %573, %497
  %575 = xor i32 %574, %513
  %576 = tail call i32 @llvm.fshl.i32(i32 %575, i32 %575, i32 20)
  %577 = add i32 %571, %75
  %578 = add i32 %577, %576
  %579 = xor i32 %578, %573
  %580 = tail call i32 @llvm.fshl.i32(i32 %579, i32 %579, i32 24)
  %581 = add i32 %580, %574
  %582 = xor i32 %581, %576
  %583 = tail call i32 @llvm.fshl.i32(i32 %582, i32 %582, i32 25)
  %584 = add i32 %536, %73
  %585 = add i32 %584, %555
  %586 = xor i32 %580, %585
  %587 = tail call i32 @llvm.fshl.i32(i32 %586, i32 %586, i32 16)
  %588 = add i32 %587, %567
  %589 = xor i32 %588, %555
  %590 = tail call i32 @llvm.fshl.i32(i32 %589, i32 %589, i32 20)
  %591 = add i32 %585, %47
  %592 = add i32 %591, %590
  %593 = xor i32 %592, %587
  %594 = tail call i32 @llvm.fshl.i32(i32 %593, i32 %593, i32 24)
  %595 = add i32 %594, %588
  %596 = xor i32 %595, %590
  %597 = tail call i32 @llvm.fshl.i32(i32 %596, i32 %596, i32 25)
  %598 = add i32 %550, %67
  %599 = add i32 %598, %569
  %600 = xor i32 %599, %538
  %601 = tail call i32 @llvm.fshl.i32(i32 %600, i32 %600, i32 16)
  %602 = add i32 %581, %601
  %603 = xor i32 %602, %569
  %604 = tail call i32 @llvm.fshl.i32(i32 %603, i32 %603, i32 20)
  %605 = add i32 %599, %69
  %606 = add i32 %605, %604
  %607 = xor i32 %606, %601
  %608 = tail call i32 @llvm.fshl.i32(i32 %607, i32 %607, i32 24)
  %609 = add i32 %608, %602
  %610 = xor i32 %609, %604
  %611 = tail call i32 @llvm.fshl.i32(i32 %610, i32 %610, i32 25)
  %612 = add i32 %564, %57
  %613 = add i32 %612, %583
  %614 = xor i32 %613, %552
  %615 = tail call i32 @llvm.fshl.i32(i32 %614, i32 %614, i32 16)
  %616 = add i32 %615, %539
  %617 = xor i32 %616, %583
  %618 = tail call i32 @llvm.fshl.i32(i32 %617, i32 %617, i32 20)
  %619 = add i32 %613, %61
  %620 = add i32 %619, %618
  %621 = xor i32 %620, %615
  %622 = tail call i32 @llvm.fshl.i32(i32 %621, i32 %621, i32 24)
  %623 = add i32 %622, %616
  %624 = xor i32 %623, %618
  %625 = tail call i32 @llvm.fshl.i32(i32 %624, i32 %624, i32 25)
  %626 = add i32 %541, %51
  %627 = add i32 %626, %578
  %628 = xor i32 %627, %566
  %629 = tail call i32 @llvm.fshl.i32(i32 %628, i32 %628, i32 16)
  %630 = add i32 %629, %553
  %631 = xor i32 %630, %541
  %632 = tail call i32 @llvm.fshl.i32(i32 %631, i32 %631, i32 20)
  %633 = add i32 %627, %71
  %634 = add i32 %633, %632
  %635 = xor i32 %634, %629
  %636 = tail call i32 @llvm.fshl.i32(i32 %635, i32 %635, i32 24)
  %637 = add i32 %636, %630
  %638 = xor i32 %637, %632
  %639 = tail call i32 @llvm.fshl.i32(i32 %638, i32 %638, i32 25)
  %640 = add i32 %592, %49
  %641 = add i32 %640, %639
  %642 = xor i32 %641, %608
  %643 = tail call i32 @llvm.fshl.i32(i32 %642, i32 %642, i32 16)
  %644 = add i32 %623, %643
  %645 = xor i32 %644, %639
  %646 = tail call i32 @llvm.fshl.i32(i32 %645, i32 %645, i32 20)
  %647 = add i32 %641, %69
  %648 = add i32 %647, %646
  %649 = xor i32 %648, %643
  %650 = tail call i32 @llvm.fshl.i32(i32 %649, i32 %649, i32 24)
  %651 = add i32 %650, %644
  %652 = xor i32 %651, %646
  %653 = tail call i32 @llvm.fshl.i32(i32 %652, i32 %652, i32 25)
  %654 = add i32 %606, %57
  %655 = add i32 %654, %597
  %656 = xor i32 %622, %655
  %657 = tail call i32 @llvm.fshl.i32(i32 %656, i32 %656, i32 16)
  %658 = add i32 %657, %637
  %659 = xor i32 %658, %597
  %660 = tail call i32 @llvm.fshl.i32(i32 %659, i32 %659, i32 20)
  %661 = add i32 %655, %65
  %662 = add i32 %661, %660
  %663 = xor i32 %662, %657
  %664 = tail call i32 @llvm.fshl.i32(i32 %663, i32 %663, i32 24)
  %665 = add i32 %664, %658
  %666 = xor i32 %665, %660
  %667 = tail call i32 @llvm.fshl.i32(i32 %666, i32 %666, i32 25)
  %668 = add i32 %611, %45
  %669 = add i32 %668, %620
  %670 = xor i32 %669, %636
  %671 = tail call i32 @llvm.fshl.i32(i32 %670, i32 %670, i32 16)
  %672 = add i32 %671, %595
  %673 = xor i32 %672, %611
  %674 = tail call i32 @llvm.fshl.i32(i32 %673, i32 %673, i32 20)
  %675 = add i32 %669, %67
  %676 = add i32 %675, %674
  %677 = xor i32 %676, %671
  %678 = tail call i32 @llvm.fshl.i32(i32 %677, i32 %677, i32 24)
  %679 = add i32 %678, %672
  %680 = xor i32 %679, %674
  %681 = tail call i32 @llvm.fshl.i32(i32 %680, i32 %680, i32 25)
  %682 = add i32 %634, %61
  %683 = add i32 %682, %625
  %684 = xor i32 %683, %594
  %685 = tail call i32 @llvm.fshl.i32(i32 %684, i32 %684, i32 16)
  %686 = add i32 %685, %609
  %687 = xor i32 %686, %625
  %688 = tail call i32 @llvm.fshl.i32(i32 %687, i32 %687, i32 20)
  %689 = add i32 %683, %51
  %690 = add i32 %689, %688
  %691 = xor i32 %690, %685
  %692 = tail call i32 @llvm.fshl.i32(i32 %691, i32 %691, i32 24)
  %693 = add i32 %692, %686
  %694 = xor i32 %693, %688
  %695 = tail call i32 @llvm.fshl.i32(i32 %694, i32 %694, i32 25)
  %696 = add i32 %648, %53
  %697 = add i32 %696, %667
  %698 = xor i32 %692, %697
  %699 = tail call i32 @llvm.fshl.i32(i32 %698, i32 %698, i32 16)
  %700 = add i32 %699, %679
  %701 = xor i32 %700, %667
  %702 = tail call i32 @llvm.fshl.i32(i32 %701, i32 %701, i32 20)
  %703 = add i32 %697, %71
  %704 = add i32 %703, %702
  %705 = xor i32 %704, %699
  %706 = tail call i32 @llvm.fshl.i32(i32 %705, i32 %705, i32 24)
  %707 = add i32 %706, %700
  %708 = xor i32 %707, %702
  %709 = tail call i32 @llvm.fshl.i32(i32 %708, i32 %708, i32 25)
  %710 = add i32 %662, %59
  %711 = add i32 %710, %681
  %712 = xor i32 %711, %650
  %713 = tail call i32 @llvm.fshl.i32(i32 %712, i32 %712, i32 16)
  %714 = add i32 %693, %713
  %715 = xor i32 %714, %681
  %716 = tail call i32 @llvm.fshl.i32(i32 %715, i32 %715, i32 20)
  %717 = add i32 %711, %55
  %718 = add i32 %717, %716
  %719 = xor i32 %718, %713
  %720 = tail call i32 @llvm.fshl.i32(i32 %719, i32 %719, i32 24)
  %721 = add i32 %720, %714
  %722 = xor i32 %721, %716
  %723 = tail call i32 @llvm.fshl.i32(i32 %722, i32 %722, i32 25)
  %724 = add i32 %676, %75
  %725 = add i32 %724, %695
  %726 = xor i32 %725, %664
  %727 = tail call i32 @llvm.fshl.i32(i32 %726, i32 %726, i32 16)
  %728 = add i32 %727, %651
  %729 = xor i32 %728, %695
  %730 = tail call i32 @llvm.fshl.i32(i32 %729, i32 %729, i32 20)
  %731 = add i32 %725, %73
  %732 = add i32 %731, %730
  %733 = xor i32 %732, %727
  %734 = tail call i32 @llvm.fshl.i32(i32 %733, i32 %733, i32 24)
  %735 = add i32 %734, %728
  %736 = xor i32 %735, %730
  %737 = tail call i32 @llvm.fshl.i32(i32 %736, i32 %736, i32 25)
  %738 = add i32 %653, %47
  %739 = add i32 %738, %690
  %740 = xor i32 %739, %678
  %741 = tail call i32 @llvm.fshl.i32(i32 %740, i32 %740, i32 16)
  %742 = add i32 %741, %665
  %743 = xor i32 %742, %653
  %744 = tail call i32 @llvm.fshl.i32(i32 %743, i32 %743, i32 20)
  %745 = add i32 %739, %63
  %746 = add i32 %745, %744
  %747 = xor i32 %746, %741
  %748 = tail call i32 @llvm.fshl.i32(i32 %747, i32 %747, i32 24)
  %749 = add i32 %748, %742
  %750 = xor i32 %749, %744
  %751 = tail call i32 @llvm.fshl.i32(i32 %750, i32 %750, i32 25)
  %752 = add i32 %704, %69
  %753 = add i32 %752, %751
  %754 = xor i32 %753, %720
  %755 = tail call i32 @llvm.fshl.i32(i32 %754, i32 %754, i32 16)
  %756 = add i32 %735, %755
  %757 = xor i32 %756, %751
  %758 = tail call i32 @llvm.fshl.i32(i32 %757, i32 %757, i32 20)
  %759 = add i32 %753, %55
  %760 = add i32 %759, %758
  %761 = xor i32 %760, %755
  %762 = tail call i32 @llvm.fshl.i32(i32 %761, i32 %761, i32 24)
  %763 = add i32 %762, %756
  %764 = xor i32 %763, %758
  %765 = tail call i32 @llvm.fshl.i32(i32 %764, i32 %764, i32 25)
  %766 = add i32 %718, %47
  %767 = add i32 %766, %709
  %768 = xor i32 %734, %767
  %769 = tail call i32 @llvm.fshl.i32(i32 %768, i32 %768, i32 16)
  %770 = add i32 %769, %749
  %771 = xor i32 %770, %709
  %772 = tail call i32 @llvm.fshl.i32(i32 %771, i32 %771, i32 20)
  %773 = add i32 %767, %75
  %774 = add i32 %773, %772
  %775 = xor i32 %774, %769
  %776 = tail call i32 @llvm.fshl.i32(i32 %775, i32 %775, i32 24)
  %777 = add i32 %776, %770
  %778 = xor i32 %777, %772
  %779 = tail call i32 @llvm.fshl.i32(i32 %778, i32 %778, i32 25)
  %780 = add i32 %723, %73
  %781 = add i32 %780, %732
  %782 = xor i32 %781, %748
  %783 = tail call i32 @llvm.fshl.i32(i32 %782, i32 %782, i32 16)
  %784 = add i32 %783, %707
  %785 = xor i32 %784, %723
  %786 = tail call i32 @llvm.fshl.i32(i32 %785, i32 %785, i32 20)
  %787 = add i32 %781, %71
  %788 = add i32 %787, %786
  %789 = xor i32 %788, %783
  %790 = tail call i32 @llvm.fshl.i32(i32 %789, i32 %789, i32 24)
  %791 = add i32 %790, %784
  %792 = xor i32 %791, %786
  %793 = tail call i32 @llvm.fshl.i32(i32 %792, i32 %792, i32 25)
  %794 = add i32 %746, %53
  %795 = add i32 %794, %737
  %796 = xor i32 %795, %706
  %797 = tail call i32 @llvm.fshl.i32(i32 %796, i32 %796, i32 16)
  %798 = add i32 %797, %721
  %799 = xor i32 %798, %737
  %800 = tail call i32 @llvm.fshl.i32(i32 %799, i32 %799, i32 20)
  %801 = add i32 %795, %65
  %802 = add i32 %801, %800
  %803 = xor i32 %802, %797
  %804 = tail call i32 @llvm.fshl.i32(i32 %803, i32 %803, i32 24)
  %805 = add i32 %804, %798
  %806 = xor i32 %805, %800
  %807 = tail call i32 @llvm.fshl.i32(i32 %806, i32 %806, i32 25)
  %808 = add i32 %760, %45
  %809 = add i32 %808, %779
  %810 = xor i32 %804, %809
  %811 = tail call i32 @llvm.fshl.i32(i32 %810, i32 %810, i32 16)
  %812 = add i32 %811, %791
  %813 = xor i32 %812, %779
  %814 = tail call i32 @llvm.fshl.i32(i32 %813, i32 %813, i32 20)
  %815 = add i32 %809, %59
  %816 = add i32 %815, %814
  %817 = xor i32 %816, %811
  %818 = tail call i32 @llvm.fshl.i32(i32 %817, i32 %817, i32 24)
  %819 = add i32 %818, %812
  %820 = xor i32 %819, %814
  %821 = tail call i32 @llvm.fshl.i32(i32 %820, i32 %820, i32 25)
  %822 = add i32 %774, %57
  %823 = add i32 %822, %793
  %824 = xor i32 %823, %762
  %825 = tail call i32 @llvm.fshl.i32(i32 %824, i32 %824, i32 16)
  %826 = add i32 %805, %825
  %827 = xor i32 %826, %793
  %828 = tail call i32 @llvm.fshl.i32(i32 %827, i32 %827, i32 20)
  %829 = add i32 %823, %51
  %830 = add i32 %829, %828
  %831 = xor i32 %830, %825
  %832 = tail call i32 @llvm.fshl.i32(i32 %831, i32 %831, i32 24)
  %833 = add i32 %832, %826
  %834 = xor i32 %833, %828
  %835 = tail call i32 @llvm.fshl.i32(i32 %834, i32 %834, i32 25)
  %836 = add i32 %788, %63
  %837 = add i32 %836, %807
  %838 = xor i32 %837, %776
  %839 = tail call i32 @llvm.fshl.i32(i32 %838, i32 %838, i32 16)
  %840 = add i32 %839, %763
  %841 = xor i32 %840, %807
  %842 = tail call i32 @llvm.fshl.i32(i32 %841, i32 %841, i32 20)
  %843 = add i32 %837, %49
  %844 = add i32 %843, %842
  %845 = xor i32 %844, %839
  %846 = tail call i32 @llvm.fshl.i32(i32 %845, i32 %845, i32 24)
  %847 = add i32 %846, %840
  %848 = xor i32 %847, %842
  %849 = tail call i32 @llvm.fshl.i32(i32 %848, i32 %848, i32 25)
  %850 = add i32 %765, %61
  %851 = add i32 %850, %802
  %852 = xor i32 %851, %790
  %853 = tail call i32 @llvm.fshl.i32(i32 %852, i32 %852, i32 16)
  %854 = add i32 %853, %777
  %855 = xor i32 %854, %765
  %856 = tail call i32 @llvm.fshl.i32(i32 %855, i32 %855, i32 20)
  %857 = add i32 %851, %67
  %858 = add i32 %857, %856
  %859 = xor i32 %858, %853
  %860 = tail call i32 @llvm.fshl.i32(i32 %859, i32 %859, i32 24)
  %861 = add i32 %860, %854
  %862 = xor i32 %861, %856
  %863 = tail call i32 @llvm.fshl.i32(i32 %862, i32 %862, i32 25)
  %864 = add i32 %816, %71
  %865 = add i32 %864, %863
  %866 = xor i32 %865, %832
  %867 = tail call i32 @llvm.fshl.i32(i32 %866, i32 %866, i32 16)
  %868 = add i32 %847, %867
  %869 = xor i32 %868, %863
  %870 = tail call i32 @llvm.fshl.i32(i32 %869, i32 %869, i32 20)
  %871 = add i32 %865, %67
  %872 = add i32 %871, %870
  %873 = xor i32 %872, %867
  %874 = tail call i32 @llvm.fshl.i32(i32 %873, i32 %873, i32 24)
  %875 = add i32 %874, %868
  %876 = xor i32 %875, %870
  %877 = tail call i32 @llvm.fshl.i32(i32 %876, i32 %876, i32 25)
  %878 = add i32 %821, %59
  %879 = add i32 %878, %830
  %880 = xor i32 %846, %879
  %881 = tail call i32 @llvm.fshl.i32(i32 %880, i32 %880, i32 16)
  %882 = add i32 %861, %881
  %883 = xor i32 %821, %882
  %884 = tail call i32 @llvm.fshl.i32(i32 %883, i32 %883, i32 20)
  %885 = add i32 %884, %73
  %886 = add i32 %885, %879
  %887 = xor i32 %881, %886
  %888 = tail call i32 @llvm.fshl.i32(i32 %887, i32 %887, i32 24)
  %889 = add i32 %882, %888
  %890 = xor i32 %884, %889
  %891 = tail call i32 @llvm.fshl.i32(i32 %890, i32 %890, i32 25)
  %892 = add i32 %835, %69
  %893 = add i32 %892, %844
  %894 = xor i32 %860, %893
  %895 = tail call i32 @llvm.fshl.i32(i32 %894, i32 %894, i32 16)
  %896 = add i32 %819, %895
  %897 = xor i32 %835, %896
  %898 = tail call i32 @llvm.fshl.i32(i32 %897, i32 %897, i32 20)
  %899 = add i32 %898, %47
  %900 = add i32 %899, %893
  %901 = xor i32 %895, %900
  %902 = tail call i32 @llvm.fshl.i32(i32 %901, i32 %901, i32 24)
  %903 = add i32 %896, %902
  %904 = xor i32 %898, %903
  %905 = tail call i32 @llvm.fshl.i32(i32 %904, i32 %904, i32 25)
  %906 = add i32 %849, %51
  %907 = add i32 %906, %858
  %908 = xor i32 %818, %907
  %909 = tail call i32 @llvm.fshl.i32(i32 %908, i32 %908, i32 16)
  %910 = add i32 %833, %909
  %911 = xor i32 %849, %910
  %912 = tail call i32 @llvm.fshl.i32(i32 %911, i32 %911, i32 20)
  %913 = add i32 %912, %63
  %914 = add i32 %913, %907
  %915 = xor i32 %909, %914
  %916 = tail call i32 @llvm.fshl.i32(i32 %915, i32 %915, i32 24)
  %917 = add i32 %910, %916
  %918 = xor i32 %912, %917
  %919 = tail call i32 @llvm.fshl.i32(i32 %918, i32 %918, i32 25)
  %920 = add i32 %891, %55
  %921 = add i32 %920, %872
  %922 = xor i32 %916, %921
  %923 = tail call i32 @llvm.fshl.i32(i32 %922, i32 %922, i32 16)
  %924 = add i32 %903, %923
  %925 = xor i32 %891, %924
  %926 = tail call i32 @llvm.fshl.i32(i32 %925, i32 %925, i32 20)
  %927 = add i32 %926, %45
  %928 = add i32 %927, %921
  %929 = xor i32 %923, %928
  %930 = tail call i32 @llvm.fshl.i32(i32 %929, i32 %929, i32 24)
  %931 = add i32 %924, %930
  %932 = xor i32 %926, %931
  %933 = tail call i32 @llvm.fshl.i32(i32 %932, i32 %932, i32 25)
  %934 = add i32 %905, %75
  %935 = add i32 %934, %886
  %936 = xor i32 %874, %935
  %937 = tail call i32 @llvm.fshl.i32(i32 %936, i32 %936, i32 16)
  %938 = add i32 %917, %937
  %939 = xor i32 %905, %938
  %940 = tail call i32 @llvm.fshl.i32(i32 %939, i32 %939, i32 20)
  %941 = add i32 %940, %53
  %942 = add i32 %941, %935
  %943 = xor i32 %937, %942
  %944 = tail call i32 @llvm.fshl.i32(i32 %943, i32 %943, i32 24)
  %945 = add i32 %938, %944
  %946 = xor i32 %940, %945
  %947 = tail call i32 @llvm.fshl.i32(i32 %946, i32 %946, i32 25)
  %948 = add i32 %919, %61
  %949 = add i32 %948, %900
  %950 = xor i32 %888, %949
  %951 = tail call i32 @llvm.fshl.i32(i32 %950, i32 %950, i32 16)
  %952 = add i32 %875, %951
  %953 = xor i32 %919, %952
  %954 = tail call i32 @llvm.fshl.i32(i32 %953, i32 %953, i32 20)
  %955 = add i32 %954, %57
  %956 = add i32 %955, %949
  %957 = xor i32 %951, %956
  %958 = tail call i32 @llvm.fshl.i32(i32 %957, i32 %957, i32 24)
  %959 = add i32 %952, %958
  %960 = xor i32 %954, %959
  %961 = tail call i32 @llvm.fshl.i32(i32 %960, i32 %960, i32 25)
  %962 = add i32 %877, %49
  %963 = add i32 %962, %914
  %964 = xor i32 %902, %963
  %965 = tail call i32 @llvm.fshl.i32(i32 %964, i32 %964, i32 16)
  %966 = add i32 %889, %965
  %967 = xor i32 %877, %966
  %968 = tail call i32 @llvm.fshl.i32(i32 %967, i32 %967, i32 20)
  %969 = add i32 %968, %65
  %970 = add i32 %969, %963
  %971 = xor i32 %965, %970
  %972 = tail call i32 @llvm.fshl.i32(i32 %971, i32 %971, i32 24)
  %973 = add i32 %966, %972
  %974 = xor i32 %968, %973
  %975 = tail call i32 @llvm.fshl.i32(i32 %974, i32 %974, i32 25)
  %976 = add i32 %975, %57
  %977 = add i32 %976, %928
  %978 = xor i32 %944, %977
  %979 = tail call i32 @llvm.fshl.i32(i32 %978, i32 %978, i32 16)
  %980 = add i32 %959, %979
  %981 = xor i32 %975, %980
  %982 = tail call i32 @llvm.fshl.i32(i32 %981, i32 %981, i32 20)
  %983 = add i32 %982, %75
  %984 = add i32 %983, %977
  %985 = xor i32 %979, %984
  %986 = tail call i32 @llvm.fshl.i32(i32 %985, i32 %985, i32 24)
  %987 = add i32 %980, %986
  %988 = xor i32 %982, %987
  %989 = tail call i32 @llvm.fshl.i32(i32 %988, i32 %988, i32 25)
  %990 = add i32 %933, %73
  %991 = add i32 %990, %942
  %992 = xor i32 %958, %991
  %993 = tail call i32 @llvm.fshl.i32(i32 %992, i32 %992, i32 16)
  %994 = add i32 %973, %993
  %995 = xor i32 %933, %994
  %996 = tail call i32 @llvm.fshl.i32(i32 %995, i32 %995, i32 20)
  %997 = add i32 %996, %63
  %998 = add i32 %997, %991
  %999 = xor i32 %993, %998
  %1000 = tail call i32 @llvm.fshl.i32(i32 %999, i32 %999, i32 24)
  %1001 = add i32 %994, %1000
  %1002 = xor i32 %996, %1001
  %1003 = tail call i32 @llvm.fshl.i32(i32 %1002, i32 %1002, i32 25)
  %1004 = add i32 %947, %67
  %1005 = add i32 %1004, %956
  %1006 = xor i32 %972, %1005
  %1007 = tail call i32 @llvm.fshl.i32(i32 %1006, i32 %1006, i32 16)
  %1008 = add i32 %931, %1007
  %1009 = xor i32 %947, %1008
  %1010 = tail call i32 @llvm.fshl.i32(i32 %1009, i32 %1009, i32 20)
  %1011 = add i32 %1010, %51
  %1012 = add i32 %1011, %1005
  %1013 = xor i32 %1007, %1012
  %1014 = tail call i32 @llvm.fshl.i32(i32 %1013, i32 %1013, i32 24)
  %1015 = add i32 %1008, %1014
  %1016 = xor i32 %1010, %1015
  %1017 = tail call i32 @llvm.fshl.i32(i32 %1016, i32 %1016, i32 25)
  %1018 = add i32 %961, %45
  %1019 = add i32 %1018, %970
  %1020 = xor i32 %930, %1019
  %1021 = tail call i32 @llvm.fshl.i32(i32 %1020, i32 %1020, i32 16)
  %1022 = add i32 %945, %1021
  %1023 = xor i32 %961, %1022
  %1024 = tail call i32 @llvm.fshl.i32(i32 %1023, i32 %1023, i32 20)
  %1025 = add i32 %1024, %61
  %1026 = add i32 %1025, %1019
  %1027 = xor i32 %1021, %1026
  %1028 = tail call i32 @llvm.fshl.i32(i32 %1027, i32 %1027, i32 24)
  %1029 = add i32 %1022, %1028
  %1030 = xor i32 %1024, %1029
  %1031 = tail call i32 @llvm.fshl.i32(i32 %1030, i32 %1030, i32 25)
  %1032 = add i32 %1003, %69
  %1033 = add i32 %1032, %984
  %1034 = xor i32 %1028, %1033
  %1035 = tail call i32 @llvm.fshl.i32(i32 %1034, i32 %1034, i32 16)
  %1036 = add i32 %1015, %1035
  %1037 = xor i32 %1003, %1036
  %1038 = tail call i32 @llvm.fshl.i32(i32 %1037, i32 %1037, i32 20)
  %1039 = add i32 %1038, %49
  %1040 = add i32 %1039, %1033
  %1041 = xor i32 %1035, %1040
  %1042 = tail call i32 @llvm.fshl.i32(i32 %1041, i32 %1041, i32 24)
  %1043 = add i32 %1036, %1042
  %1044 = xor i32 %1038, %1043
  %1045 = tail call i32 @llvm.fshl.i32(i32 %1044, i32 %1044, i32 25)
  %1046 = add i32 %1017, %71
  %1047 = add i32 %1046, %998
  %1048 = xor i32 %986, %1047
  %1049 = tail call i32 @llvm.fshl.i32(i32 %1048, i32 %1048, i32 16)
  %1050 = add i32 %1029, %1049
  %1051 = xor i32 %1017, %1050
  %1052 = tail call i32 @llvm.fshl.i32(i32 %1051, i32 %1051, i32 20)
  %1053 = add i32 %1052, %59
  %1054 = add i32 %1053, %1047
  %1055 = xor i32 %1049, %1054
  %1056 = tail call i32 @llvm.fshl.i32(i32 %1055, i32 %1055, i32 24)
  %1057 = add i32 %1050, %1056
  %1058 = xor i32 %1052, %1057
  %1059 = tail call i32 @llvm.fshl.i32(i32 %1058, i32 %1058, i32 25)
  %1060 = add i32 %1031, %47
  %1061 = add i32 %1060, %1012
  %1062 = xor i32 %1000, %1061
  %1063 = tail call i32 @llvm.fshl.i32(i32 %1062, i32 %1062, i32 16)
  %1064 = add i32 %987, %1063
  %1065 = xor i32 %1031, %1064
  %1066 = tail call i32 @llvm.fshl.i32(i32 %1065, i32 %1065, i32 20)
  %1067 = add i32 %1066, %53
  %1068 = add i32 %1067, %1061
  %1069 = xor i32 %1063, %1068
  %1070 = tail call i32 @llvm.fshl.i32(i32 %1069, i32 %1069, i32 24)
  %1071 = add i32 %1064, %1070
  %1072 = xor i32 %1066, %1071
  %1073 = tail call i32 @llvm.fshl.i32(i32 %1072, i32 %1072, i32 25)
  %1074 = add i32 %989, %65
  %1075 = add i32 %1074, %1026
  %1076 = xor i32 %1014, %1075
  %1077 = tail call i32 @llvm.fshl.i32(i32 %1076, i32 %1076, i32 16)
  %1078 = add i32 %1001, %1077
  %1079 = xor i32 %989, %1078
  %1080 = tail call i32 @llvm.fshl.i32(i32 %1079, i32 %1079, i32 20)
  %1081 = add i32 %1080, %55
  %1082 = add i32 %1081, %1075
  %1083 = xor i32 %1077, %1082
  %1084 = tail call i32 @llvm.fshl.i32(i32 %1083, i32 %1083, i32 24)
  %1085 = add i32 %1078, %1084
  %1086 = xor i32 %1080, %1085
  %1087 = tail call i32 @llvm.fshl.i32(i32 %1086, i32 %1086, i32 25)
  %1088 = add i32 %1087, %65
  %1089 = add i32 %1088, %1040
  %1090 = xor i32 %1056, %1089
  %1091 = tail call i32 @llvm.fshl.i32(i32 %1090, i32 %1090, i32 16)
  %1092 = add i32 %1071, %1091
  %1093 = xor i32 %1087, %1092
  %1094 = tail call i32 @llvm.fshl.i32(i32 %1093, i32 %1093, i32 20)
  %1095 = add i32 %1094, %49
  %1096 = add i32 %1095, %1089
  %1097 = xor i32 %1091, %1096
  %1098 = tail call i32 @llvm.fshl.i32(i32 %1097, i32 %1097, i32 24)
  %1099 = add i32 %1092, %1098
  %1100 = xor i32 %1094, %1099
  %1101 = tail call i32 @llvm.fshl.i32(i32 %1100, i32 %1100, i32 25)
  %1102 = add i32 %1045, %61
  %1103 = add i32 %1102, %1054
  %1104 = xor i32 %1070, %1103
  %1105 = tail call i32 @llvm.fshl.i32(i32 %1104, i32 %1104, i32 16)
  %1106 = add i32 %1085, %1105
  %1107 = xor i32 %1045, %1106
  %1108 = tail call i32 @llvm.fshl.i32(i32 %1107, i32 %1107, i32 20)
  %1109 = add i32 %1108, %53
  %1110 = add i32 %1109, %1103
  %1111 = xor i32 %1105, %1110
  %1112 = tail call i32 @llvm.fshl.i32(i32 %1111, i32 %1111, i32 24)
  %1113 = add i32 %1106, %1112
  %1114 = xor i32 %1108, %1113
  %1115 = tail call i32 @llvm.fshl.i32(i32 %1114, i32 %1114, i32 25)
  %1116 = add i32 %1059, %59
  %1117 = add i32 %1116, %1068
  %1118 = xor i32 %1084, %1117
  %1119 = tail call i32 @llvm.fshl.i32(i32 %1118, i32 %1118, i32 16)
  %1120 = add i32 %1043, %1119
  %1121 = xor i32 %1059, %1120
  %1122 = tail call i32 @llvm.fshl.i32(i32 %1121, i32 %1121, i32 20)
  %1123 = add i32 %1122, %57
  %1124 = add i32 %1123, %1117
  %1125 = xor i32 %1119, %1124
  %1126 = tail call i32 @llvm.fshl.i32(i32 %1125, i32 %1125, i32 24)
  %1127 = add i32 %1120, %1126
  %1128 = xor i32 %1122, %1127
  %1129 = tail call i32 @llvm.fshl.i32(i32 %1128, i32 %1128, i32 25)
  %1130 = add i32 %1073, %47
  %1131 = add i32 %1130, %1082
  %1132 = xor i32 %1042, %1131
  %1133 = tail call i32 @llvm.fshl.i32(i32 %1132, i32 %1132, i32 16)
  %1134 = add i32 %1057, %1133
  %1135 = xor i32 %1073, %1134
  %1136 = tail call i32 @llvm.fshl.i32(i32 %1135, i32 %1135, i32 20)
  %1137 = add i32 %1136, %55
  %1138 = add i32 %1137, %1131
  %1139 = xor i32 %1133, %1138
  %1140 = tail call i32 @llvm.fshl.i32(i32 %1139, i32 %1139, i32 24)
  %1141 = add i32 %1134, %1140
  %1142 = xor i32 %1136, %1141
  %1143 = tail call i32 @llvm.fshl.i32(i32 %1142, i32 %1142, i32 25)
  %1144 = add i32 %1115, %75
  %1145 = add i32 %1144, %1096
  %1146 = xor i32 %1140, %1145
  %1147 = tail call i32 @llvm.fshl.i32(i32 %1146, i32 %1146, i32 16)
  %1148 = add i32 %1127, %1147
  %1149 = xor i32 %1115, %1148
  %1150 = tail call i32 @llvm.fshl.i32(i32 %1149, i32 %1149, i32 20)
  %1151 = add i32 %1150, %67
  %1152 = add i32 %1151, %1145
  %1153 = xor i32 %1147, %1152
  %1154 = tail call i32 @llvm.fshl.i32(i32 %1153, i32 %1153, i32 24)
  %1155 = add i32 %1148, %1154
  %1156 = xor i32 %1150, %1155
  %1157 = tail call i32 @llvm.fshl.i32(i32 %1156, i32 %1156, i32 25)
  %1158 = add i32 %1129, %63
  %1159 = add i32 %1158, %1110
  %1160 = xor i32 %1098, %1159
  %1161 = tail call i32 @llvm.fshl.i32(i32 %1160, i32 %1160, i32 16)
  %1162 = add i32 %1141, %1161
  %1163 = xor i32 %1129, %1162
  %1164 = tail call i32 @llvm.fshl.i32(i32 %1163, i32 %1163, i32 20)
  %1165 = add i32 %1164, %73
  %1166 = add i32 %1165, %1159
  %1167 = xor i32 %1161, %1166
  %1168 = tail call i32 @llvm.fshl.i32(i32 %1167, i32 %1167, i32 24)
  %1169 = add i32 %1162, %1168
  %1170 = xor i32 %1164, %1169
  %1171 = tail call i32 @llvm.fshl.i32(i32 %1170, i32 %1170, i32 25)
  %1172 = add i32 %1143, %51
  %1173 = add i32 %1172, %1124
  %1174 = xor i32 %1112, %1173
  %1175 = tail call i32 @llvm.fshl.i32(i32 %1174, i32 %1174, i32 16)
  %1176 = add i32 %1099, %1175
  %1177 = xor i32 %1143, %1176
  %1178 = tail call i32 @llvm.fshl.i32(i32 %1177, i32 %1177, i32 20)
  %1179 = add i32 %1178, %69
  %1180 = add i32 %1179, %1173
  %1181 = xor i32 %1175, %1180
  %1182 = tail call i32 @llvm.fshl.i32(i32 %1181, i32 %1181, i32 24)
  %1183 = add i32 %1176, %1182
  %1184 = xor i32 %1178, %1183
  %1185 = tail call i32 @llvm.fshl.i32(i32 %1184, i32 %1184, i32 25)
  %1186 = add i32 %1101, %71
  %1187 = add i32 %1186, %1138
  %1188 = xor i32 %1126, %1187
  %1189 = tail call i32 @llvm.fshl.i32(i32 %1188, i32 %1188, i32 16)
  %1190 = add i32 %1113, %1189
  %1191 = xor i32 %1101, %1190
  %1192 = tail call i32 @llvm.fshl.i32(i32 %1191, i32 %1191, i32 20)
  %1193 = add i32 %1192, %45
  %1194 = add i32 %1193, %1187
  %1195 = xor i32 %1189, %1194
  %1196 = tail call i32 @llvm.fshl.i32(i32 %1195, i32 %1195, i32 24)
  %1197 = add i32 %1190, %1196
  %1198 = xor i32 %1192, %1197
  %1199 = tail call i32 @llvm.fshl.i32(i32 %1198, i32 %1198, i32 25)
  %1200 = xor i32 %1183, %1152
  %1201 = load i32, ptr %0, align 4
  %1202 = xor i32 %1200, %1201
  store i32 %1202, ptr %0, align 4
  %1203 = xor i32 %1197, %1166
  %1204 = load i32, ptr %12, align 4
  %1205 = xor i32 %1203, %1204
  store i32 %1205, ptr %12, align 4
  %1206 = xor i32 %1155, %1180
  %1207 = load i32, ptr %14, align 4
  %1208 = xor i32 %1206, %1207
  store i32 %1208, ptr %14, align 4
  %1209 = xor i32 %1169, %1194
  %1210 = load i32, ptr %16, align 4
  %1211 = xor i32 %1209, %1210
  store i32 %1211, ptr %16, align 4
  %1212 = xor i32 %1168, %1199
  %1213 = load i32, ptr %18, align 4
  %1214 = xor i32 %1212, %1213
  store i32 %1214, ptr %18, align 4
  %1215 = xor i32 %1182, %1157
  %1216 = load i32, ptr %20, align 4
  %1217 = xor i32 %1215, %1216
  store i32 %1217, ptr %20, align 4
  %1218 = xor i32 %1196, %1171
  %1219 = load i32, ptr %22, align 4
  %1220 = xor i32 %1218, %1219
  store i32 %1220, ptr %22, align 4
  %1221 = xor i32 %1154, %1185
  %1222 = load i32, ptr %24, align 4
  %1223 = xor i32 %1221, %1222
  store i32 %1223, ptr %24, align 4
  %1224 = getelementptr i8, ptr %37, i32 64
  %1225 = add i32 %38, -1
  %1226 = icmp eq i32 %1225, 0
  br i1 %1226, label %1227, label %28

1227:                                             ; preds = %28, %4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32, i32) #1

attributes #0 = { nofree nosync nounwind null_pointer_is_valid sspstrong uwtable(sync) "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+armv7-a,+dsp,+read-tp-hard,+soft-float,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #1 = { nocallback nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6}
!llvm.ident = !{!7}

!0 = !{i32 1, !"wchar_size", i32 2}
!1 = !{i32 1, !"min_enum_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{!"clang version 15.0.0 (/llk/llvm-project-main/clang 126a1f78513fb688819156df98cf7ea83b5e8c18)"}
