; ModuleID = '/llk/IR/lib/crypto/des.c_pt.bc'
source_filename = "../lib/crypto/des.c"
target datalayout = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armv7-unknown-linux-gnueabi"

module asm ".syntax unified"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_des_expand_key:\09\09\09\09\09"
module asm "\09.asciz \09\22des_expand_key\22\09\09\09\09\09"
module asm "__kstrtabns_des_expand_key:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_des_encrypt:\09\09\09\09\09"
module asm "\09.asciz \09\22des_encrypt\22\09\09\09\09\09"
module asm "__kstrtabns_des_encrypt:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_des_decrypt:\09\09\09\09\09"
module asm "\09.asciz \09\22des_decrypt\22\09\09\09\09\09"
module asm "__kstrtabns_des_decrypt:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_des3_ede_expand_key:\09\09\09\09\09"
module asm "\09.asciz \09\22des3_ede_expand_key\22\09\09\09\09\09"
module asm "__kstrtabns_des3_ede_expand_key:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_des3_ede_encrypt:\09\09\09\09\09"
module asm "\09.asciz \09\22des3_ede_encrypt\22\09\09\09\09\09"
module asm "__kstrtabns_des3_ede_encrypt:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_des3_ede_decrypt:\09\09\09\09\09"
module asm "\09.asciz \09\22des3_ede_decrypt\22\09\09\09\09\09"
module asm "__kstrtabns_des3_ede_decrypt:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"

%struct.kernel_symbol = type { i32, ptr, ptr }

@__kstrtab_des_expand_key = external dso_local constant [0 x i8], align 1
@__kstrtabns_des_expand_key = external dso_local constant [0 x i8], align 1
@__ksymtab_des_expand_key = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @des_expand_key to i32), ptr @__kstrtab_des_expand_key, ptr @__kstrtabns_des_expand_key }, section "___ksymtab_gpl+des_expand_key", align 4
@S8 = internal unnamed_addr constant [64 x i32] [i32 268439616, i32 4096, i32 262144, i32 268701760, i32 268435456, i32 268439616, i32 64, i32 268435456, i32 262208, i32 268697600, i32 268701760, i32 266240, i32 268701696, i32 266304, i32 4096, i32 64, i32 268697600, i32 268435520, i32 268439552, i32 4160, i32 266240, i32 262208, i32 268697664, i32 268701696, i32 4160, i32 0, i32 0, i32 268697664, i32 268435520, i32 268439552, i32 266304, i32 262144, i32 266304, i32 262144, i32 268701696, i32 4096, i32 64, i32 268697664, i32 4096, i32 266304, i32 268439552, i32 64, i32 268435520, i32 268697600, i32 268697664, i32 268435456, i32 262144, i32 268439616, i32 0, i32 268701760, i32 262208, i32 268435520, i32 268697600, i32 268439552, i32 268439616, i32 0, i32 268701760, i32 266240, i32 266240, i32 4160, i32 4160, i32 262208, i32 268435456, i32 268701696], align 4
@S6 = internal unnamed_addr constant [64 x i32] [i32 536870928, i32 541065216, i32 16384, i32 541081616, i32 541065216, i32 16, i32 541081616, i32 4194304, i32 536887296, i32 4210704, i32 4194304, i32 536870928, i32 4194320, i32 536887296, i32 536870912, i32 16400, i32 0, i32 4194320, i32 536887312, i32 16384, i32 4210688, i32 536887312, i32 16, i32 541065232, i32 541065232, i32 0, i32 4210704, i32 541081600, i32 16400, i32 4210688, i32 541081600, i32 536870912, i32 536887296, i32 16, i32 541065232, i32 4210688, i32 541081616, i32 4194304, i32 16400, i32 536870928, i32 4194304, i32 536887296, i32 536870912, i32 16400, i32 536870928, i32 541081616, i32 4210688, i32 541065216, i32 4210704, i32 541081600, i32 0, i32 541065232, i32 16, i32 16384, i32 541065216, i32 4210704, i32 16384, i32 4194320, i32 536887312, i32 0, i32 541081600, i32 536870912, i32 4194320, i32 536887312], align 4
@S7 = internal unnamed_addr constant [64 x i32] [i32 2097152, i32 69206018, i32 67110914, i32 0, i32 2048, i32 67110914, i32 2099202, i32 69208064, i32 69208066, i32 2097152, i32 0, i32 67108866, i32 2, i32 67108864, i32 69206018, i32 2050, i32 67110912, i32 2099202, i32 2097154, i32 67110912, i32 67108866, i32 69206016, i32 69208064, i32 2097154, i32 69206016, i32 2048, i32 2050, i32 69208066, i32 2099200, i32 2, i32 67108864, i32 2099200, i32 67108864, i32 2099200, i32 2097152, i32 67110914, i32 67110914, i32 69206018, i32 69206018, i32 2, i32 2097154, i32 67108864, i32 67110912, i32 2097152, i32 69208064, i32 2050, i32 2099202, i32 69208064, i32 2050, i32 67108866, i32 69208066, i32 69206016, i32 2099200, i32 0, i32 2, i32 69208066, i32 0, i32 2099202, i32 69206016, i32 2048, i32 67108866, i32 67110912, i32 2048, i32 2097154], align 4
@S5 = internal unnamed_addr constant [64 x i32] [i32 256, i32 34078976, i32 34078720, i32 1107296512, i32 524288, i32 256, i32 1073741824, i32 34078720, i32 1074266368, i32 524288, i32 33554688, i32 1074266368, i32 1107296512, i32 1107820544, i32 524544, i32 1073741824, i32 33554432, i32 1074266112, i32 1074266112, i32 0, i32 1073742080, i32 1107820800, i32 1107820800, i32 33554688, i32 1107820544, i32 1073742080, i32 0, i32 1107296256, i32 34078976, i32 33554432, i32 1107296256, i32 524544, i32 524288, i32 1107296512, i32 256, i32 33554432, i32 1073741824, i32 34078720, i32 1107296512, i32 1074266368, i32 33554688, i32 1073741824, i32 1107820544, i32 34078976, i32 1074266368, i32 256, i32 33554432, i32 1107820544, i32 1107820800, i32 524544, i32 1107296256, i32 1107820800, i32 34078720, i32 0, i32 1074266112, i32 1107296256, i32 524544, i32 33554688, i32 1073742080, i32 524288, i32 0, i32 1074266112, i32 34078976, i32 1073742080], align 4
@S4 = internal unnamed_addr constant [64 x i32] [i32 8396801, i32 8321, i32 8321, i32 128, i32 8396928, i32 8388737, i32 8388609, i32 8193, i32 0, i32 8396800, i32 8396800, i32 8396929, i32 129, i32 0, i32 8388736, i32 8388609, i32 1, i32 8192, i32 8388608, i32 8396801, i32 128, i32 8388608, i32 8193, i32 8320, i32 8388737, i32 1, i32 8320, i32 8388736, i32 8192, i32 8396928, i32 8396929, i32 129, i32 8388736, i32 8388609, i32 8396800, i32 8396929, i32 129, i32 0, i32 0, i32 8396800, i32 8320, i32 8388736, i32 8388737, i32 1, i32 8396801, i32 8321, i32 8321, i32 128, i32 8396929, i32 129, i32 1, i32 8192, i32 8388609, i32 8193, i32 8396928, i32 8388737, i32 8193, i32 8320, i32 8388608, i32 8396801, i32 128, i32 8388608, i32 8192, i32 8396928], align 4
@S2 = internal unnamed_addr constant [64 x i32] [i32 -2146402272, i32 -2147450880, i32 32768, i32 1081376, i32 1048576, i32 32, i32 -2146435040, i32 -2147450848, i32 -2147483616, i32 -2146402272, i32 -2146402304, i32 -2147483648, i32 -2147450880, i32 1048576, i32 32, i32 -2146435040, i32 1081344, i32 1048608, i32 -2147450848, i32 0, i32 -2147483648, i32 32768, i32 1081376, i32 -2146435072, i32 1048608, i32 -2147483616, i32 0, i32 1081344, i32 32800, i32 -2146402304, i32 -2146435072, i32 32800, i32 0, i32 1081376, i32 -2146435040, i32 1048576, i32 -2147450848, i32 -2146435072, i32 -2146402304, i32 32768, i32 -2146435072, i32 -2147450880, i32 32, i32 -2146402272, i32 1081376, i32 32, i32 32768, i32 -2147483648, i32 32800, i32 -2146402304, i32 1048576, i32 -2147483616, i32 1048608, i32 -2147450848, i32 -2147483616, i32 1048608, i32 1081344, i32 0, i32 -2147450880, i32 32800, i32 -2147483648, i32 -2146435040, i32 -2146402272, i32 1081344], align 4
@S3 = internal unnamed_addr constant [64 x i32] [i32 520, i32 134349312, i32 0, i32 134348808, i32 134218240, i32 0, i32 131592, i32 134218240, i32 131080, i32 134217736, i32 134217736, i32 131072, i32 134349320, i32 131080, i32 134348800, i32 520, i32 134217728, i32 8, i32 134349312, i32 512, i32 131584, i32 134348800, i32 134348808, i32 131592, i32 134218248, i32 131584, i32 131072, i32 134218248, i32 8, i32 134349320, i32 512, i32 134217728, i32 134349312, i32 134217728, i32 131080, i32 520, i32 131072, i32 134349312, i32 134218240, i32 0, i32 512, i32 131080, i32 134349320, i32 134218240, i32 134217736, i32 512, i32 0, i32 134348808, i32 134218248, i32 131072, i32 134217728, i32 134349320, i32 8, i32 131592, i32 131584, i32 134217736, i32 134348800, i32 134218248, i32 520, i32 134348800, i32 131592, i32 8, i32 134348808, i32 131584], align 4
@S1 = internal unnamed_addr constant [64 x i32] [i32 16843776, i32 0, i32 65536, i32 16843780, i32 16842756, i32 66564, i32 4, i32 65536, i32 1024, i32 16843776, i32 16843780, i32 1024, i32 16778244, i32 16842756, i32 16777216, i32 4, i32 1028, i32 16778240, i32 16778240, i32 66560, i32 66560, i32 16842752, i32 16842752, i32 16778244, i32 65540, i32 16777220, i32 16777220, i32 65540, i32 0, i32 1028, i32 66564, i32 16777216, i32 65536, i32 16843780, i32 4, i32 16842752, i32 16843776, i32 16777216, i32 16777216, i32 1024, i32 16842756, i32 65536, i32 66560, i32 16777220, i32 1024, i32 4, i32 16778244, i32 66564, i32 16843780, i32 65540, i32 16842752, i32 16778244, i32 16777220, i32 1028, i32 66564, i32 16843776, i32 1028, i32 16778240, i32 16778240, i32 0, i32 65540, i32 66560, i32 0, i32 16842756], align 4
@__kstrtab_des_encrypt = external dso_local constant [0 x i8], align 1
@__kstrtabns_des_encrypt = external dso_local constant [0 x i8], align 1
@__ksymtab_des_encrypt = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @des_encrypt to i32), ptr @__kstrtab_des_encrypt, ptr @__kstrtabns_des_encrypt }, section "___ksymtab_gpl+des_encrypt", align 4
@__kstrtab_des_decrypt = external dso_local constant [0 x i8], align 1
@__kstrtabns_des_decrypt = external dso_local constant [0 x i8], align 1
@__ksymtab_des_decrypt = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @des_decrypt to i32), ptr @__kstrtab_des_decrypt, ptr @__kstrtabns_des_decrypt }, section "___ksymtab_gpl+des_decrypt", align 4
@__kstrtab_des3_ede_expand_key = external dso_local constant [0 x i8], align 1
@__kstrtabns_des3_ede_expand_key = external dso_local constant [0 x i8], align 1
@__ksymtab_des3_ede_expand_key = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @des3_ede_expand_key to i32), ptr @__kstrtab_des3_ede_expand_key, ptr @__kstrtabns_des3_ede_expand_key }, section "___ksymtab_gpl+des3_ede_expand_key", align 4
@__kstrtab_des3_ede_encrypt = external dso_local constant [0 x i8], align 1
@__kstrtabns_des3_ede_encrypt = external dso_local constant [0 x i8], align 1
@__ksymtab_des3_ede_encrypt = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @des3_ede_encrypt to i32), ptr @__kstrtab_des3_ede_encrypt, ptr @__kstrtabns_des3_ede_encrypt }, section "___ksymtab_gpl+des3_ede_encrypt", align 4
@__kstrtab_des3_ede_decrypt = external dso_local constant [0 x i8], align 1
@__kstrtabns_des3_ede_decrypt = external dso_local constant [0 x i8], align 1
@__ksymtab_des3_ede_decrypt = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @des3_ede_decrypt to i32), ptr @__kstrtab_des3_ede_decrypt, ptr @__kstrtabns_des3_ede_decrypt }, section "___ksymtab_gpl+des3_ede_decrypt", align 4
@__UNIQUE_ID_license104 = internal constant [12 x i8] c"license=GPL\00", section ".modinfo", align 1
@pc2 = internal unnamed_addr constant [1024 x i32] [i32 0, i32 0, i32 0, i32 0, i32 262144, i32 0, i32 67108864, i32 1048576, i32 4194304, i32 8, i32 2048, i32 1073741824, i32 4456448, i32 8, i32 67110912, i32 1074790400, i32 1024, i32 32, i32 134217728, i32 256, i32 263168, i32 32, i32 201326592, i32 1048832, i32 4195328, i32 40, i32 134219776, i32 1073742080, i32 4457472, i32 40, i32 201328640, i32 1074790656, i32 -2147483648, i32 16, i32 0, i32 8388608, i32 -2147221504, i32 16, i32 67108864, i32 9437184, i32 -2143289344, i32 24, i32 2048, i32 1082130432, i32 -2143027200, i32 24, i32 67110912, i32 1083179008, i32 -2147482624, i32 48, i32 134217728, i32 8388864, i32 -2147220480, i32 48, i32 201326592, i32 9437440, i32 -2143288320, i32 56, i32 134219776, i32 1082130688, i32 -2143026176, i32 56, i32 201328640, i32 1083179264, i32 268435456, i32 0, i32 2097152, i32 4096, i32 268697600, i32 0, i32 69206016, i32 1052672, i32 272629760, i32 8, i32 2099200, i32 1073745920, i32 272891904, i32 8, i32 69208064, i32 1074794496, i32 268436480, i32 32, i32 136314880, i32 4352, i32 268698624, i32 32, i32 203423744, i32 1052928, i32 272630784, i32 40, i32 136316928, i32 1073746176, i32 272892928, i32 40, i32 203425792, i32 1074794752, i32 -1879048192, i32 16, i32 2097152, i32 8392704, i32 -1878786048, i32 16, i32 69206016, i32 9441280, i32 -1874853888, i32 24, i32 2099200, i32 1082134528, i32 -1874591744, i32 24, i32 69208064, i32 1083183104, i32 -1879047168, i32 48, i32 136314880, i32 8392960, i32 -1878785024, i32 48, i32 203423744, i32 9441536, i32 -1874852864, i32 56, i32 136316928, i32 1082134784, i32 -1874590720, i32 56, i32 203425792, i32 1083183360, i32 512, i32 524288, i32 0, i32 4, i32 262656, i32 524288, i32 67108864, i32 1048580, i32 4194816, i32 524296, i32 2048, i32 1073741828, i32 4456960, i32 524296, i32 67110912, i32 1074790404, i32 1536, i32 524320, i32 134217728, i32 260, i32 263680, i32 524320, i32 201326592, i32 1048836, i32 4195840, i32 524328, i32 134219776, i32 1073742084, i32 4457984, i32 524328, i32 201328640, i32 1074790660, i32 -2147483136, i32 524304, i32 0, i32 8388612, i32 -2147220992, i32 524304, i32 67108864, i32 9437188, i32 -2143288832, i32 524312, i32 2048, i32 1082130436, i32 -2143026688, i32 524312, i32 67110912, i32 1083179012, i32 -2147482112, i32 524336, i32 134217728, i32 8388868, i32 -2147219968, i32 524336, i32 201326592, i32 9437444, i32 -2143287808, i32 524344, i32 134219776, i32 1082130692, i32 -2143025664, i32 524344, i32 201328640, i32 1083179268, i32 268435968, i32 524288, i32 2097152, i32 4100, i32 268698112, i32 524288, i32 69206016, i32 1052676, i32 272630272, i32 524296, i32 2099200, i32 1073745924, i32 272892416, i32 524296, i32 69208064, i32 1074794500, i32 268436992, i32 524320, i32 136314880, i32 4356, i32 268699136, i32 524320, i32 203423744, i32 1052932, i32 272631296, i32 524328, i32 136316928, i32 1073746180, i32 272893440, i32 524328, i32 203425792, i32 1074794756, i32 -1879047680, i32 524304, i32 2097152, i32 8392708, i32 -1878785536, i32 524304, i32 69206016, i32 9441284, i32 -1874853376, i32 524312, i32 2099200, i32 1082134532, i32 -1874591232, i32 524312, i32 69208064, i32 1083183108, i32 -1879046656, i32 524336, i32 136314880, i32 8392964, i32 -1878784512, i32 524336, i32 203423744, i32 9441540, i32 -1874852352, i32 524344, i32 136316928, i32 1082134788, i32 -1874590208, i32 524344, i32 203425792, i32 1083183364, i32 2, i32 8192, i32 536870912, i32 1, i32 262146, i32 8192, i32 603979776, i32 1048577, i32 4194306, i32 8200, i32 536872960, i32 1073741825, i32 4456450, i32 8200, i32 603981824, i32 1074790401, i32 1026, i32 8224, i32 671088640, i32 257, i32 263170, i32 8224, i32 738197504, i32 1048833, i32 4195330, i32 8232, i32 671090688, i32 1073742081, i32 4457474, i32 8232, i32 738199552, i32 1074790657, i32 -2147483646, i32 8208, i32 536870912, i32 8388609, i32 -2147221502, i32 8208, i32 603979776, i32 9437185, i32 -2143289342, i32 8216, i32 536872960, i32 1082130433, i32 -2143027198, i32 8216, i32 603981824, i32 1083179009, i32 -2147482622, i32 8240, i32 671088640, i32 8388865, i32 -2147220478, i32 8240, i32 738197504, i32 9437441, i32 -2143288318, i32 8248, i32 671090688, i32 1082130689, i32 -2143026174, i32 8248, i32 738199552, i32 1083179265, i32 268435458, i32 8192, i32 538968064, i32 4097, i32 268697602, i32 8192, i32 606076928, i32 1052673, i32 272629762, i32 8200, i32 538970112, i32 1073745921, i32 272891906, i32 8200, i32 606078976, i32 1074794497, i32 268436482, i32 8224, i32 673185792, i32 4353, i32 268698626, i32 8224, i32 740294656, i32 1052929, i32 272630786, i32 8232, i32 673187840, i32 1073746177, i32 272892930, i32 8232, i32 740296704, i32 1074794753, i32 -1879048190, i32 8208, i32 538968064, i32 8392705, i32 -1878786046, i32 8208, i32 606076928, i32 9441281, i32 -1874853886, i32 8216, i32 538970112, i32 1082134529, i32 -1874591742, i32 8216, i32 606078976, i32 1083183105, i32 -1879047166, i32 8240, i32 673185792, i32 8392961, i32 -1878785022, i32 8240, i32 740294656, i32 9441537, i32 -1874852862, i32 8248, i32 673187840, i32 1082134785, i32 -1874590718, i32 8248, i32 740296704, i32 1083183361, i32 514, i32 532480, i32 536870912, i32 5, i32 262658, i32 532480, i32 603979776, i32 1048581, i32 4194818, i32 532488, i32 536872960, i32 1073741829, i32 4456962, i32 532488, i32 603981824, i32 1074790405, i32 1538, i32 532512, i32 671088640, i32 261, i32 263682, i32 532512, i32 738197504, i32 1048837, i32 4195842, i32 532520, i32 671090688, i32 1073742085, i32 4457986, i32 532520, i32 738199552, i32 1074790661, i32 -2147483134, i32 532496, i32 536870912, i32 8388613, i32 -2147220990, i32 532496, i32 603979776, i32 9437189, i32 -2143288830, i32 532504, i32 536872960, i32 1082130437, i32 -2143026686, i32 532504, i32 603981824, i32 1083179013, i32 -2147482110, i32 532528, i32 671088640, i32 8388869, i32 -2147219966, i32 532528, i32 738197504, i32 9437445, i32 -2143287806, i32 532536, i32 671090688, i32 1082130693, i32 -2143025662, i32 532536, i32 738199552, i32 1083179269, i32 268435970, i32 532480, i32 538968064, i32 4101, i32 268698114, i32 532480, i32 606076928, i32 1052677, i32 272630274, i32 532488, i32 538970112, i32 1073745925, i32 272892418, i32 532488, i32 606078976, i32 1074794501, i32 268436994, i32 532512, i32 673185792, i32 4357, i32 268699138, i32 532512, i32 740294656, i32 1052933, i32 272631298, i32 532520, i32 673187840, i32 1073746181, i32 272893442, i32 532520, i32 740296704, i32 1074794757, i32 -1879047678, i32 532496, i32 538968064, i32 8392709, i32 -1878785534, i32 532496, i32 606076928, i32 9441285, i32 -1874853374, i32 532504, i32 538970112, i32 1082134533, i32 -1874591230, i32 532504, i32 606078976, i32 1083183109, i32 -1879046654, i32 532528, i32 673185792, i32 8392965, i32 -1878784510, i32 532528, i32 740294656, i32 9441541, i32 -1874852350, i32 532536, i32 673187840, i32 1082134789, i32 -1874590206, i32 532536, i32 740296704, i32 1083183365, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, i32 524288, i32 268435456, i32 33554432, i32 0, i32 128, i32 4096, i32 33554432, i32 8, i32 524416, i32 268439552, i32 16384, i32 0, i32 64, i32 262144, i32 16384, i32 8, i32 524352, i32 268697600, i32 33570816, i32 0, i32 192, i32 266240, i32 33570816, i32 8, i32 524480, i32 268701696, i32 131072, i32 32768, i32 134217728, i32 2097152, i32 131072, i32 32776, i32 134742016, i32 270532608, i32 33685504, i32 32768, i32 134217856, i32 2101248, i32 33685504, i32 32776, i32 134742144, i32 270536704, i32 147456, i32 32768, i32 134217792, i32 2359296, i32 147456, i32 32776, i32 134742080, i32 270794752, i32 33701888, i32 32768, i32 134217920, i32 2363392, i32 33701888, i32 32776, i32 134742208, i32 270798848, i32 0, i32 16777216, i32 8192, i32 32, i32 0, i32 16777224, i32 532480, i32 268435488, i32 33554432, i32 16777216, i32 8320, i32 4128, i32 33554432, i32 16777224, i32 532608, i32 268439584, i32 16384, i32 16777216, i32 8256, i32 262176, i32 16384, i32 16777224, i32 532544, i32 268697632, i32 33570816, i32 16777216, i32 8384, i32 266272, i32 33570816, i32 16777224, i32 532672, i32 268701728, i32 131072, i32 16809984, i32 134225920, i32 2097184, i32 131072, i32 16809992, i32 134750208, i32 270532640, i32 33685504, i32 16809984, i32 134226048, i32 2101280, i32 33685504, i32 16809992, i32 134750336, i32 270536736, i32 147456, i32 16809984, i32 134225984, i32 2359328, i32 147456, i32 16809992, i32 134750272, i32 270794784, i32 33701888, i32 16809984, i32 134226112, i32 2363424, i32 33701888, i32 16809992, i32 134750400, i32 270798880, i32 1024, i32 67108864, i32 1048576, i32 4, i32 1024, i32 67108872, i32 1572864, i32 268435460, i32 33555456, i32 67108864, i32 1048704, i32 4100, i32 33555456, i32 67108872, i32 1572992, i32 268439556, i32 17408, i32 67108864, i32 1048640, i32 262148, i32 17408, i32 67108872, i32 1572928, i32 268697604, i32 33571840, i32 67108864, i32 1048768, i32 266244, i32 33571840, i32 67108872, i32 1573056, i32 268701700, i32 132096, i32 67141632, i32 135266304, i32 2097156, i32 132096, i32 67141640, i32 135790592, i32 270532612, i32 33686528, i32 67141632, i32 135266432, i32 2101252, i32 33686528, i32 67141640, i32 135790720, i32 270536708, i32 148480, i32 67141632, i32 135266368, i32 2359300, i32 148480, i32 67141640, i32 135790656, i32 270794756, i32 33702912, i32 67141632, i32 135266496, i32 2363396, i32 33702912, i32 67141640, i32 135790784, i32 270798852, i32 1024, i32 83886080, i32 1056768, i32 36, i32 1024, i32 83886088, i32 1581056, i32 268435492, i32 33555456, i32 83886080, i32 1056896, i32 4132, i32 33555456, i32 83886088, i32 1581184, i32 268439588, i32 17408, i32 83886080, i32 1056832, i32 262180, i32 17408, i32 83886088, i32 1581120, i32 268697636, i32 33571840, i32 83886080, i32 1056960, i32 266276, i32 33571840, i32 83886088, i32 1581248, i32 268701732, i32 132096, i32 83918848, i32 135274496, i32 2097188, i32 132096, i32 83918856, i32 135798784, i32 270532644, i32 33686528, i32 83918848, i32 135274624, i32 2101284, i32 33686528, i32 83918856, i32 135798912, i32 270536740, i32 148480, i32 83918848, i32 135274560, i32 2359332, i32 148480, i32 83918856, i32 135798848, i32 270794788, i32 33702912, i32 83918848, i32 135274688, i32 2363428, i32 33702912, i32 83918856, i32 135798976, i32 270798884, i32 2048, i32 65536, i32 536870912, i32 16, i32 2048, i32 65544, i32 537395200, i32 268435472, i32 33556480, i32 65536, i32 536871040, i32 4112, i32 33556480, i32 65544, i32 537395328, i32 268439568, i32 18432, i32 65536, i32 536870976, i32 262160, i32 18432, i32 65544, i32 537395264, i32 268697616, i32 33572864, i32 65536, i32 536871104, i32 266256, i32 33572864, i32 65544, i32 537395392, i32 268701712, i32 133120, i32 98304, i32 671088640, i32 2097168, i32 133120, i32 98312, i32 671612928, i32 270532624, i32 33687552, i32 98304, i32 671088768, i32 2101264, i32 33687552, i32 98312, i32 671613056, i32 270536720, i32 149504, i32 98304, i32 671088704, i32 2359312, i32 149504, i32 98312, i32 671612992, i32 270794768, i32 33703936, i32 98304, i32 671088832, i32 2363408, i32 33703936, i32 98312, i32 671613120, i32 270798864, i32 2048, i32 16842752, i32 536879104, i32 48, i32 2048, i32 16842760, i32 537403392, i32 268435504, i32 33556480, i32 16842752, i32 536879232, i32 4144, i32 33556480, i32 16842760, i32 537403520, i32 268439600, i32 18432, i32 16842752, i32 536879168, i32 262192, i32 18432, i32 16842760, i32 537403456, i32 268697648, i32 33572864, i32 16842752, i32 536879296, i32 266288, i32 33572864, i32 16842760, i32 537403584, i32 268701744, i32 133120, i32 16875520, i32 671096832, i32 2097200, i32 133120, i32 16875528, i32 671621120, i32 270532656, i32 33687552, i32 16875520, i32 671096960, i32 2101296, i32 33687552, i32 16875528, i32 671621248, i32 270536752, i32 149504, i32 16875520, i32 671096896, i32 2359344, i32 149504, i32 16875528, i32 671621184, i32 270794800, i32 33703936, i32 16875520, i32 671097024, i32 2363440, i32 33703936, i32 16875528, i32 671621312, i32 270798896, i32 3072, i32 67174400, i32 537919488, i32 20, i32 3072, i32 67174408, i32 538443776, i32 268435476, i32 33557504, i32 67174400, i32 537919616, i32 4116, i32 33557504, i32 67174408, i32 538443904, i32 268439572, i32 19456, i32 67174400, i32 537919552, i32 262164, i32 19456, i32 67174408, i32 538443840, i32 268697620, i32 33573888, i32 67174400, i32 537919680, i32 266260, i32 33573888, i32 67174408, i32 538443968, i32 268701716, i32 134144, i32 67207168, i32 672137216, i32 2097172, i32 134144, i32 67207176, i32 672661504, i32 270532628, i32 33688576, i32 67207168, i32 672137344, i32 2101268, i32 33688576, i32 67207176, i32 672661632, i32 270536724, i32 150528, i32 67207168, i32 672137280, i32 2359316, i32 150528, i32 67207176, i32 672661568, i32 270794772, i32 33704960, i32 67207168, i32 672137408, i32 2363412, i32 33704960, i32 67207176, i32 672661696, i32 270798868, i32 3072, i32 83951616, i32 537927680, i32 52, i32 3072, i32 83951624, i32 538451968, i32 268435508, i32 33557504, i32 83951616, i32 537927808, i32 4148, i32 33557504, i32 83951624, i32 538452096, i32 268439604, i32 19456, i32 83951616, i32 537927744, i32 262196, i32 19456, i32 83951624, i32 538452032, i32 268697652, i32 33573888, i32 83951616, i32 537927872, i32 266292, i32 33573888, i32 83951624, i32 538452160, i32 268701748, i32 134144, i32 83984384, i32 672145408, i32 2097204, i32 134144, i32 83984392, i32 672669696, i32 270532660, i32 33688576, i32 83984384, i32 672145536, i32 2101300, i32 33688576, i32 83984392, i32 672669824, i32 270536756, i32 150528, i32 83984384, i32 672145472, i32 2359348, i32 150528, i32 83984392, i32 672669760, i32 270794804, i32 33704960, i32 83984384, i32 672145600, i32 2363444, i32 33704960, i32 83984392, i32 672669888, i32 270798900], align 4
@pc1 = internal unnamed_addr constant [256 x i8] c"\00\00@\04\10\10P\14\04@DD\14PTT\02\02B\06\12\12R\16\06BFF\16RVV\80\08\C0\0C\90\18\D0\1C\84H\C4L\94X\D4\\\82\0A\C2\0E\92\1A\D2\1E\86J\C6N\96Z\D6^  `$00p4$`dd4ptt\22\22b&22r6&bff6rvv\A0(\E0,\B08\F0<\A4h\E4l\B4x\F4|\A2*\E2.\B2:\F2>\A6j\E6n\B6z\F6~\08\80H\84\18\90X\94\0C\C0L\C4\1C\D0\\\D4\0A\82J\86\1A\92Z\96\0E\C2N\C6\1E\D2^\D6\88\88\C8\8C\98\98\D8\9C\8C\C8\CC\CC\9C\D8\DC\DC\8A\8A\CA\8E\9A\9A\DA\9E\8E\CA\CE\CE\9E\DA\DE\DE(\A0h\A48\B0x\B4,\E0l\E4<\F0|\F4*\A2j\A6:\B2z\B6.\E2n\E6>\F2~\F6\A8\A8\E8\AC\B8\B8\F8\BC\AC\E8\EC\EC\BC\F8\FC\FC\AA\AA\EA\AE\BA\BA\FA\BE\AE\EA\EE\EE\BE\FA\FE\FE", align 1
@rs = internal unnamed_addr constant [256 x i8] c"\00\00\80\80\02\02\82\82\04\04\84\84\06\06\86\86\08\08\88\88\0A\0A\8A\8A\0C\0C\8C\8C\0E\0E\8E\8E\10\10\90\90\12\12\92\92\14\14\94\94\16\16\96\96\18\18\98\98\1A\1A\9A\9A\1C\1C\9C\9C\1E\1E\9E\9E  \A0\A0\22\22\A2\A2$$\A4\A4&&\A6\A6((\A8\A8**\AA\AA,,\AC\AC..\AE\AE00\B0\B022\B2\B244\B4\B466\B6\B688\B8\B8::\BA\BA<<\BC\BC>>\BE\BE@@\C0\C0BB\C2\C2DD\C4\C4FF\C6\C6HH\C8\C8JJ\CA\CALL\CC\CCNN\CE\CEPP\D0\D0RR\D2\D2TT\D4\D4VV\D6\D6XX\D8\D8ZZ\DA\DA\\\\\DC\DC^^\DE\DE``\E0\E0bb\E2\E2dd\E4\E4ff\E6\E6hh\E8\E8jj\EA\EAll\EC\ECnn\EE\EEpp\F0\F0rr\F2\F2tt\F4\F4vv\F6\F6xx\F8\F8zz\FA\FA||\FC\FC~~\FE\FE", align 1
@llvm.compiler.used = appending global [7 x ptr] [ptr @__UNIQUE_ID_license104, ptr @__ksymtab_des3_ede_decrypt, ptr @__ksymtab_des3_ede_encrypt, ptr @__ksymtab_des3_ede_expand_key, ptr @__ksymtab_des_decrypt, ptr @__ksymtab_des_encrypt, ptr @__ksymtab_des_expand_key], section "llvm.metadata"

; Function Attrs: argmemonly nofree nosync nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local i32 @des_expand_key(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) #0 {
  %4 = icmp eq i32 %2, 8
  br i1 %4, label %5, label %9

5:                                                ; preds = %3
  %6 = tail call fastcc i32 @des_ekey(ptr noundef %0, ptr noundef %1)
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, i32 -126, i32 0
  br label %9

9:                                                ; preds = %5, %3
  %10 = phi i32 [ %8, %5 ], [ -22, %3 ]
  ret i32 %10
}

; Function Attrs: argmemonly nofree nosync nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @des_ekey(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #0 {
  %3 = getelementptr i8, ptr %1, i32 4
  %4 = load i8, ptr %3, align 1
  %5 = shl i8 %4, 4
  %6 = and i8 %5, -32
  %7 = load i8, ptr %1, align 1
  %8 = and i8 %7, 30
  %9 = or i8 %6, %8
  %10 = zext i8 %9 to i32
  %11 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %10
  %12 = load i8, ptr %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr i8, ptr %1, i32 5
  %15 = load i8, ptr %14, align 1
  %16 = shl i8 %15, 4
  %17 = and i8 %16, -32
  %18 = getelementptr i8, ptr %1, i32 1
  %19 = load i8, ptr %18, align 1
  %20 = and i8 %19, 30
  %21 = or i8 %17, %20
  %22 = zext i8 %21 to i32
  %23 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %22
  %24 = load i8, ptr %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr i8, ptr %1, i32 6
  %27 = load i8, ptr %26, align 1
  %28 = shl i8 %27, 4
  %29 = and i8 %28, -32
  %30 = getelementptr i8, ptr %1, i32 2
  %31 = load i8, ptr %30, align 1
  %32 = and i8 %31, 30
  %33 = or i8 %29, %32
  %34 = zext i8 %33 to i32
  %35 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %34
  %36 = load i8, ptr %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr i8, ptr %1, i32 7
  %39 = load i8, ptr %38, align 1
  %40 = shl i8 %39, 4
  %41 = and i8 %40, -32
  %42 = getelementptr i8, ptr %1, i32 3
  %43 = load i8, ptr %42, align 1
  %44 = and i8 %43, 30
  %45 = or i8 %41, %44
  %46 = zext i8 %45 to i32
  %47 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %46
  %48 = load i8, ptr %47, align 1
  %49 = zext i8 %48 to i32
  %50 = shl nuw nsw i32 %13, 1
  %51 = add nuw nsw i32 %50, 3
  %52 = getelementptr i32, ptr @pc2, i32 %51
  %53 = load i32, ptr %52, align 4
  %54 = shl nuw nsw i32 %25, 1
  %55 = add nuw nsw i32 %54, 2
  %56 = getelementptr i32, ptr @pc2, i32 %55
  %57 = load i32, ptr %56, align 4
  %58 = or i32 %57, %53
  %59 = shl nuw nsw i32 %37, 1
  %60 = or i32 %59, 1
  %61 = getelementptr i32, ptr @pc2, i32 %60
  %62 = load i32, ptr %61, align 4
  %63 = or i32 %58, %62
  %64 = shl nuw nsw i32 %49, 1
  %65 = getelementptr i32, ptr @pc2, i32 %64
  %66 = load i32, ptr %65, align 4
  %67 = or i32 %63, %66
  %68 = getelementptr i32, ptr %0, i32 30
  store i32 %67, ptr %68, align 4
  %69 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %13
  %70 = load i8, ptr %69, align 1
  %71 = zext i8 %70 to i32
  %72 = add nuw nsw i32 %54, 3
  %73 = getelementptr i32, ptr @pc2, i32 %72
  %74 = load i32, ptr %73, align 4
  %75 = add nuw nsw i32 %59, 2
  %76 = getelementptr i32, ptr @pc2, i32 %75
  %77 = load i32, ptr %76, align 4
  %78 = or i32 %77, %74
  %79 = or i32 %64, 1
  %80 = getelementptr i32, ptr @pc2, i32 %79
  %81 = load i32, ptr %80, align 4
  %82 = or i32 %78, %81
  %83 = shl nuw nsw i32 %71, 1
  %84 = getelementptr i32, ptr @pc2, i32 %83
  %85 = load i32, ptr %84, align 4
  %86 = or i32 %82, %85
  %87 = getelementptr i32, ptr %0, i32 28
  store i32 %86, ptr %87, align 4
  %88 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %25
  %89 = load i8, ptr %88, align 1
  %90 = zext i8 %89 to i32
  %91 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %37
  %92 = load i8, ptr %91, align 1
  %93 = zext i8 %92 to i32
  %94 = add nuw nsw i32 %64, 3
  %95 = getelementptr i32, ptr @pc2, i32 %94
  %96 = load i32, ptr %95, align 4
  %97 = add nuw nsw i32 %83, 2
  %98 = getelementptr i32, ptr @pc2, i32 %97
  %99 = load i32, ptr %98, align 4
  %100 = or i32 %99, %96
  %101 = shl nuw nsw i32 %90, 1
  %102 = or i32 %101, 1
  %103 = getelementptr i32, ptr @pc2, i32 %102
  %104 = load i32, ptr %103, align 4
  %105 = or i32 %100, %104
  %106 = shl nuw nsw i32 %93, 1
  %107 = getelementptr i32, ptr @pc2, i32 %106
  %108 = load i32, ptr %107, align 4
  %109 = or i32 %105, %108
  %110 = getelementptr i32, ptr %0, i32 26
  store i32 %109, ptr %110, align 4
  %111 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %49
  %112 = load i8, ptr %111, align 1
  %113 = zext i8 %112 to i32
  %114 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %71
  %115 = load i8, ptr %114, align 1
  %116 = zext i8 %115 to i32
  %117 = add nuw nsw i32 %101, 3
  %118 = getelementptr i32, ptr @pc2, i32 %117
  %119 = load i32, ptr %118, align 4
  %120 = add nuw nsw i32 %106, 2
  %121 = getelementptr i32, ptr @pc2, i32 %120
  %122 = load i32, ptr %121, align 4
  %123 = or i32 %122, %119
  %124 = shl nuw nsw i32 %113, 1
  %125 = or i32 %124, 1
  %126 = getelementptr i32, ptr @pc2, i32 %125
  %127 = load i32, ptr %126, align 4
  %128 = or i32 %123, %127
  %129 = shl nuw nsw i32 %116, 1
  %130 = getelementptr i32, ptr @pc2, i32 %129
  %131 = load i32, ptr %130, align 4
  %132 = or i32 %128, %131
  %133 = getelementptr i32, ptr %0, i32 24
  store i32 %132, ptr %133, align 4
  %134 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %90
  %135 = load i8, ptr %134, align 1
  %136 = zext i8 %135 to i32
  %137 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %93
  %138 = load i8, ptr %137, align 1
  %139 = zext i8 %138 to i32
  %140 = add nuw nsw i32 %124, 3
  %141 = getelementptr i32, ptr @pc2, i32 %140
  %142 = load i32, ptr %141, align 4
  %143 = add nuw nsw i32 %129, 2
  %144 = getelementptr i32, ptr @pc2, i32 %143
  %145 = load i32, ptr %144, align 4
  %146 = or i32 %145, %142
  %147 = shl nuw nsw i32 %136, 1
  %148 = or i32 %147, 1
  %149 = getelementptr i32, ptr @pc2, i32 %148
  %150 = load i32, ptr %149, align 4
  %151 = or i32 %146, %150
  %152 = shl nuw nsw i32 %139, 1
  %153 = getelementptr i32, ptr @pc2, i32 %152
  %154 = load i32, ptr %153, align 4
  %155 = or i32 %151, %154
  %156 = getelementptr i32, ptr %0, i32 22
  store i32 %155, ptr %156, align 4
  %157 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %113
  %158 = load i8, ptr %157, align 1
  %159 = zext i8 %158 to i32
  %160 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %116
  %161 = load i8, ptr %160, align 1
  %162 = zext i8 %161 to i32
  %163 = add nuw nsw i32 %147, 3
  %164 = getelementptr i32, ptr @pc2, i32 %163
  %165 = load i32, ptr %164, align 4
  %166 = add nuw nsw i32 %152, 2
  %167 = getelementptr i32, ptr @pc2, i32 %166
  %168 = load i32, ptr %167, align 4
  %169 = or i32 %168, %165
  %170 = shl nuw nsw i32 %159, 1
  %171 = or i32 %170, 1
  %172 = getelementptr i32, ptr @pc2, i32 %171
  %173 = load i32, ptr %172, align 4
  %174 = or i32 %169, %173
  %175 = shl nuw nsw i32 %162, 1
  %176 = getelementptr i32, ptr @pc2, i32 %175
  %177 = load i32, ptr %176, align 4
  %178 = or i32 %174, %177
  %179 = getelementptr i32, ptr %0, i32 20
  store i32 %178, ptr %179, align 4
  %180 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %136
  %181 = load i8, ptr %180, align 1
  %182 = zext i8 %181 to i32
  %183 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %139
  %184 = load i8, ptr %183, align 1
  %185 = zext i8 %184 to i32
  %186 = add nuw nsw i32 %170, 3
  %187 = getelementptr i32, ptr @pc2, i32 %186
  %188 = load i32, ptr %187, align 4
  %189 = add nuw nsw i32 %175, 2
  %190 = getelementptr i32, ptr @pc2, i32 %189
  %191 = load i32, ptr %190, align 4
  %192 = or i32 %191, %188
  %193 = shl nuw nsw i32 %182, 1
  %194 = or i32 %193, 1
  %195 = getelementptr i32, ptr @pc2, i32 %194
  %196 = load i32, ptr %195, align 4
  %197 = or i32 %192, %196
  %198 = shl nuw nsw i32 %185, 1
  %199 = getelementptr i32, ptr @pc2, i32 %198
  %200 = load i32, ptr %199, align 4
  %201 = or i32 %197, %200
  %202 = getelementptr i32, ptr %0, i32 18
  store i32 %201, ptr %202, align 4
  %203 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %159
  %204 = load i8, ptr %203, align 1
  %205 = zext i8 %204 to i32
  %206 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %162
  %207 = load i8, ptr %206, align 1
  %208 = zext i8 %207 to i32
  %209 = add nuw nsw i32 %193, 3
  %210 = getelementptr i32, ptr @pc2, i32 %209
  %211 = load i32, ptr %210, align 4
  %212 = add nuw nsw i32 %198, 2
  %213 = getelementptr i32, ptr @pc2, i32 %212
  %214 = load i32, ptr %213, align 4
  %215 = or i32 %214, %211
  %216 = shl nuw nsw i32 %205, 1
  %217 = or i32 %216, 1
  %218 = getelementptr i32, ptr @pc2, i32 %217
  %219 = load i32, ptr %218, align 4
  %220 = or i32 %215, %219
  %221 = shl nuw nsw i32 %208, 1
  %222 = getelementptr i32, ptr @pc2, i32 %221
  %223 = load i32, ptr %222, align 4
  %224 = or i32 %220, %223
  %225 = getelementptr i32, ptr %0, i32 16
  store i32 %224, ptr %225, align 4
  %226 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %182
  %227 = load i8, ptr %226, align 1
  %228 = zext i8 %227 to i32
  %229 = add nuw nsw i32 %198, 3
  %230 = getelementptr i32, ptr @pc2, i32 %229
  %231 = load i32, ptr %230, align 4
  %232 = add nuw nsw i32 %216, 2
  %233 = getelementptr i32, ptr @pc2, i32 %232
  %234 = load i32, ptr %233, align 4
  %235 = or i32 %234, %231
  %236 = or i32 %221, 1
  %237 = getelementptr i32, ptr @pc2, i32 %236
  %238 = load i32, ptr %237, align 4
  %239 = or i32 %235, %238
  %240 = shl nuw nsw i32 %228, 1
  %241 = getelementptr i32, ptr @pc2, i32 %240
  %242 = load i32, ptr %241, align 4
  %243 = or i32 %239, %242
  %244 = getelementptr i32, ptr %0, i32 14
  store i32 %243, ptr %244, align 4
  %245 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %185
  %246 = load i8, ptr %245, align 1
  %247 = zext i8 %246 to i32
  %248 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %205
  %249 = load i8, ptr %248, align 1
  %250 = zext i8 %249 to i32
  %251 = add nuw nsw i32 %221, 3
  %252 = getelementptr i32, ptr @pc2, i32 %251
  %253 = load i32, ptr %252, align 4
  %254 = add nuw nsw i32 %240, 2
  %255 = getelementptr i32, ptr @pc2, i32 %254
  %256 = load i32, ptr %255, align 4
  %257 = or i32 %256, %253
  %258 = shl nuw nsw i32 %247, 1
  %259 = or i32 %258, 1
  %260 = getelementptr i32, ptr @pc2, i32 %259
  %261 = load i32, ptr %260, align 4
  %262 = or i32 %257, %261
  %263 = shl nuw nsw i32 %250, 1
  %264 = getelementptr i32, ptr @pc2, i32 %263
  %265 = load i32, ptr %264, align 4
  %266 = or i32 %262, %265
  %267 = getelementptr i32, ptr %0, i32 12
  store i32 %266, ptr %267, align 4
  %268 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %208
  %269 = load i8, ptr %268, align 1
  %270 = zext i8 %269 to i32
  %271 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %228
  %272 = load i8, ptr %271, align 1
  %273 = zext i8 %272 to i32
  %274 = add nuw nsw i32 %258, 3
  %275 = getelementptr i32, ptr @pc2, i32 %274
  %276 = load i32, ptr %275, align 4
  %277 = add nuw nsw i32 %263, 2
  %278 = getelementptr i32, ptr @pc2, i32 %277
  %279 = load i32, ptr %278, align 4
  %280 = or i32 %279, %276
  %281 = shl nuw nsw i32 %270, 1
  %282 = or i32 %281, 1
  %283 = getelementptr i32, ptr @pc2, i32 %282
  %284 = load i32, ptr %283, align 4
  %285 = or i32 %280, %284
  %286 = shl nuw nsw i32 %273, 1
  %287 = getelementptr i32, ptr @pc2, i32 %286
  %288 = load i32, ptr %287, align 4
  %289 = or i32 %285, %288
  %290 = getelementptr i32, ptr %0, i32 10
  store i32 %289, ptr %290, align 4
  %291 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %247
  %292 = load i8, ptr %291, align 1
  %293 = zext i8 %292 to i32
  %294 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %250
  %295 = load i8, ptr %294, align 1
  %296 = zext i8 %295 to i32
  %297 = add nuw nsw i32 %281, 3
  %298 = getelementptr i32, ptr @pc2, i32 %297
  %299 = load i32, ptr %298, align 4
  %300 = add nuw nsw i32 %286, 2
  %301 = getelementptr i32, ptr @pc2, i32 %300
  %302 = load i32, ptr %301, align 4
  %303 = or i32 %302, %299
  %304 = shl nuw nsw i32 %293, 1
  %305 = or i32 %304, 1
  %306 = getelementptr i32, ptr @pc2, i32 %305
  %307 = load i32, ptr %306, align 4
  %308 = or i32 %303, %307
  %309 = shl nuw nsw i32 %296, 1
  %310 = getelementptr i32, ptr @pc2, i32 %309
  %311 = load i32, ptr %310, align 4
  %312 = or i32 %308, %311
  %313 = getelementptr i32, ptr %0, i32 8
  store i32 %312, ptr %313, align 4
  %314 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %270
  %315 = load i8, ptr %314, align 1
  %316 = zext i8 %315 to i32
  %317 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %273
  %318 = load i8, ptr %317, align 1
  %319 = zext i8 %318 to i32
  %320 = add nuw nsw i32 %304, 3
  %321 = getelementptr i32, ptr @pc2, i32 %320
  %322 = load i32, ptr %321, align 4
  %323 = add nuw nsw i32 %309, 2
  %324 = getelementptr i32, ptr @pc2, i32 %323
  %325 = load i32, ptr %324, align 4
  %326 = or i32 %325, %322
  %327 = shl nuw nsw i32 %316, 1
  %328 = or i32 %327, 1
  %329 = getelementptr i32, ptr @pc2, i32 %328
  %330 = load i32, ptr %329, align 4
  %331 = or i32 %326, %330
  %332 = shl nuw nsw i32 %319, 1
  %333 = getelementptr i32, ptr @pc2, i32 %332
  %334 = load i32, ptr %333, align 4
  %335 = or i32 %331, %334
  %336 = getelementptr i32, ptr %0, i32 6
  store i32 %335, ptr %336, align 4
  %337 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %293
  %338 = load i8, ptr %337, align 1
  %339 = zext i8 %338 to i32
  %340 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %296
  %341 = load i8, ptr %340, align 1
  %342 = zext i8 %341 to i32
  %343 = add nuw nsw i32 %327, 3
  %344 = getelementptr i32, ptr @pc2, i32 %343
  %345 = load i32, ptr %344, align 4
  %346 = add nuw nsw i32 %332, 2
  %347 = getelementptr i32, ptr @pc2, i32 %346
  %348 = load i32, ptr %347, align 4
  %349 = or i32 %348, %345
  %350 = shl nuw nsw i32 %339, 1
  %351 = or i32 %350, 1
  %352 = getelementptr i32, ptr @pc2, i32 %351
  %353 = load i32, ptr %352, align 4
  %354 = or i32 %349, %353
  %355 = shl nuw nsw i32 %342, 1
  %356 = getelementptr i32, ptr @pc2, i32 %355
  %357 = load i32, ptr %356, align 4
  %358 = or i32 %354, %357
  %359 = getelementptr i32, ptr %0, i32 4
  store i32 %358, ptr %359, align 4
  %360 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %316
  %361 = load i8, ptr %360, align 1
  %362 = zext i8 %361 to i32
  %363 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %319
  %364 = load i8, ptr %363, align 1
  %365 = zext i8 %364 to i32
  %366 = add nuw nsw i32 %350, 3
  %367 = getelementptr i32, ptr @pc2, i32 %366
  %368 = load i32, ptr %367, align 4
  %369 = add nuw nsw i32 %355, 2
  %370 = getelementptr i32, ptr @pc2, i32 %369
  %371 = load i32, ptr %370, align 4
  %372 = or i32 %371, %368
  %373 = shl nuw nsw i32 %362, 1
  %374 = or i32 %373, 1
  %375 = getelementptr i32, ptr @pc2, i32 %374
  %376 = load i32, ptr %375, align 4
  %377 = or i32 %372, %376
  %378 = shl nuw nsw i32 %365, 1
  %379 = getelementptr i32, ptr @pc2, i32 %378
  %380 = load i32, ptr %379, align 4
  %381 = or i32 %377, %380
  %382 = getelementptr i32, ptr %0, i32 2
  store i32 %381, ptr %382, align 4
  %383 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %339
  %384 = load i8, ptr %383, align 1
  %385 = zext i8 %384 to i32
  %386 = add nuw nsw i32 %355, 3
  %387 = getelementptr i32, ptr @pc2, i32 %386
  %388 = load i32, ptr %387, align 4
  %389 = add nuw nsw i32 %373, 2
  %390 = getelementptr i32, ptr @pc2, i32 %389
  %391 = load i32, ptr %390, align 4
  %392 = or i32 %391, %388
  %393 = or i32 %378, 1
  %394 = getelementptr i32, ptr @pc2, i32 %393
  %395 = load i32, ptr %394, align 4
  %396 = or i32 %392, %395
  %397 = shl nuw nsw i32 %385, 1
  %398 = getelementptr i32, ptr @pc2, i32 %397
  %399 = load i32, ptr %398, align 4
  %400 = or i32 %396, %399
  store i32 %400, ptr %0, align 4
  %401 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %342
  %402 = load i8, ptr %401, align 1
  %403 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %362
  %404 = load i8, ptr %403, align 1
  %405 = load i8, ptr %1, align 1
  %406 = lshr i8 %405, 4
  %407 = load i8, ptr %3, align 1
  %408 = and i8 %407, -16
  %409 = or i8 %406, %408
  %410 = or i8 %409, 1
  %411 = zext i8 %410 to i32
  %412 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %411
  %413 = load i8, ptr %412, align 1
  %414 = zext i8 %413 to i32
  %415 = load i8, ptr %18, align 1
  %416 = lshr i8 %415, 4
  %417 = load i8, ptr %14, align 1
  %418 = and i8 %417, -16
  %419 = or i8 %416, %418
  %420 = or i8 %419, 1
  %421 = zext i8 %420 to i32
  %422 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %421
  %423 = load i8, ptr %422, align 1
  %424 = zext i8 %423 to i32
  %425 = load i8, ptr %30, align 1
  %426 = lshr i8 %425, 4
  %427 = load i8, ptr %26, align 1
  %428 = and i8 %427, -16
  %429 = or i8 %426, %428
  %430 = or i8 %429, 1
  %431 = zext i8 %430 to i32
  %432 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %431
  %433 = load i8, ptr %432, align 1
  %434 = zext i8 %433 to i32
  %435 = load i8, ptr %42, align 1
  %436 = lshr i8 %435, 4
  %437 = load i8, ptr %38, align 1
  %438 = and i8 %437, -16
  %439 = or i8 %436, %438
  %440 = or i8 %439, 1
  %441 = zext i8 %440 to i32
  %442 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %441
  %443 = load i8, ptr %442, align 1
  %444 = zext i8 %443 to i32
  %445 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %444
  %446 = load i8, ptr %445, align 1
  %447 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %414
  %448 = load i8, ptr %447, align 1
  %449 = shl nuw nsw i32 %414, 1
  %450 = add nuw nsw i32 %449, 3
  %451 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %450
  %452 = load i32, ptr %451, align 4
  %453 = shl nuw nsw i32 %424, 1
  %454 = add nuw nsw i32 %453, 2
  %455 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %454
  %456 = load i32, ptr %455, align 4
  %457 = or i32 %456, %452
  %458 = shl nuw nsw i32 %434, 1
  %459 = or i32 %458, 1
  %460 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %459
  %461 = load i32, ptr %460, align 4
  %462 = or i32 %457, %461
  %463 = shl nuw nsw i32 %444, 1
  %464 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %463
  %465 = load i32, ptr %464, align 4
  %466 = or i32 %462, %465
  %467 = getelementptr i32, ptr %0, i32 31
  store i32 %466, ptr %467, align 4
  %468 = zext i8 %448 to i32
  %469 = add nuw nsw i32 %453, 3
  %470 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %469
  %471 = load i32, ptr %470, align 4
  %472 = add nuw nsw i32 %458, 2
  %473 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %472
  %474 = load i32, ptr %473, align 4
  %475 = or i32 %474, %471
  %476 = or i32 %463, 1
  %477 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %476
  %478 = load i32, ptr %477, align 4
  %479 = or i32 %475, %478
  %480 = shl nuw nsw i32 %468, 1
  %481 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %480
  %482 = load i32, ptr %481, align 4
  %483 = or i32 %479, %482
  %484 = getelementptr i32, ptr %0, i32 29
  store i32 %483, ptr %484, align 4
  %485 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %424
  %486 = load i8, ptr %485, align 1
  %487 = zext i8 %486 to i32
  %488 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %434
  %489 = load i8, ptr %488, align 1
  %490 = zext i8 %489 to i32
  %491 = add nuw nsw i32 %463, 3
  %492 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %491
  %493 = load i32, ptr %492, align 4
  %494 = add nuw nsw i32 %480, 2
  %495 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %494
  %496 = load i32, ptr %495, align 4
  %497 = or i32 %496, %493
  %498 = shl nuw nsw i32 %487, 1
  %499 = or i32 %498, 1
  %500 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %499
  %501 = load i32, ptr %500, align 4
  %502 = or i32 %497, %501
  %503 = shl nuw nsw i32 %490, 1
  %504 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %503
  %505 = load i32, ptr %504, align 4
  %506 = or i32 %502, %505
  %507 = getelementptr i32, ptr %0, i32 27
  store i32 %506, ptr %507, align 4
  %508 = zext i8 %446 to i32
  %509 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %468
  %510 = load i8, ptr %509, align 1
  %511 = zext i8 %510 to i32
  %512 = add nuw nsw i32 %498, 3
  %513 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %512
  %514 = load i32, ptr %513, align 4
  %515 = add nuw nsw i32 %503, 2
  %516 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %515
  %517 = load i32, ptr %516, align 4
  %518 = or i32 %517, %514
  %519 = shl nuw nsw i32 %508, 1
  %520 = or i32 %519, 1
  %521 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %520
  %522 = load i32, ptr %521, align 4
  %523 = or i32 %518, %522
  %524 = shl nuw nsw i32 %511, 1
  %525 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %524
  %526 = load i32, ptr %525, align 4
  %527 = or i32 %523, %526
  %528 = getelementptr i32, ptr %0, i32 25
  store i32 %527, ptr %528, align 4
  %529 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %487
  %530 = load i8, ptr %529, align 1
  %531 = zext i8 %530 to i32
  %532 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %490
  %533 = load i8, ptr %532, align 1
  %534 = zext i8 %533 to i32
  %535 = add nuw nsw i32 %519, 3
  %536 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %535
  %537 = load i32, ptr %536, align 4
  %538 = add nuw nsw i32 %524, 2
  %539 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %538
  %540 = load i32, ptr %539, align 4
  %541 = or i32 %540, %537
  %542 = shl nuw nsw i32 %531, 1
  %543 = or i32 %542, 1
  %544 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %543
  %545 = load i32, ptr %544, align 4
  %546 = or i32 %541, %545
  %547 = shl nuw nsw i32 %534, 1
  %548 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %547
  %549 = load i32, ptr %548, align 4
  %550 = or i32 %546, %549
  %551 = getelementptr i32, ptr %0, i32 23
  store i32 %550, ptr %551, align 4
  %552 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %508
  %553 = load i8, ptr %552, align 1
  %554 = zext i8 %553 to i32
  %555 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %511
  %556 = load i8, ptr %555, align 1
  %557 = zext i8 %556 to i32
  %558 = add nuw nsw i32 %542, 3
  %559 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %558
  %560 = load i32, ptr %559, align 4
  %561 = add nuw nsw i32 %547, 2
  %562 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %561
  %563 = load i32, ptr %562, align 4
  %564 = or i32 %563, %560
  %565 = shl nuw nsw i32 %554, 1
  %566 = or i32 %565, 1
  %567 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %566
  %568 = load i32, ptr %567, align 4
  %569 = or i32 %564, %568
  %570 = shl nuw nsw i32 %557, 1
  %571 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %570
  %572 = load i32, ptr %571, align 4
  %573 = or i32 %569, %572
  %574 = getelementptr i32, ptr %0, i32 21
  store i32 %573, ptr %574, align 4
  %575 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %531
  %576 = load i8, ptr %575, align 1
  %577 = zext i8 %576 to i32
  %578 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %534
  %579 = load i8, ptr %578, align 1
  %580 = zext i8 %579 to i32
  %581 = add nuw nsw i32 %565, 3
  %582 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %581
  %583 = load i32, ptr %582, align 4
  %584 = add nuw nsw i32 %570, 2
  %585 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %584
  %586 = load i32, ptr %585, align 4
  %587 = or i32 %586, %583
  %588 = shl nuw nsw i32 %577, 1
  %589 = or i32 %588, 1
  %590 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %589
  %591 = load i32, ptr %590, align 4
  %592 = or i32 %587, %591
  %593 = shl nuw nsw i32 %580, 1
  %594 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %593
  %595 = load i32, ptr %594, align 4
  %596 = or i32 %592, %595
  %597 = getelementptr i32, ptr %0, i32 19
  store i32 %596, ptr %597, align 4
  %598 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %554
  %599 = load i8, ptr %598, align 1
  %600 = zext i8 %599 to i32
  %601 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %557
  %602 = load i8, ptr %601, align 1
  %603 = zext i8 %602 to i32
  %604 = add nuw nsw i32 %588, 3
  %605 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %604
  %606 = load i32, ptr %605, align 4
  %607 = add nuw nsw i32 %593, 2
  %608 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %607
  %609 = load i32, ptr %608, align 4
  %610 = or i32 %609, %606
  %611 = shl nuw nsw i32 %600, 1
  %612 = or i32 %611, 1
  %613 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %612
  %614 = load i32, ptr %613, align 4
  %615 = or i32 %610, %614
  %616 = shl nuw nsw i32 %603, 1
  %617 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %616
  %618 = load i32, ptr %617, align 4
  %619 = or i32 %615, %618
  %620 = getelementptr i32, ptr %0, i32 17
  store i32 %619, ptr %620, align 4
  %621 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %577
  %622 = load i8, ptr %621, align 1
  %623 = zext i8 %622 to i32
  %624 = add nuw nsw i32 %593, 3
  %625 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %624
  %626 = load i32, ptr %625, align 4
  %627 = add nuw nsw i32 %611, 2
  %628 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %627
  %629 = load i32, ptr %628, align 4
  %630 = or i32 %629, %626
  %631 = or i32 %616, 1
  %632 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %631
  %633 = load i32, ptr %632, align 4
  %634 = or i32 %630, %633
  %635 = shl nuw nsw i32 %623, 1
  %636 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %635
  %637 = load i32, ptr %636, align 4
  %638 = or i32 %634, %637
  %639 = getelementptr i32, ptr %0, i32 15
  store i32 %638, ptr %639, align 4
  %640 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %580
  %641 = load i8, ptr %640, align 1
  %642 = zext i8 %641 to i32
  %643 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %600
  %644 = load i8, ptr %643, align 1
  %645 = zext i8 %644 to i32
  %646 = add nuw nsw i32 %616, 3
  %647 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %646
  %648 = load i32, ptr %647, align 4
  %649 = add nuw nsw i32 %635, 2
  %650 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %649
  %651 = load i32, ptr %650, align 4
  %652 = or i32 %651, %648
  %653 = shl nuw nsw i32 %642, 1
  %654 = or i32 %653, 1
  %655 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %654
  %656 = load i32, ptr %655, align 4
  %657 = or i32 %652, %656
  %658 = shl nuw nsw i32 %645, 1
  %659 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %658
  %660 = load i32, ptr %659, align 4
  %661 = or i32 %657, %660
  %662 = getelementptr i32, ptr %0, i32 13
  store i32 %661, ptr %662, align 4
  %663 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %603
  %664 = load i8, ptr %663, align 1
  %665 = zext i8 %664 to i32
  %666 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %623
  %667 = load i8, ptr %666, align 1
  %668 = zext i8 %667 to i32
  %669 = add nuw nsw i32 %653, 3
  %670 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %669
  %671 = load i32, ptr %670, align 4
  %672 = add nuw nsw i32 %658, 2
  %673 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %672
  %674 = load i32, ptr %673, align 4
  %675 = or i32 %674, %671
  %676 = shl nuw nsw i32 %665, 1
  %677 = or i32 %676, 1
  %678 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %677
  %679 = load i32, ptr %678, align 4
  %680 = or i32 %675, %679
  %681 = shl nuw nsw i32 %668, 1
  %682 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %681
  %683 = load i32, ptr %682, align 4
  %684 = or i32 %680, %683
  %685 = getelementptr i32, ptr %0, i32 11
  store i32 %684, ptr %685, align 4
  %686 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %642
  %687 = load i8, ptr %686, align 1
  %688 = zext i8 %687 to i32
  %689 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %645
  %690 = load i8, ptr %689, align 1
  %691 = zext i8 %690 to i32
  %692 = add nuw nsw i32 %676, 3
  %693 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %692
  %694 = load i32, ptr %693, align 4
  %695 = add nuw nsw i32 %681, 2
  %696 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %695
  %697 = load i32, ptr %696, align 4
  %698 = or i32 %697, %694
  %699 = shl nuw nsw i32 %688, 1
  %700 = or i32 %699, 1
  %701 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %700
  %702 = load i32, ptr %701, align 4
  %703 = or i32 %698, %702
  %704 = shl nuw nsw i32 %691, 1
  %705 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %704
  %706 = load i32, ptr %705, align 4
  %707 = or i32 %703, %706
  %708 = getelementptr i32, ptr %0, i32 9
  store i32 %707, ptr %708, align 4
  %709 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %665
  %710 = load i8, ptr %709, align 1
  %711 = zext i8 %710 to i32
  %712 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %668
  %713 = load i8, ptr %712, align 1
  %714 = zext i8 %713 to i32
  %715 = add nuw nsw i32 %699, 3
  %716 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %715
  %717 = load i32, ptr %716, align 4
  %718 = add nuw nsw i32 %704, 2
  %719 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %718
  %720 = load i32, ptr %719, align 4
  %721 = or i32 %720, %717
  %722 = shl nuw nsw i32 %711, 1
  %723 = or i32 %722, 1
  %724 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %723
  %725 = load i32, ptr %724, align 4
  %726 = or i32 %721, %725
  %727 = shl nuw nsw i32 %714, 1
  %728 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %727
  %729 = load i32, ptr %728, align 4
  %730 = or i32 %726, %729
  %731 = getelementptr i32, ptr %0, i32 7
  store i32 %730, ptr %731, align 4
  %732 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %688
  %733 = load i8, ptr %732, align 1
  %734 = zext i8 %733 to i32
  %735 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %691
  %736 = load i8, ptr %735, align 1
  %737 = zext i8 %736 to i32
  %738 = add nuw nsw i32 %722, 3
  %739 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %738
  %740 = load i32, ptr %739, align 4
  %741 = add nuw nsw i32 %727, 2
  %742 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %741
  %743 = load i32, ptr %742, align 4
  %744 = or i32 %743, %740
  %745 = shl nuw nsw i32 %734, 1
  %746 = or i32 %745, 1
  %747 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %746
  %748 = load i32, ptr %747, align 4
  %749 = or i32 %744, %748
  %750 = shl nuw nsw i32 %737, 1
  %751 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %750
  %752 = load i32, ptr %751, align 4
  %753 = or i32 %749, %752
  %754 = getelementptr i32, ptr %0, i32 5
  store i32 %753, ptr %754, align 4
  %755 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %711
  %756 = load i8, ptr %755, align 1
  %757 = zext i8 %756 to i32
  %758 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %714
  %759 = load i8, ptr %758, align 1
  %760 = zext i8 %759 to i32
  %761 = add nuw nsw i32 %745, 3
  %762 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %761
  %763 = load i32, ptr %762, align 4
  %764 = add nuw nsw i32 %750, 2
  %765 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %764
  %766 = load i32, ptr %765, align 4
  %767 = or i32 %766, %763
  %768 = shl nuw nsw i32 %757, 1
  %769 = or i32 %768, 1
  %770 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %769
  %771 = load i32, ptr %770, align 4
  %772 = or i32 %767, %771
  %773 = shl nuw nsw i32 %760, 1
  %774 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %773
  %775 = load i32, ptr %774, align 4
  %776 = or i32 %772, %775
  %777 = getelementptr i32, ptr %0, i32 3
  store i32 %776, ptr %777, align 4
  %778 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %734
  %779 = load i8, ptr %778, align 1
  %780 = zext i8 %779 to i32
  %781 = add nuw nsw i32 %750, 3
  %782 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %781
  %783 = load i32, ptr %782, align 4
  %784 = add nuw nsw i32 %768, 2
  %785 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %784
  %786 = load i32, ptr %785, align 4
  %787 = or i32 %786, %783
  %788 = or i32 %773, 1
  %789 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %788
  %790 = load i32, ptr %789, align 4
  %791 = or i32 %787, %790
  %792 = shl nuw nsw i32 %780, 1
  %793 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %792
  %794 = load i32, ptr %793, align 4
  %795 = or i32 %791, %794
  %796 = getelementptr i32, ptr %0, i32 1
  store i32 %795, ptr %796, align 4
  br label %797

797:                                              ; preds = %797, %2
  %798 = phi i32 [ 0, %2 ], [ %810, %797 ]
  %799 = shl nuw nsw i32 %798, 1
  %800 = getelementptr i32, ptr %0, i32 %799
  %801 = load i32, ptr %800, align 4
  %802 = or i32 %799, 1
  %803 = getelementptr i32, ptr %0, i32 %802
  %804 = load i32, ptr %803, align 4
  %805 = xor i32 %804, %801
  %806 = and i32 %805, -65536
  %807 = xor i32 %806, %801
  %808 = xor i32 %806, %804
  %809 = tail call i32 @llvm.fshl.i32(i32 %804, i32 %808, i32 18) #7
  store i32 %807, ptr %800, align 4
  store i32 %809, ptr %803, align 4
  %810 = add nuw nsw i32 %798, 1
  %811 = icmp eq i32 %810, 16
  br i1 %811, label %812, label %797

812:                                              ; preds = %797
  %813 = xor i8 %443, %423
  %814 = xor i8 %433, %413
  %815 = xor i8 %446, %423
  %816 = xor i8 %448, %433
  %817 = xor i8 %364, %341
  %818 = xor i8 %384, %361
  %819 = xor i8 %402, %364
  %820 = xor i8 %404, %384
  %821 = or i8 %818, %817
  %822 = or i8 %821, %819
  %823 = or i8 %822, %820
  %824 = or i8 %823, %814
  %825 = or i8 %824, %813
  %826 = or i8 %825, %815
  %827 = or i8 %826, %816
  %828 = zext i8 %827 to i32
  ret i32 %828
}

; Function Attrs: nofree nosync nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @des_encrypt(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2) #1 {
  %4 = load i32, ptr %2, align 1
  %5 = getelementptr i8, ptr %2, i32 4
  %6 = load i32, ptr %5, align 1
  %7 = tail call i32 @llvm.fshl.i32(i32 %6, i32 %6, i32 4) #7
  %8 = xor i32 %7, %4
  %9 = and i32 %8, -252645136
  %10 = xor i32 %9, %7
  %11 = xor i32 %9, %4
  %12 = tail call i32 @llvm.fshl.i32(i32 %10, i32 %10, i32 12) #7
  %13 = xor i32 %12, %11
  %14 = and i32 %13, -65536
  %15 = xor i32 %14, %12
  %16 = xor i32 %14, %11
  %17 = tail call i32 @llvm.fshl.i32(i32 %12, i32 %15, i32 18)
  %18 = xor i32 %17, %16
  %19 = and i32 %18, -858993460
  %20 = xor i32 %19, %17
  %21 = xor i32 %19, %16
  %22 = tail call i32 @llvm.fshl.i32(i32 %20, i32 %20, i32 6) #7
  %23 = xor i32 %22, %21
  %24 = and i32 %23, -16711936
  %25 = xor i32 %24, %22
  %26 = xor i32 %24, %21
  %27 = tail call i32 @llvm.fshl.i32(i32 %22, i32 %25, i32 25)
  %28 = xor i32 %27, %26
  %29 = and i32 %28, -1431655766
  %30 = xor i32 %29, %27
  %31 = xor i32 %29, %26
  %32 = tail call i32 @llvm.fshl.i32(i32 %31, i32 %31, i32 1) #7
  br label %33

33:                                               ; preds = %33, %3
  %34 = phi i32 [ 0, %3 ], [ %128, %33 ]
  %35 = phi i32 [ %30, %3 ], [ %127, %33 ]
  %36 = phi i32 [ %32, %3 ], [ %82, %33 ]
  %37 = phi ptr [ %0, %3 ], [ %86, %33 ]
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr i32, ptr %37, i32 1
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr i32, ptr %37, i32 2
  %42 = xor i32 %38, %35
  %43 = xor i32 %40, %35
  %44 = tail call i32 @llvm.fshl.i32(i32 %43, i32 %43, i32 28)
  %45 = and i32 %42, 63
  %46 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %45
  %47 = load i32, ptr %46, align 4
  %48 = xor i32 %47, %36
  %49 = lshr i32 %42, 8
  %50 = and i32 %49, 63
  %51 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %50
  %52 = load i32, ptr %51, align 4
  %53 = xor i32 %48, %52
  %54 = lshr i32 %42, 16
  %55 = and i32 %44, 63
  %56 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %55
  %57 = load i32, ptr %56, align 4
  %58 = xor i32 %53, %57
  %59 = lshr i32 %44, 8
  %60 = and i32 %59, 63
  %61 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %60
  %62 = load i32, ptr %61, align 4
  %63 = xor i32 %58, %62
  %64 = lshr i32 %44, 16
  %65 = and i32 %54, 63
  %66 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %65
  %67 = load i32, ptr %66, align 4
  %68 = xor i32 %63, %67
  %69 = lshr i32 %42, 24
  %70 = and i32 %69, 63
  %71 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %70
  %72 = load i32, ptr %71, align 4
  %73 = xor i32 %68, %72
  %74 = and i32 %64, 63
  %75 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %74
  %76 = load i32, ptr %75, align 4
  %77 = xor i32 %73, %76
  %78 = lshr i32 %44, 24
  %79 = and i32 %78, 63
  %80 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %79
  %81 = load i32, ptr %80, align 4
  %82 = xor i32 %77, %81
  %83 = load i32, ptr %41, align 4
  %84 = getelementptr i32, ptr %37, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = getelementptr i32, ptr %37, i32 4
  %87 = xor i32 %83, %82
  %88 = xor i32 %85, %82
  %89 = tail call i32 @llvm.fshl.i32(i32 %88, i32 %88, i32 28)
  %90 = and i32 %87, 63
  %91 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %90
  %92 = load i32, ptr %91, align 4
  %93 = xor i32 %92, %35
  %94 = lshr i32 %87, 8
  %95 = and i32 %94, 63
  %96 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %95
  %97 = load i32, ptr %96, align 4
  %98 = xor i32 %93, %97
  %99 = lshr i32 %87, 16
  %100 = and i32 %89, 63
  %101 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %100
  %102 = load i32, ptr %101, align 4
  %103 = xor i32 %98, %102
  %104 = lshr i32 %89, 8
  %105 = and i32 %104, 63
  %106 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %105
  %107 = load i32, ptr %106, align 4
  %108 = xor i32 %103, %107
  %109 = lshr i32 %89, 16
  %110 = and i32 %99, 63
  %111 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %110
  %112 = load i32, ptr %111, align 4
  %113 = xor i32 %108, %112
  %114 = lshr i32 %87, 24
  %115 = and i32 %114, 63
  %116 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %115
  %117 = load i32, ptr %116, align 4
  %118 = xor i32 %113, %117
  %119 = and i32 %109, 63
  %120 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %119
  %121 = load i32, ptr %120, align 4
  %122 = xor i32 %118, %121
  %123 = lshr i32 %89, 24
  %124 = and i32 %123, 63
  %125 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %124
  %126 = load i32, ptr %125, align 4
  %127 = xor i32 %122, %126
  %128 = add nuw nsw i32 %34, 1
  %129 = icmp eq i32 %128, 8
  br i1 %129, label %130, label %33

130:                                              ; preds = %33
  %131 = tail call i32 @llvm.fshl.i32(i32 %127, i32 %127, i32 31)
  %132 = xor i32 %131, %82
  %133 = and i32 %132, -1431655766
  %134 = xor i32 %133, %82
  %135 = xor i32 %133, %131
  %136 = tail call i32 @llvm.fshl.i32(i32 %134, i32 %134, i32 7) #7
  %137 = xor i32 %136, %135
  %138 = and i32 %137, -16711936
  %139 = xor i32 %138, %136
  %140 = xor i32 %138, %135
  %141 = tail call i32 @llvm.fshl.i32(i32 %136, i32 %139, i32 26)
  %142 = xor i32 %141, %140
  %143 = and i32 %142, -858993460
  %144 = xor i32 %143, %141
  %145 = xor i32 %143, %140
  %146 = tail call i32 @llvm.fshl.i32(i32 %144, i32 %144, i32 14) #7
  %147 = xor i32 %146, %145
  %148 = and i32 %147, -65536
  %149 = xor i32 %148, %146
  %150 = xor i32 %148, %145
  %151 = tail call i32 @llvm.fshl.i32(i32 %146, i32 %149, i32 20)
  %152 = xor i32 %151, %150
  %153 = and i32 %152, -252645136
  %154 = xor i32 %153, %151
  %155 = xor i32 %153, %150
  %156 = tail call i32 @llvm.fshl.i32(i32 %151, i32 %154, i32 28)
  store i32 %155, ptr %1, align 1
  %157 = getelementptr i8, ptr %1, i32 4
  store i32 %156, ptr %157, align 1
  ret void
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: nofree nosync nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @des_decrypt(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2) #1 {
  %4 = getelementptr i32, ptr %0, i32 30
  %5 = load i32, ptr %2, align 1
  %6 = getelementptr i8, ptr %2, i32 4
  %7 = load i32, ptr %6, align 1
  %8 = tail call i32 @llvm.fshl.i32(i32 %7, i32 %7, i32 4) #7
  %9 = xor i32 %8, %5
  %10 = and i32 %9, -252645136
  %11 = xor i32 %10, %8
  %12 = xor i32 %10, %5
  %13 = tail call i32 @llvm.fshl.i32(i32 %11, i32 %11, i32 12) #7
  %14 = xor i32 %13, %12
  %15 = and i32 %14, -65536
  %16 = xor i32 %15, %13
  %17 = xor i32 %15, %12
  %18 = tail call i32 @llvm.fshl.i32(i32 %13, i32 %16, i32 18)
  %19 = xor i32 %18, %17
  %20 = and i32 %19, -858993460
  %21 = xor i32 %20, %18
  %22 = xor i32 %20, %17
  %23 = tail call i32 @llvm.fshl.i32(i32 %21, i32 %21, i32 6) #7
  %24 = xor i32 %23, %22
  %25 = and i32 %24, -16711936
  %26 = xor i32 %25, %23
  %27 = xor i32 %25, %22
  %28 = tail call i32 @llvm.fshl.i32(i32 %23, i32 %26, i32 25)
  %29 = xor i32 %28, %27
  %30 = and i32 %29, -1431655766
  %31 = xor i32 %30, %28
  %32 = xor i32 %30, %27
  %33 = tail call i32 @llvm.fshl.i32(i32 %32, i32 %32, i32 1) #7
  br label %34

34:                                               ; preds = %34, %3
  %35 = phi i32 [ 0, %3 ], [ %129, %34 ]
  %36 = phi i32 [ %31, %3 ], [ %128, %34 ]
  %37 = phi i32 [ %33, %3 ], [ %83, %34 ]
  %38 = phi ptr [ %4, %3 ], [ %87, %34 ]
  %39 = load i32, ptr %38, align 4
  %40 = getelementptr i32, ptr %38, i32 1
  %41 = load i32, ptr %40, align 4
  %42 = getelementptr i32, ptr %38, i32 -2
  %43 = xor i32 %39, %36
  %44 = xor i32 %41, %36
  %45 = tail call i32 @llvm.fshl.i32(i32 %44, i32 %44, i32 28)
  %46 = and i32 %43, 63
  %47 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %46
  %48 = load i32, ptr %47, align 4
  %49 = xor i32 %48, %37
  %50 = lshr i32 %43, 8
  %51 = and i32 %50, 63
  %52 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %51
  %53 = load i32, ptr %52, align 4
  %54 = xor i32 %49, %53
  %55 = lshr i32 %43, 16
  %56 = and i32 %45, 63
  %57 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %56
  %58 = load i32, ptr %57, align 4
  %59 = xor i32 %54, %58
  %60 = lshr i32 %45, 8
  %61 = and i32 %60, 63
  %62 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %61
  %63 = load i32, ptr %62, align 4
  %64 = xor i32 %59, %63
  %65 = lshr i32 %45, 16
  %66 = and i32 %55, 63
  %67 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %66
  %68 = load i32, ptr %67, align 4
  %69 = xor i32 %64, %68
  %70 = lshr i32 %43, 24
  %71 = and i32 %70, 63
  %72 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %71
  %73 = load i32, ptr %72, align 4
  %74 = xor i32 %69, %73
  %75 = and i32 %65, 63
  %76 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %75
  %77 = load i32, ptr %76, align 4
  %78 = xor i32 %74, %77
  %79 = lshr i32 %45, 24
  %80 = and i32 %79, 63
  %81 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %80
  %82 = load i32, ptr %81, align 4
  %83 = xor i32 %78, %82
  %84 = load i32, ptr %42, align 4
  %85 = getelementptr i32, ptr %38, i32 -1
  %86 = load i32, ptr %85, align 4
  %87 = getelementptr i32, ptr %38, i32 -4
  %88 = xor i32 %84, %83
  %89 = xor i32 %86, %83
  %90 = tail call i32 @llvm.fshl.i32(i32 %89, i32 %89, i32 28)
  %91 = and i32 %88, 63
  %92 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %91
  %93 = load i32, ptr %92, align 4
  %94 = xor i32 %93, %36
  %95 = lshr i32 %88, 8
  %96 = and i32 %95, 63
  %97 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %96
  %98 = load i32, ptr %97, align 4
  %99 = xor i32 %94, %98
  %100 = lshr i32 %88, 16
  %101 = and i32 %90, 63
  %102 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %101
  %103 = load i32, ptr %102, align 4
  %104 = xor i32 %99, %103
  %105 = lshr i32 %90, 8
  %106 = and i32 %105, 63
  %107 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %106
  %108 = load i32, ptr %107, align 4
  %109 = xor i32 %104, %108
  %110 = lshr i32 %90, 16
  %111 = and i32 %100, 63
  %112 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %111
  %113 = load i32, ptr %112, align 4
  %114 = xor i32 %109, %113
  %115 = lshr i32 %88, 24
  %116 = and i32 %115, 63
  %117 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %116
  %118 = load i32, ptr %117, align 4
  %119 = xor i32 %114, %118
  %120 = and i32 %110, 63
  %121 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %120
  %122 = load i32, ptr %121, align 4
  %123 = xor i32 %119, %122
  %124 = lshr i32 %90, 24
  %125 = and i32 %124, 63
  %126 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %125
  %127 = load i32, ptr %126, align 4
  %128 = xor i32 %123, %127
  %129 = add nuw nsw i32 %35, 1
  %130 = icmp eq i32 %129, 8
  br i1 %130, label %131, label %34

131:                                              ; preds = %34
  %132 = tail call i32 @llvm.fshl.i32(i32 %128, i32 %128, i32 31)
  %133 = xor i32 %132, %83
  %134 = and i32 %133, -1431655766
  %135 = xor i32 %134, %83
  %136 = xor i32 %134, %132
  %137 = tail call i32 @llvm.fshl.i32(i32 %135, i32 %135, i32 7) #7
  %138 = xor i32 %137, %136
  %139 = and i32 %138, -16711936
  %140 = xor i32 %139, %137
  %141 = xor i32 %139, %136
  %142 = tail call i32 @llvm.fshl.i32(i32 %137, i32 %140, i32 26)
  %143 = xor i32 %142, %141
  %144 = and i32 %143, -858993460
  %145 = xor i32 %144, %142
  %146 = xor i32 %144, %141
  %147 = tail call i32 @llvm.fshl.i32(i32 %145, i32 %145, i32 14) #7
  %148 = xor i32 %147, %146
  %149 = and i32 %148, -65536
  %150 = xor i32 %149, %147
  %151 = xor i32 %149, %146
  %152 = tail call i32 @llvm.fshl.i32(i32 %147, i32 %150, i32 20)
  %153 = xor i32 %152, %151
  %154 = and i32 %153, -252645136
  %155 = xor i32 %154, %152
  %156 = xor i32 %154, %151
  %157 = tail call i32 @llvm.fshl.i32(i32 %152, i32 %155, i32 28)
  store i32 %156, ptr %1, align 1
  %158 = getelementptr i8, ptr %1, i32 4
  store i32 %157, ptr %158, align 1
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local i32 @des3_ede_expand_key(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) #3 {
  %4 = alloca [6 x i32], align 4
  %5 = icmp eq i32 %2, 24
  br i1 %5, label %6, label %840

6:                                                ; preds = %3
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #7
  call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 4 dereferenceable(24) %4, ptr noundef align 1 dereferenceable(24) %1, i32 24, i1 false) #7
  %7 = load i32, ptr %4, align 4
  %8 = getelementptr inbounds [6 x i32], ptr %4, i32 0, i32 2
  %9 = load i32, ptr %8, align 4
  %10 = getelementptr inbounds [6 x i32], ptr %4, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  %12 = getelementptr inbounds [6 x i32], ptr %4, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = icmp eq i32 %7, %9
  %15 = icmp eq i32 %11, %13
  %16 = and i1 %14, %15
  br i1 %16, label %26, label %17

17:                                               ; preds = %6
  %18 = getelementptr inbounds [6 x i32], ptr %4, i32 0, i32 4
  %19 = load i32, ptr %18, align 4
  %20 = getelementptr inbounds [6 x i32], ptr %4, i32 0, i32 5
  %21 = load i32, ptr %20, align 4
  %22 = icmp eq i32 %9, %19
  %23 = icmp eq i32 %13, %21
  %24 = and i1 %22, %23
  %25 = select i1 %24, i32 -126, i32 0
  br label %26

26:                                               ; preds = %17, %6
  %27 = phi i32 [ -126, %6 ], [ %25, %17 ]
  call void @llvm.memset.p0.i32(ptr noundef nonnull align 4 dereferenceable(24) %4, i8 0, i32 24, i1 false) #7
  call void asm sideeffect "", "r,~{memory}"(ptr nonnull %4) #7, !srcloc !8
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #7
  %28 = call fastcc i32 @des_ekey(ptr noundef %0, ptr noundef %1)
  %29 = getelementptr i32, ptr %0, i32 32
  %30 = getelementptr i8, ptr %1, i32 8
  %31 = getelementptr i8, ptr %1, i32 12
  %32 = load i8, ptr %31, align 1
  %33 = shl i8 %32, 4
  %34 = and i8 %33, -32
  %35 = load i8, ptr %30, align 1
  %36 = and i8 %35, 30
  %37 = or i8 %34, %36
  %38 = zext i8 %37 to i32
  %39 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %38
  %40 = load i8, ptr %39, align 1
  %41 = zext i8 %40 to i32
  %42 = getelementptr i8, ptr %1, i32 13
  %43 = load i8, ptr %42, align 1
  %44 = shl i8 %43, 4
  %45 = and i8 %44, -32
  %46 = getelementptr i8, ptr %1, i32 9
  %47 = load i8, ptr %46, align 1
  %48 = and i8 %47, 30
  %49 = or i8 %45, %48
  %50 = zext i8 %49 to i32
  %51 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %50
  %52 = load i8, ptr %51, align 1
  %53 = zext i8 %52 to i32
  %54 = getelementptr i8, ptr %1, i32 14
  %55 = load i8, ptr %54, align 1
  %56 = shl i8 %55, 4
  %57 = and i8 %56, -32
  %58 = getelementptr i8, ptr %1, i32 10
  %59 = load i8, ptr %58, align 1
  %60 = and i8 %59, 30
  %61 = or i8 %57, %60
  %62 = zext i8 %61 to i32
  %63 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %62
  %64 = load i8, ptr %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr i8, ptr %1, i32 15
  %67 = load i8, ptr %66, align 1
  %68 = shl i8 %67, 4
  %69 = and i8 %68, -32
  %70 = getelementptr i8, ptr %1, i32 11
  %71 = load i8, ptr %70, align 1
  %72 = and i8 %71, 30
  %73 = or i8 %69, %72
  %74 = zext i8 %73 to i32
  %75 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %74
  %76 = load i8, ptr %75, align 1
  %77 = zext i8 %76 to i32
  %78 = shl nuw nsw i32 %41, 1
  %79 = add nuw nsw i32 %78, 3
  %80 = getelementptr i32, ptr @pc2, i32 %79
  %81 = load i32, ptr %80, align 4
  %82 = shl nuw nsw i32 %53, 1
  %83 = add nuw nsw i32 %82, 2
  %84 = getelementptr i32, ptr @pc2, i32 %83
  %85 = load i32, ptr %84, align 4
  %86 = or i32 %85, %81
  %87 = shl nuw nsw i32 %65, 1
  %88 = or i32 %87, 1
  %89 = getelementptr i32, ptr @pc2, i32 %88
  %90 = load i32, ptr %89, align 4
  %91 = or i32 %86, %90
  %92 = shl nuw nsw i32 %77, 1
  %93 = getelementptr i32, ptr @pc2, i32 %92
  %94 = load i32, ptr %93, align 4
  %95 = or i32 %91, %94
  store i32 %95, ptr %29, align 4
  %96 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %41
  %97 = load i8, ptr %96, align 1
  %98 = zext i8 %97 to i32
  %99 = add nuw nsw i32 %82, 3
  %100 = getelementptr i32, ptr @pc2, i32 %99
  %101 = load i32, ptr %100, align 4
  %102 = add nuw nsw i32 %87, 2
  %103 = getelementptr i32, ptr @pc2, i32 %102
  %104 = load i32, ptr %103, align 4
  %105 = or i32 %104, %101
  %106 = or i32 %92, 1
  %107 = getelementptr i32, ptr @pc2, i32 %106
  %108 = load i32, ptr %107, align 4
  %109 = or i32 %105, %108
  %110 = shl nuw nsw i32 %98, 1
  %111 = getelementptr i32, ptr @pc2, i32 %110
  %112 = load i32, ptr %111, align 4
  %113 = or i32 %109, %112
  %114 = getelementptr i32, ptr %0, i32 34
  store i32 %113, ptr %114, align 4
  %115 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %53
  %116 = load i8, ptr %115, align 1
  %117 = zext i8 %116 to i32
  %118 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %65
  %119 = load i8, ptr %118, align 1
  %120 = zext i8 %119 to i32
  %121 = add nuw nsw i32 %92, 3
  %122 = getelementptr i32, ptr @pc2, i32 %121
  %123 = load i32, ptr %122, align 4
  %124 = add nuw nsw i32 %110, 2
  %125 = getelementptr i32, ptr @pc2, i32 %124
  %126 = load i32, ptr %125, align 4
  %127 = or i32 %126, %123
  %128 = shl nuw nsw i32 %117, 1
  %129 = or i32 %128, 1
  %130 = getelementptr i32, ptr @pc2, i32 %129
  %131 = load i32, ptr %130, align 4
  %132 = or i32 %127, %131
  %133 = shl nuw nsw i32 %120, 1
  %134 = getelementptr i32, ptr @pc2, i32 %133
  %135 = load i32, ptr %134, align 4
  %136 = or i32 %132, %135
  %137 = getelementptr i32, ptr %0, i32 36
  store i32 %136, ptr %137, align 4
  %138 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %77
  %139 = load i8, ptr %138, align 1
  %140 = zext i8 %139 to i32
  %141 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %98
  %142 = load i8, ptr %141, align 1
  %143 = zext i8 %142 to i32
  %144 = add nuw nsw i32 %128, 3
  %145 = getelementptr i32, ptr @pc2, i32 %144
  %146 = load i32, ptr %145, align 4
  %147 = add nuw nsw i32 %133, 2
  %148 = getelementptr i32, ptr @pc2, i32 %147
  %149 = load i32, ptr %148, align 4
  %150 = or i32 %149, %146
  %151 = shl nuw nsw i32 %140, 1
  %152 = or i32 %151, 1
  %153 = getelementptr i32, ptr @pc2, i32 %152
  %154 = load i32, ptr %153, align 4
  %155 = or i32 %150, %154
  %156 = shl nuw nsw i32 %143, 1
  %157 = getelementptr i32, ptr @pc2, i32 %156
  %158 = load i32, ptr %157, align 4
  %159 = or i32 %155, %158
  %160 = getelementptr i32, ptr %0, i32 38
  store i32 %159, ptr %160, align 4
  %161 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %117
  %162 = load i8, ptr %161, align 1
  %163 = zext i8 %162 to i32
  %164 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %120
  %165 = load i8, ptr %164, align 1
  %166 = zext i8 %165 to i32
  %167 = add nuw nsw i32 %151, 3
  %168 = getelementptr i32, ptr @pc2, i32 %167
  %169 = load i32, ptr %168, align 4
  %170 = add nuw nsw i32 %156, 2
  %171 = getelementptr i32, ptr @pc2, i32 %170
  %172 = load i32, ptr %171, align 4
  %173 = or i32 %172, %169
  %174 = shl nuw nsw i32 %163, 1
  %175 = or i32 %174, 1
  %176 = getelementptr i32, ptr @pc2, i32 %175
  %177 = load i32, ptr %176, align 4
  %178 = or i32 %173, %177
  %179 = shl nuw nsw i32 %166, 1
  %180 = getelementptr i32, ptr @pc2, i32 %179
  %181 = load i32, ptr %180, align 4
  %182 = or i32 %178, %181
  %183 = getelementptr i32, ptr %0, i32 40
  store i32 %182, ptr %183, align 4
  %184 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %140
  %185 = load i8, ptr %184, align 1
  %186 = zext i8 %185 to i32
  %187 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %143
  %188 = load i8, ptr %187, align 1
  %189 = zext i8 %188 to i32
  %190 = add nuw nsw i32 %174, 3
  %191 = getelementptr i32, ptr @pc2, i32 %190
  %192 = load i32, ptr %191, align 4
  %193 = add nuw nsw i32 %179, 2
  %194 = getelementptr i32, ptr @pc2, i32 %193
  %195 = load i32, ptr %194, align 4
  %196 = or i32 %195, %192
  %197 = shl nuw nsw i32 %186, 1
  %198 = or i32 %197, 1
  %199 = getelementptr i32, ptr @pc2, i32 %198
  %200 = load i32, ptr %199, align 4
  %201 = or i32 %196, %200
  %202 = shl nuw nsw i32 %189, 1
  %203 = getelementptr i32, ptr @pc2, i32 %202
  %204 = load i32, ptr %203, align 4
  %205 = or i32 %201, %204
  %206 = getelementptr i32, ptr %0, i32 42
  store i32 %205, ptr %206, align 4
  %207 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %163
  %208 = load i8, ptr %207, align 1
  %209 = zext i8 %208 to i32
  %210 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %166
  %211 = load i8, ptr %210, align 1
  %212 = zext i8 %211 to i32
  %213 = add nuw nsw i32 %197, 3
  %214 = getelementptr i32, ptr @pc2, i32 %213
  %215 = load i32, ptr %214, align 4
  %216 = add nuw nsw i32 %202, 2
  %217 = getelementptr i32, ptr @pc2, i32 %216
  %218 = load i32, ptr %217, align 4
  %219 = or i32 %218, %215
  %220 = shl nuw nsw i32 %209, 1
  %221 = or i32 %220, 1
  %222 = getelementptr i32, ptr @pc2, i32 %221
  %223 = load i32, ptr %222, align 4
  %224 = or i32 %219, %223
  %225 = shl nuw nsw i32 %212, 1
  %226 = getelementptr i32, ptr @pc2, i32 %225
  %227 = load i32, ptr %226, align 4
  %228 = or i32 %224, %227
  %229 = getelementptr i32, ptr %0, i32 44
  store i32 %228, ptr %229, align 4
  %230 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %186
  %231 = load i8, ptr %230, align 1
  %232 = zext i8 %231 to i32
  %233 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %189
  %234 = load i8, ptr %233, align 1
  %235 = zext i8 %234 to i32
  %236 = add nuw nsw i32 %220, 3
  %237 = getelementptr i32, ptr @pc2, i32 %236
  %238 = load i32, ptr %237, align 4
  %239 = add nuw nsw i32 %225, 2
  %240 = getelementptr i32, ptr @pc2, i32 %239
  %241 = load i32, ptr %240, align 4
  %242 = or i32 %241, %238
  %243 = shl nuw nsw i32 %232, 1
  %244 = or i32 %243, 1
  %245 = getelementptr i32, ptr @pc2, i32 %244
  %246 = load i32, ptr %245, align 4
  %247 = or i32 %242, %246
  %248 = shl nuw nsw i32 %235, 1
  %249 = getelementptr i32, ptr @pc2, i32 %248
  %250 = load i32, ptr %249, align 4
  %251 = or i32 %247, %250
  %252 = getelementptr i32, ptr %0, i32 46
  store i32 %251, ptr %252, align 4
  %253 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %209
  %254 = load i8, ptr %253, align 1
  %255 = zext i8 %254 to i32
  %256 = add nuw nsw i32 %225, 3
  %257 = getelementptr i32, ptr @pc2, i32 %256
  %258 = load i32, ptr %257, align 4
  %259 = add nuw nsw i32 %243, 2
  %260 = getelementptr i32, ptr @pc2, i32 %259
  %261 = load i32, ptr %260, align 4
  %262 = or i32 %261, %258
  %263 = or i32 %248, 1
  %264 = getelementptr i32, ptr @pc2, i32 %263
  %265 = load i32, ptr %264, align 4
  %266 = or i32 %262, %265
  %267 = shl nuw nsw i32 %255, 1
  %268 = getelementptr i32, ptr @pc2, i32 %267
  %269 = load i32, ptr %268, align 4
  %270 = or i32 %266, %269
  %271 = getelementptr i32, ptr %0, i32 48
  store i32 %270, ptr %271, align 4
  %272 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %212
  %273 = load i8, ptr %272, align 1
  %274 = zext i8 %273 to i32
  %275 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %232
  %276 = load i8, ptr %275, align 1
  %277 = zext i8 %276 to i32
  %278 = add nuw nsw i32 %248, 3
  %279 = getelementptr i32, ptr @pc2, i32 %278
  %280 = load i32, ptr %279, align 4
  %281 = add nuw nsw i32 %267, 2
  %282 = getelementptr i32, ptr @pc2, i32 %281
  %283 = load i32, ptr %282, align 4
  %284 = or i32 %283, %280
  %285 = shl nuw nsw i32 %274, 1
  %286 = or i32 %285, 1
  %287 = getelementptr i32, ptr @pc2, i32 %286
  %288 = load i32, ptr %287, align 4
  %289 = or i32 %284, %288
  %290 = shl nuw nsw i32 %277, 1
  %291 = getelementptr i32, ptr @pc2, i32 %290
  %292 = load i32, ptr %291, align 4
  %293 = or i32 %289, %292
  %294 = getelementptr i32, ptr %0, i32 50
  store i32 %293, ptr %294, align 4
  %295 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %235
  %296 = load i8, ptr %295, align 1
  %297 = zext i8 %296 to i32
  %298 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %255
  %299 = load i8, ptr %298, align 1
  %300 = zext i8 %299 to i32
  %301 = add nuw nsw i32 %285, 3
  %302 = getelementptr i32, ptr @pc2, i32 %301
  %303 = load i32, ptr %302, align 4
  %304 = add nuw nsw i32 %290, 2
  %305 = getelementptr i32, ptr @pc2, i32 %304
  %306 = load i32, ptr %305, align 4
  %307 = or i32 %306, %303
  %308 = shl nuw nsw i32 %297, 1
  %309 = or i32 %308, 1
  %310 = getelementptr i32, ptr @pc2, i32 %309
  %311 = load i32, ptr %310, align 4
  %312 = or i32 %307, %311
  %313 = shl nuw nsw i32 %300, 1
  %314 = getelementptr i32, ptr @pc2, i32 %313
  %315 = load i32, ptr %314, align 4
  %316 = or i32 %312, %315
  %317 = getelementptr i32, ptr %0, i32 52
  store i32 %316, ptr %317, align 4
  %318 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %274
  %319 = load i8, ptr %318, align 1
  %320 = zext i8 %319 to i32
  %321 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %277
  %322 = load i8, ptr %321, align 1
  %323 = zext i8 %322 to i32
  %324 = add nuw nsw i32 %308, 3
  %325 = getelementptr i32, ptr @pc2, i32 %324
  %326 = load i32, ptr %325, align 4
  %327 = add nuw nsw i32 %313, 2
  %328 = getelementptr i32, ptr @pc2, i32 %327
  %329 = load i32, ptr %328, align 4
  %330 = or i32 %329, %326
  %331 = shl nuw nsw i32 %320, 1
  %332 = or i32 %331, 1
  %333 = getelementptr i32, ptr @pc2, i32 %332
  %334 = load i32, ptr %333, align 4
  %335 = or i32 %330, %334
  %336 = shl nuw nsw i32 %323, 1
  %337 = getelementptr i32, ptr @pc2, i32 %336
  %338 = load i32, ptr %337, align 4
  %339 = or i32 %335, %338
  %340 = getelementptr i32, ptr %0, i32 54
  store i32 %339, ptr %340, align 4
  %341 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %297
  %342 = load i8, ptr %341, align 1
  %343 = zext i8 %342 to i32
  %344 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %300
  %345 = load i8, ptr %344, align 1
  %346 = zext i8 %345 to i32
  %347 = add nuw nsw i32 %331, 3
  %348 = getelementptr i32, ptr @pc2, i32 %347
  %349 = load i32, ptr %348, align 4
  %350 = add nuw nsw i32 %336, 2
  %351 = getelementptr i32, ptr @pc2, i32 %350
  %352 = load i32, ptr %351, align 4
  %353 = or i32 %352, %349
  %354 = shl nuw nsw i32 %343, 1
  %355 = or i32 %354, 1
  %356 = getelementptr i32, ptr @pc2, i32 %355
  %357 = load i32, ptr %356, align 4
  %358 = or i32 %353, %357
  %359 = shl nuw nsw i32 %346, 1
  %360 = getelementptr i32, ptr @pc2, i32 %359
  %361 = load i32, ptr %360, align 4
  %362 = or i32 %358, %361
  %363 = getelementptr i32, ptr %0, i32 56
  store i32 %362, ptr %363, align 4
  %364 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %320
  %365 = load i8, ptr %364, align 1
  %366 = zext i8 %365 to i32
  %367 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %323
  %368 = load i8, ptr %367, align 1
  %369 = zext i8 %368 to i32
  %370 = add nuw nsw i32 %354, 3
  %371 = getelementptr i32, ptr @pc2, i32 %370
  %372 = load i32, ptr %371, align 4
  %373 = add nuw nsw i32 %359, 2
  %374 = getelementptr i32, ptr @pc2, i32 %373
  %375 = load i32, ptr %374, align 4
  %376 = or i32 %375, %372
  %377 = shl nuw nsw i32 %366, 1
  %378 = or i32 %377, 1
  %379 = getelementptr i32, ptr @pc2, i32 %378
  %380 = load i32, ptr %379, align 4
  %381 = or i32 %376, %380
  %382 = shl nuw nsw i32 %369, 1
  %383 = getelementptr i32, ptr @pc2, i32 %382
  %384 = load i32, ptr %383, align 4
  %385 = or i32 %381, %384
  %386 = getelementptr i32, ptr %0, i32 58
  store i32 %385, ptr %386, align 4
  %387 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %343
  %388 = load i8, ptr %387, align 1
  %389 = zext i8 %388 to i32
  %390 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %346
  %391 = load i8, ptr %390, align 1
  %392 = zext i8 %391 to i32
  %393 = add nuw nsw i32 %377, 3
  %394 = getelementptr i32, ptr @pc2, i32 %393
  %395 = load i32, ptr %394, align 4
  %396 = add nuw nsw i32 %382, 2
  %397 = getelementptr i32, ptr @pc2, i32 %396
  %398 = load i32, ptr %397, align 4
  %399 = or i32 %398, %395
  %400 = shl nuw nsw i32 %389, 1
  %401 = or i32 %400, 1
  %402 = getelementptr i32, ptr @pc2, i32 %401
  %403 = load i32, ptr %402, align 4
  %404 = or i32 %399, %403
  %405 = shl nuw nsw i32 %392, 1
  %406 = getelementptr i32, ptr @pc2, i32 %405
  %407 = load i32, ptr %406, align 4
  %408 = or i32 %404, %407
  %409 = getelementptr i32, ptr %0, i32 60
  store i32 %408, ptr %409, align 4
  %410 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %366
  %411 = load i8, ptr %410, align 1
  %412 = zext i8 %411 to i32
  %413 = add nuw nsw i32 %382, 3
  %414 = getelementptr i32, ptr @pc2, i32 %413
  %415 = load i32, ptr %414, align 4
  %416 = add nuw nsw i32 %400, 2
  %417 = getelementptr i32, ptr @pc2, i32 %416
  %418 = load i32, ptr %417, align 4
  %419 = or i32 %418, %415
  %420 = or i32 %405, 1
  %421 = getelementptr i32, ptr @pc2, i32 %420
  %422 = load i32, ptr %421, align 4
  %423 = or i32 %419, %422
  %424 = shl nuw nsw i32 %412, 1
  %425 = getelementptr i32, ptr @pc2, i32 %424
  %426 = load i32, ptr %425, align 4
  %427 = or i32 %423, %426
  %428 = getelementptr i32, ptr %0, i32 62
  store i32 %427, ptr %428, align 4
  %429 = load i8, ptr %30, align 1
  %430 = lshr i8 %429, 4
  %431 = load i8, ptr %31, align 1
  %432 = and i8 %431, -16
  %433 = or i8 %430, %432
  %434 = or i8 %433, 1
  %435 = zext i8 %434 to i32
  %436 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %435
  %437 = load i8, ptr %436, align 1
  %438 = zext i8 %437 to i32
  %439 = load i8, ptr %46, align 1
  %440 = lshr i8 %439, 4
  %441 = load i8, ptr %42, align 1
  %442 = and i8 %441, -16
  %443 = or i8 %440, %442
  %444 = or i8 %443, 1
  %445 = zext i8 %444 to i32
  %446 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %445
  %447 = load i8, ptr %446, align 1
  %448 = zext i8 %447 to i32
  %449 = load i8, ptr %58, align 1
  %450 = lshr i8 %449, 4
  %451 = load i8, ptr %54, align 1
  %452 = and i8 %451, -16
  %453 = or i8 %450, %452
  %454 = or i8 %453, 1
  %455 = zext i8 %454 to i32
  %456 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %455
  %457 = load i8, ptr %456, align 1
  %458 = zext i8 %457 to i32
  %459 = load i8, ptr %70, align 1
  %460 = lshr i8 %459, 4
  %461 = load i8, ptr %66, align 1
  %462 = and i8 %461, -16
  %463 = or i8 %460, %462
  %464 = or i8 %463, 1
  %465 = zext i8 %464 to i32
  %466 = getelementptr [256 x i8], ptr @pc1, i32 0, i32 %465
  %467 = load i8, ptr %466, align 1
  %468 = zext i8 %467 to i32
  %469 = shl nuw nsw i32 %438, 1
  %470 = add nuw nsw i32 %469, 3
  %471 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %470
  %472 = load i32, ptr %471, align 4
  %473 = shl nuw nsw i32 %448, 1
  %474 = add nuw nsw i32 %473, 2
  %475 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %474
  %476 = load i32, ptr %475, align 4
  %477 = or i32 %476, %472
  %478 = shl nuw nsw i32 %458, 1
  %479 = or i32 %478, 1
  %480 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %479
  %481 = load i32, ptr %480, align 4
  %482 = or i32 %477, %481
  %483 = shl nuw nsw i32 %468, 1
  %484 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %483
  %485 = load i32, ptr %484, align 4
  %486 = or i32 %482, %485
  %487 = getelementptr i32, ptr %0, i32 33
  store i32 %486, ptr %487, align 4
  %488 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %438
  %489 = load i8, ptr %488, align 1
  %490 = zext i8 %489 to i32
  %491 = add nuw nsw i32 %473, 3
  %492 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %491
  %493 = load i32, ptr %492, align 4
  %494 = add nuw nsw i32 %478, 2
  %495 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %494
  %496 = load i32, ptr %495, align 4
  %497 = or i32 %496, %493
  %498 = or i32 %483, 1
  %499 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %498
  %500 = load i32, ptr %499, align 4
  %501 = or i32 %497, %500
  %502 = shl nuw nsw i32 %490, 1
  %503 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %502
  %504 = load i32, ptr %503, align 4
  %505 = or i32 %501, %504
  %506 = getelementptr i32, ptr %0, i32 35
  store i32 %505, ptr %506, align 4
  %507 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %448
  %508 = load i8, ptr %507, align 1
  %509 = zext i8 %508 to i32
  %510 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %458
  %511 = load i8, ptr %510, align 1
  %512 = zext i8 %511 to i32
  %513 = add nuw nsw i32 %483, 3
  %514 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %513
  %515 = load i32, ptr %514, align 4
  %516 = add nuw nsw i32 %502, 2
  %517 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %516
  %518 = load i32, ptr %517, align 4
  %519 = or i32 %518, %515
  %520 = shl nuw nsw i32 %509, 1
  %521 = or i32 %520, 1
  %522 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %521
  %523 = load i32, ptr %522, align 4
  %524 = or i32 %519, %523
  %525 = shl nuw nsw i32 %512, 1
  %526 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %525
  %527 = load i32, ptr %526, align 4
  %528 = or i32 %524, %527
  %529 = getelementptr i32, ptr %0, i32 37
  store i32 %528, ptr %529, align 4
  %530 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %468
  %531 = load i8, ptr %530, align 1
  %532 = zext i8 %531 to i32
  %533 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %490
  %534 = load i8, ptr %533, align 1
  %535 = zext i8 %534 to i32
  %536 = add nuw nsw i32 %520, 3
  %537 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %536
  %538 = load i32, ptr %537, align 4
  %539 = add nuw nsw i32 %525, 2
  %540 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %539
  %541 = load i32, ptr %540, align 4
  %542 = or i32 %541, %538
  %543 = shl nuw nsw i32 %532, 1
  %544 = or i32 %543, 1
  %545 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %544
  %546 = load i32, ptr %545, align 4
  %547 = or i32 %542, %546
  %548 = shl nuw nsw i32 %535, 1
  %549 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %548
  %550 = load i32, ptr %549, align 4
  %551 = or i32 %547, %550
  %552 = getelementptr i32, ptr %0, i32 39
  store i32 %551, ptr %552, align 4
  %553 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %509
  %554 = load i8, ptr %553, align 1
  %555 = zext i8 %554 to i32
  %556 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %512
  %557 = load i8, ptr %556, align 1
  %558 = zext i8 %557 to i32
  %559 = add nuw nsw i32 %543, 3
  %560 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %559
  %561 = load i32, ptr %560, align 4
  %562 = add nuw nsw i32 %548, 2
  %563 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %562
  %564 = load i32, ptr %563, align 4
  %565 = or i32 %564, %561
  %566 = shl nuw nsw i32 %555, 1
  %567 = or i32 %566, 1
  %568 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %567
  %569 = load i32, ptr %568, align 4
  %570 = or i32 %565, %569
  %571 = shl nuw nsw i32 %558, 1
  %572 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %571
  %573 = load i32, ptr %572, align 4
  %574 = or i32 %570, %573
  %575 = getelementptr i32, ptr %0, i32 41
  store i32 %574, ptr %575, align 4
  %576 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %532
  %577 = load i8, ptr %576, align 1
  %578 = zext i8 %577 to i32
  %579 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %535
  %580 = load i8, ptr %579, align 1
  %581 = zext i8 %580 to i32
  %582 = add nuw nsw i32 %566, 3
  %583 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %582
  %584 = load i32, ptr %583, align 4
  %585 = add nuw nsw i32 %571, 2
  %586 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %585
  %587 = load i32, ptr %586, align 4
  %588 = or i32 %587, %584
  %589 = shl nuw nsw i32 %578, 1
  %590 = or i32 %589, 1
  %591 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %590
  %592 = load i32, ptr %591, align 4
  %593 = or i32 %588, %592
  %594 = shl nuw nsw i32 %581, 1
  %595 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %594
  %596 = load i32, ptr %595, align 4
  %597 = or i32 %593, %596
  %598 = getelementptr i32, ptr %0, i32 43
  store i32 %597, ptr %598, align 4
  %599 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %555
  %600 = load i8, ptr %599, align 1
  %601 = zext i8 %600 to i32
  %602 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %558
  %603 = load i8, ptr %602, align 1
  %604 = zext i8 %603 to i32
  %605 = add nuw nsw i32 %589, 3
  %606 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %605
  %607 = load i32, ptr %606, align 4
  %608 = add nuw nsw i32 %594, 2
  %609 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %608
  %610 = load i32, ptr %609, align 4
  %611 = or i32 %610, %607
  %612 = shl nuw nsw i32 %601, 1
  %613 = or i32 %612, 1
  %614 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %613
  %615 = load i32, ptr %614, align 4
  %616 = or i32 %611, %615
  %617 = shl nuw nsw i32 %604, 1
  %618 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %617
  %619 = load i32, ptr %618, align 4
  %620 = or i32 %616, %619
  %621 = getelementptr i32, ptr %0, i32 45
  store i32 %620, ptr %621, align 4
  %622 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %578
  %623 = load i8, ptr %622, align 1
  %624 = zext i8 %623 to i32
  %625 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %581
  %626 = load i8, ptr %625, align 1
  %627 = zext i8 %626 to i32
  %628 = add nuw nsw i32 %612, 3
  %629 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %628
  %630 = load i32, ptr %629, align 4
  %631 = add nuw nsw i32 %617, 2
  %632 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %631
  %633 = load i32, ptr %632, align 4
  %634 = or i32 %633, %630
  %635 = shl nuw nsw i32 %624, 1
  %636 = or i32 %635, 1
  %637 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %636
  %638 = load i32, ptr %637, align 4
  %639 = or i32 %634, %638
  %640 = shl nuw nsw i32 %627, 1
  %641 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %640
  %642 = load i32, ptr %641, align 4
  %643 = or i32 %639, %642
  %644 = getelementptr i32, ptr %0, i32 47
  store i32 %643, ptr %644, align 4
  %645 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %601
  %646 = load i8, ptr %645, align 1
  %647 = zext i8 %646 to i32
  %648 = add nuw nsw i32 %617, 3
  %649 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %648
  %650 = load i32, ptr %649, align 4
  %651 = add nuw nsw i32 %635, 2
  %652 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %651
  %653 = load i32, ptr %652, align 4
  %654 = or i32 %653, %650
  %655 = or i32 %640, 1
  %656 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %655
  %657 = load i32, ptr %656, align 4
  %658 = or i32 %654, %657
  %659 = shl nuw nsw i32 %647, 1
  %660 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %659
  %661 = load i32, ptr %660, align 4
  %662 = or i32 %658, %661
  %663 = getelementptr i32, ptr %0, i32 49
  store i32 %662, ptr %663, align 4
  %664 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %604
  %665 = load i8, ptr %664, align 1
  %666 = zext i8 %665 to i32
  %667 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %624
  %668 = load i8, ptr %667, align 1
  %669 = zext i8 %668 to i32
  %670 = add nuw nsw i32 %640, 3
  %671 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %670
  %672 = load i32, ptr %671, align 4
  %673 = add nuw nsw i32 %659, 2
  %674 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %673
  %675 = load i32, ptr %674, align 4
  %676 = or i32 %675, %672
  %677 = shl nuw nsw i32 %666, 1
  %678 = or i32 %677, 1
  %679 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %678
  %680 = load i32, ptr %679, align 4
  %681 = or i32 %676, %680
  %682 = shl nuw nsw i32 %669, 1
  %683 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %682
  %684 = load i32, ptr %683, align 4
  %685 = or i32 %681, %684
  %686 = getelementptr i32, ptr %0, i32 51
  store i32 %685, ptr %686, align 4
  %687 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %627
  %688 = load i8, ptr %687, align 1
  %689 = zext i8 %688 to i32
  %690 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %647
  %691 = load i8, ptr %690, align 1
  %692 = zext i8 %691 to i32
  %693 = add nuw nsw i32 %677, 3
  %694 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %693
  %695 = load i32, ptr %694, align 4
  %696 = add nuw nsw i32 %682, 2
  %697 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %696
  %698 = load i32, ptr %697, align 4
  %699 = or i32 %698, %695
  %700 = shl nuw nsw i32 %689, 1
  %701 = or i32 %700, 1
  %702 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %701
  %703 = load i32, ptr %702, align 4
  %704 = or i32 %699, %703
  %705 = shl nuw nsw i32 %692, 1
  %706 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %705
  %707 = load i32, ptr %706, align 4
  %708 = or i32 %704, %707
  %709 = getelementptr i32, ptr %0, i32 53
  store i32 %708, ptr %709, align 4
  %710 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %666
  %711 = load i8, ptr %710, align 1
  %712 = zext i8 %711 to i32
  %713 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %669
  %714 = load i8, ptr %713, align 1
  %715 = zext i8 %714 to i32
  %716 = add nuw nsw i32 %700, 3
  %717 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %716
  %718 = load i32, ptr %717, align 4
  %719 = add nuw nsw i32 %705, 2
  %720 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %719
  %721 = load i32, ptr %720, align 4
  %722 = or i32 %721, %718
  %723 = shl nuw nsw i32 %712, 1
  %724 = or i32 %723, 1
  %725 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %724
  %726 = load i32, ptr %725, align 4
  %727 = or i32 %722, %726
  %728 = shl nuw nsw i32 %715, 1
  %729 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %728
  %730 = load i32, ptr %729, align 4
  %731 = or i32 %727, %730
  %732 = getelementptr i32, ptr %0, i32 55
  store i32 %731, ptr %732, align 4
  %733 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %689
  %734 = load i8, ptr %733, align 1
  %735 = zext i8 %734 to i32
  %736 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %692
  %737 = load i8, ptr %736, align 1
  %738 = zext i8 %737 to i32
  %739 = add nuw nsw i32 %723, 3
  %740 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %739
  %741 = load i32, ptr %740, align 4
  %742 = add nuw nsw i32 %728, 2
  %743 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %742
  %744 = load i32, ptr %743, align 4
  %745 = or i32 %744, %741
  %746 = shl nuw nsw i32 %735, 1
  %747 = or i32 %746, 1
  %748 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %747
  %749 = load i32, ptr %748, align 4
  %750 = or i32 %745, %749
  %751 = shl nuw nsw i32 %738, 1
  %752 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %751
  %753 = load i32, ptr %752, align 4
  %754 = or i32 %750, %753
  %755 = getelementptr i32, ptr %0, i32 57
  store i32 %754, ptr %755, align 4
  %756 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %712
  %757 = load i8, ptr %756, align 1
  %758 = zext i8 %757 to i32
  %759 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %715
  %760 = load i8, ptr %759, align 1
  %761 = zext i8 %760 to i32
  %762 = add nuw nsw i32 %746, 3
  %763 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %762
  %764 = load i32, ptr %763, align 4
  %765 = add nuw nsw i32 %751, 2
  %766 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %765
  %767 = load i32, ptr %766, align 4
  %768 = or i32 %767, %764
  %769 = shl nuw nsw i32 %758, 1
  %770 = or i32 %769, 1
  %771 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %770
  %772 = load i32, ptr %771, align 4
  %773 = or i32 %768, %772
  %774 = shl nuw nsw i32 %761, 1
  %775 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %774
  %776 = load i32, ptr %775, align 4
  %777 = or i32 %773, %776
  %778 = getelementptr i32, ptr %0, i32 59
  store i32 %777, ptr %778, align 4
  %779 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %735
  %780 = load i8, ptr %779, align 1
  %781 = zext i8 %780 to i32
  %782 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %738
  %783 = load i8, ptr %782, align 1
  %784 = zext i8 %783 to i32
  %785 = add nuw nsw i32 %769, 3
  %786 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %785
  %787 = load i32, ptr %786, align 4
  %788 = add nuw nsw i32 %774, 2
  %789 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %788
  %790 = load i32, ptr %789, align 4
  %791 = or i32 %790, %787
  %792 = shl nuw nsw i32 %781, 1
  %793 = or i32 %792, 1
  %794 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %793
  %795 = load i32, ptr %794, align 4
  %796 = or i32 %791, %795
  %797 = shl nuw nsw i32 %784, 1
  %798 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %797
  %799 = load i32, ptr %798, align 4
  %800 = or i32 %796, %799
  %801 = getelementptr i32, ptr %0, i32 61
  store i32 %800, ptr %801, align 4
  %802 = getelementptr [256 x i8], ptr @rs, i32 0, i32 %758
  %803 = load i8, ptr %802, align 1
  %804 = zext i8 %803 to i32
  %805 = add nuw nsw i32 %774, 3
  %806 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %805
  %807 = load i32, ptr %806, align 4
  %808 = add nuw nsw i32 %792, 2
  %809 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %808
  %810 = load i32, ptr %809, align 4
  %811 = or i32 %810, %807
  %812 = or i32 %797, 1
  %813 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %812
  %814 = load i32, ptr %813, align 4
  %815 = or i32 %811, %814
  %816 = shl nuw nsw i32 %804, 1
  %817 = getelementptr i32, ptr getelementptr inbounds ([1024 x i32], ptr @pc2, i32 0, i32 512), i32 %816
  %818 = load i32, ptr %817, align 4
  %819 = or i32 %815, %818
  %820 = getelementptr i32, ptr %0, i32 63
  store i32 %819, ptr %820, align 4
  br label %821

821:                                              ; preds = %821, %26
  %822 = phi i32 [ 0, %26 ], [ %834, %821 ]
  %823 = shl nuw nsw i32 %822, 1
  %824 = getelementptr i32, ptr %29, i32 %823
  %825 = load i32, ptr %824, align 4
  %826 = or i32 %823, 1
  %827 = getelementptr i32, ptr %29, i32 %826
  %828 = load i32, ptr %827, align 4
  %829 = xor i32 %828, %825
  %830 = and i32 %829, -65536
  %831 = xor i32 %830, %825
  %832 = xor i32 %830, %828
  %833 = call i32 @llvm.fshl.i32(i32 %828, i32 %832, i32 18) #7
  store i32 %831, ptr %824, align 4
  store i32 %833, ptr %827, align 4
  %834 = add nuw nsw i32 %822, 1
  %835 = icmp eq i32 %834, 16
  br i1 %835, label %836, label %821

836:                                              ; preds = %821
  %837 = getelementptr i32, ptr %0, i32 64
  %838 = getelementptr i8, ptr %1, i32 16
  %839 = call fastcc i32 @des_ekey(ptr noundef %837, ptr noundef %838)
  br label %840

840:                                              ; preds = %836, %3
  %841 = phi i32 [ %27, %836 ], [ -22, %3 ]
  ret i32 %841
}

; Function Attrs: nofree nosync nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @des3_ede_encrypt(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2) #1 {
  %4 = load i32, ptr %2, align 1
  %5 = getelementptr i8, ptr %2, i32 4
  %6 = load i32, ptr %5, align 1
  %7 = tail call i32 @llvm.fshl.i32(i32 %6, i32 %6, i32 4) #7
  %8 = xor i32 %7, %4
  %9 = and i32 %8, -252645136
  %10 = xor i32 %9, %7
  %11 = xor i32 %9, %4
  %12 = tail call i32 @llvm.fshl.i32(i32 %10, i32 %10, i32 12) #7
  %13 = xor i32 %12, %11
  %14 = and i32 %13, -65536
  %15 = xor i32 %14, %12
  %16 = xor i32 %14, %11
  %17 = tail call i32 @llvm.fshl.i32(i32 %12, i32 %15, i32 18)
  %18 = xor i32 %17, %16
  %19 = and i32 %18, -858993460
  %20 = xor i32 %19, %17
  %21 = xor i32 %19, %16
  %22 = tail call i32 @llvm.fshl.i32(i32 %20, i32 %20, i32 6) #7
  %23 = xor i32 %22, %21
  %24 = and i32 %23, -16711936
  %25 = xor i32 %24, %22
  %26 = xor i32 %24, %21
  %27 = tail call i32 @llvm.fshl.i32(i32 %22, i32 %25, i32 25)
  %28 = xor i32 %27, %26
  %29 = and i32 %28, -1431655766
  %30 = xor i32 %29, %27
  %31 = xor i32 %29, %26
  %32 = tail call i32 @llvm.fshl.i32(i32 %31, i32 %31, i32 1) #7
  br label %33

33:                                               ; preds = %33, %3
  %34 = phi i32 [ 0, %3 ], [ %128, %33 ]
  %35 = phi i32 [ %30, %3 ], [ %127, %33 ]
  %36 = phi i32 [ %32, %3 ], [ %82, %33 ]
  %37 = phi ptr [ %0, %3 ], [ %86, %33 ]
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr i32, ptr %37, i32 1
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr i32, ptr %37, i32 2
  %42 = xor i32 %38, %35
  %43 = xor i32 %40, %35
  %44 = tail call i32 @llvm.fshl.i32(i32 %43, i32 %43, i32 28)
  %45 = and i32 %42, 63
  %46 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %45
  %47 = load i32, ptr %46, align 4
  %48 = xor i32 %47, %36
  %49 = lshr i32 %42, 8
  %50 = and i32 %49, 63
  %51 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %50
  %52 = load i32, ptr %51, align 4
  %53 = xor i32 %48, %52
  %54 = lshr i32 %42, 16
  %55 = and i32 %44, 63
  %56 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %55
  %57 = load i32, ptr %56, align 4
  %58 = xor i32 %53, %57
  %59 = lshr i32 %44, 8
  %60 = and i32 %59, 63
  %61 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %60
  %62 = load i32, ptr %61, align 4
  %63 = xor i32 %58, %62
  %64 = lshr i32 %44, 16
  %65 = and i32 %54, 63
  %66 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %65
  %67 = load i32, ptr %66, align 4
  %68 = xor i32 %63, %67
  %69 = lshr i32 %42, 24
  %70 = and i32 %69, 63
  %71 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %70
  %72 = load i32, ptr %71, align 4
  %73 = xor i32 %68, %72
  %74 = and i32 %64, 63
  %75 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %74
  %76 = load i32, ptr %75, align 4
  %77 = xor i32 %73, %76
  %78 = lshr i32 %44, 24
  %79 = and i32 %78, 63
  %80 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %79
  %81 = load i32, ptr %80, align 4
  %82 = xor i32 %77, %81
  %83 = load i32, ptr %41, align 4
  %84 = getelementptr i32, ptr %37, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = getelementptr i32, ptr %37, i32 4
  %87 = xor i32 %83, %82
  %88 = xor i32 %85, %82
  %89 = tail call i32 @llvm.fshl.i32(i32 %88, i32 %88, i32 28)
  %90 = and i32 %87, 63
  %91 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %90
  %92 = load i32, ptr %91, align 4
  %93 = xor i32 %92, %35
  %94 = lshr i32 %87, 8
  %95 = and i32 %94, 63
  %96 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %95
  %97 = load i32, ptr %96, align 4
  %98 = xor i32 %93, %97
  %99 = lshr i32 %87, 16
  %100 = and i32 %89, 63
  %101 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %100
  %102 = load i32, ptr %101, align 4
  %103 = xor i32 %98, %102
  %104 = lshr i32 %89, 8
  %105 = and i32 %104, 63
  %106 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %105
  %107 = load i32, ptr %106, align 4
  %108 = xor i32 %103, %107
  %109 = lshr i32 %89, 16
  %110 = and i32 %99, 63
  %111 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %110
  %112 = load i32, ptr %111, align 4
  %113 = xor i32 %108, %112
  %114 = lshr i32 %87, 24
  %115 = and i32 %114, 63
  %116 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %115
  %117 = load i32, ptr %116, align 4
  %118 = xor i32 %113, %117
  %119 = and i32 %109, 63
  %120 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %119
  %121 = load i32, ptr %120, align 4
  %122 = xor i32 %118, %121
  %123 = lshr i32 %89, 24
  %124 = and i32 %123, 63
  %125 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %124
  %126 = load i32, ptr %125, align 4
  %127 = xor i32 %122, %126
  %128 = add nuw nsw i32 %34, 1
  %129 = icmp eq i32 %128, 8
  br i1 %129, label %130, label %33

130:                                              ; preds = %33
  %131 = getelementptr i8, ptr %0, i32 128
  br label %132

132:                                              ; preds = %132, %130
  %133 = phi i32 [ %227, %132 ], [ 0, %130 ]
  %134 = phi i32 [ %181, %132 ], [ %127, %130 ]
  %135 = phi i32 [ %226, %132 ], [ %82, %130 ]
  %136 = phi ptr [ %185, %132 ], [ %131, %130 ]
  %137 = load i32, ptr %136, align 4
  %138 = getelementptr i32, ptr %136, i32 1
  %139 = load i32, ptr %138, align 4
  %140 = getelementptr i32, ptr %136, i32 2
  %141 = xor i32 %137, %135
  %142 = xor i32 %139, %135
  %143 = tail call i32 @llvm.fshl.i32(i32 %142, i32 %142, i32 28)
  %144 = and i32 %141, 63
  %145 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %144
  %146 = load i32, ptr %145, align 4
  %147 = xor i32 %146, %134
  %148 = lshr i32 %141, 8
  %149 = and i32 %148, 63
  %150 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %149
  %151 = load i32, ptr %150, align 4
  %152 = xor i32 %147, %151
  %153 = lshr i32 %141, 16
  %154 = and i32 %143, 63
  %155 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %154
  %156 = load i32, ptr %155, align 4
  %157 = xor i32 %152, %156
  %158 = lshr i32 %143, 8
  %159 = and i32 %158, 63
  %160 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %159
  %161 = load i32, ptr %160, align 4
  %162 = xor i32 %157, %161
  %163 = lshr i32 %143, 16
  %164 = and i32 %153, 63
  %165 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %164
  %166 = load i32, ptr %165, align 4
  %167 = xor i32 %162, %166
  %168 = lshr i32 %141, 24
  %169 = and i32 %168, 63
  %170 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %169
  %171 = load i32, ptr %170, align 4
  %172 = xor i32 %167, %171
  %173 = and i32 %163, 63
  %174 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %173
  %175 = load i32, ptr %174, align 4
  %176 = xor i32 %172, %175
  %177 = lshr i32 %143, 24
  %178 = and i32 %177, 63
  %179 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %178
  %180 = load i32, ptr %179, align 4
  %181 = xor i32 %176, %180
  %182 = load i32, ptr %140, align 4
  %183 = getelementptr i32, ptr %136, i32 3
  %184 = load i32, ptr %183, align 4
  %185 = getelementptr i32, ptr %136, i32 4
  %186 = xor i32 %182, %181
  %187 = xor i32 %184, %181
  %188 = tail call i32 @llvm.fshl.i32(i32 %187, i32 %187, i32 28)
  %189 = and i32 %186, 63
  %190 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %189
  %191 = load i32, ptr %190, align 4
  %192 = xor i32 %191, %135
  %193 = lshr i32 %186, 8
  %194 = and i32 %193, 63
  %195 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %194
  %196 = load i32, ptr %195, align 4
  %197 = xor i32 %192, %196
  %198 = lshr i32 %186, 16
  %199 = and i32 %188, 63
  %200 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %199
  %201 = load i32, ptr %200, align 4
  %202 = xor i32 %197, %201
  %203 = lshr i32 %188, 8
  %204 = and i32 %203, 63
  %205 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %204
  %206 = load i32, ptr %205, align 4
  %207 = xor i32 %202, %206
  %208 = lshr i32 %188, 16
  %209 = and i32 %198, 63
  %210 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %209
  %211 = load i32, ptr %210, align 4
  %212 = xor i32 %207, %211
  %213 = lshr i32 %186, 24
  %214 = and i32 %213, 63
  %215 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %214
  %216 = load i32, ptr %215, align 4
  %217 = xor i32 %212, %216
  %218 = and i32 %208, 63
  %219 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %218
  %220 = load i32, ptr %219, align 4
  %221 = xor i32 %217, %220
  %222 = lshr i32 %188, 24
  %223 = and i32 %222, 63
  %224 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %223
  %225 = load i32, ptr %224, align 4
  %226 = xor i32 %221, %225
  %227 = add nuw nsw i32 %133, 1
  %228 = icmp eq i32 %227, 8
  br i1 %228, label %229, label %132

229:                                              ; preds = %132
  %230 = getelementptr i8, ptr %0, i32 256
  br label %231

231:                                              ; preds = %231, %229
  %232 = phi i32 [ %326, %231 ], [ 0, %229 ]
  %233 = phi i32 [ %325, %231 ], [ %181, %229 ]
  %234 = phi i32 [ %280, %231 ], [ %226, %229 ]
  %235 = phi ptr [ %284, %231 ], [ %230, %229 ]
  %236 = load i32, ptr %235, align 4
  %237 = getelementptr i32, ptr %235, i32 1
  %238 = load i32, ptr %237, align 4
  %239 = getelementptr i32, ptr %235, i32 2
  %240 = xor i32 %236, %233
  %241 = xor i32 %238, %233
  %242 = tail call i32 @llvm.fshl.i32(i32 %241, i32 %241, i32 28)
  %243 = and i32 %240, 63
  %244 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %243
  %245 = load i32, ptr %244, align 4
  %246 = xor i32 %245, %234
  %247 = lshr i32 %240, 8
  %248 = and i32 %247, 63
  %249 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %248
  %250 = load i32, ptr %249, align 4
  %251 = xor i32 %246, %250
  %252 = lshr i32 %240, 16
  %253 = and i32 %242, 63
  %254 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %253
  %255 = load i32, ptr %254, align 4
  %256 = xor i32 %251, %255
  %257 = lshr i32 %242, 8
  %258 = and i32 %257, 63
  %259 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %258
  %260 = load i32, ptr %259, align 4
  %261 = xor i32 %256, %260
  %262 = lshr i32 %242, 16
  %263 = and i32 %252, 63
  %264 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %263
  %265 = load i32, ptr %264, align 4
  %266 = xor i32 %261, %265
  %267 = lshr i32 %240, 24
  %268 = and i32 %267, 63
  %269 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %268
  %270 = load i32, ptr %269, align 4
  %271 = xor i32 %266, %270
  %272 = and i32 %262, 63
  %273 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %272
  %274 = load i32, ptr %273, align 4
  %275 = xor i32 %271, %274
  %276 = lshr i32 %242, 24
  %277 = and i32 %276, 63
  %278 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %277
  %279 = load i32, ptr %278, align 4
  %280 = xor i32 %275, %279
  %281 = load i32, ptr %239, align 4
  %282 = getelementptr i32, ptr %235, i32 3
  %283 = load i32, ptr %282, align 4
  %284 = getelementptr i32, ptr %235, i32 4
  %285 = xor i32 %281, %280
  %286 = xor i32 %283, %280
  %287 = tail call i32 @llvm.fshl.i32(i32 %286, i32 %286, i32 28)
  %288 = and i32 %285, 63
  %289 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %288
  %290 = load i32, ptr %289, align 4
  %291 = xor i32 %290, %233
  %292 = lshr i32 %285, 8
  %293 = and i32 %292, 63
  %294 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %293
  %295 = load i32, ptr %294, align 4
  %296 = xor i32 %291, %295
  %297 = lshr i32 %285, 16
  %298 = and i32 %287, 63
  %299 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %298
  %300 = load i32, ptr %299, align 4
  %301 = xor i32 %296, %300
  %302 = lshr i32 %287, 8
  %303 = and i32 %302, 63
  %304 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %303
  %305 = load i32, ptr %304, align 4
  %306 = xor i32 %301, %305
  %307 = lshr i32 %287, 16
  %308 = and i32 %297, 63
  %309 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %308
  %310 = load i32, ptr %309, align 4
  %311 = xor i32 %306, %310
  %312 = lshr i32 %285, 24
  %313 = and i32 %312, 63
  %314 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %313
  %315 = load i32, ptr %314, align 4
  %316 = xor i32 %311, %315
  %317 = and i32 %307, 63
  %318 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %317
  %319 = load i32, ptr %318, align 4
  %320 = xor i32 %316, %319
  %321 = lshr i32 %287, 24
  %322 = and i32 %321, 63
  %323 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %322
  %324 = load i32, ptr %323, align 4
  %325 = xor i32 %320, %324
  %326 = add nuw nsw i32 %232, 1
  %327 = icmp eq i32 %326, 8
  br i1 %327, label %328, label %231

328:                                              ; preds = %231
  %329 = tail call i32 @llvm.fshl.i32(i32 %325, i32 %325, i32 31)
  %330 = xor i32 %329, %280
  %331 = and i32 %330, -1431655766
  %332 = xor i32 %331, %280
  %333 = xor i32 %331, %329
  %334 = tail call i32 @llvm.fshl.i32(i32 %332, i32 %332, i32 7) #7
  %335 = xor i32 %334, %333
  %336 = and i32 %335, -16711936
  %337 = xor i32 %336, %334
  %338 = xor i32 %336, %333
  %339 = tail call i32 @llvm.fshl.i32(i32 %334, i32 %337, i32 26)
  %340 = xor i32 %339, %338
  %341 = and i32 %340, -858993460
  %342 = xor i32 %341, %339
  %343 = xor i32 %341, %338
  %344 = tail call i32 @llvm.fshl.i32(i32 %342, i32 %342, i32 14) #7
  %345 = xor i32 %344, %343
  %346 = and i32 %345, -65536
  %347 = xor i32 %346, %344
  %348 = xor i32 %346, %343
  %349 = tail call i32 @llvm.fshl.i32(i32 %344, i32 %347, i32 20)
  %350 = xor i32 %349, %348
  %351 = and i32 %350, -252645136
  %352 = xor i32 %351, %349
  %353 = xor i32 %351, %348
  %354 = tail call i32 @llvm.fshl.i32(i32 %349, i32 %352, i32 28)
  store i32 %353, ptr %1, align 1
  %355 = getelementptr i8, ptr %1, i32 4
  store i32 %354, ptr %355, align 1
  ret void
}

; Function Attrs: nofree nosync nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @des3_ede_decrypt(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2) #1 {
  %4 = getelementptr i32, ptr %0, i32 94
  %5 = load i32, ptr %2, align 1
  %6 = getelementptr i8, ptr %2, i32 4
  %7 = load i32, ptr %6, align 1
  %8 = tail call i32 @llvm.fshl.i32(i32 %7, i32 %7, i32 4) #7
  %9 = xor i32 %8, %5
  %10 = and i32 %9, -252645136
  %11 = xor i32 %10, %8
  %12 = xor i32 %10, %5
  %13 = tail call i32 @llvm.fshl.i32(i32 %11, i32 %11, i32 12) #7
  %14 = xor i32 %13, %12
  %15 = and i32 %14, -65536
  %16 = xor i32 %15, %13
  %17 = xor i32 %15, %12
  %18 = tail call i32 @llvm.fshl.i32(i32 %13, i32 %16, i32 18)
  %19 = xor i32 %18, %17
  %20 = and i32 %19, -858993460
  %21 = xor i32 %20, %18
  %22 = xor i32 %20, %17
  %23 = tail call i32 @llvm.fshl.i32(i32 %21, i32 %21, i32 6) #7
  %24 = xor i32 %23, %22
  %25 = and i32 %24, -16711936
  %26 = xor i32 %25, %23
  %27 = xor i32 %25, %22
  %28 = tail call i32 @llvm.fshl.i32(i32 %23, i32 %26, i32 25)
  %29 = xor i32 %28, %27
  %30 = and i32 %29, -1431655766
  %31 = xor i32 %30, %28
  %32 = xor i32 %30, %27
  %33 = tail call i32 @llvm.fshl.i32(i32 %32, i32 %32, i32 1) #7
  br label %34

34:                                               ; preds = %34, %3
  %35 = phi i32 [ 0, %3 ], [ %129, %34 ]
  %36 = phi i32 [ %31, %3 ], [ %128, %34 ]
  %37 = phi i32 [ %33, %3 ], [ %83, %34 ]
  %38 = phi ptr [ %4, %3 ], [ %87, %34 ]
  %39 = load i32, ptr %38, align 4
  %40 = getelementptr i32, ptr %38, i32 1
  %41 = load i32, ptr %40, align 4
  %42 = getelementptr i32, ptr %38, i32 -2
  %43 = xor i32 %39, %36
  %44 = xor i32 %41, %36
  %45 = tail call i32 @llvm.fshl.i32(i32 %44, i32 %44, i32 28)
  %46 = and i32 %43, 63
  %47 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %46
  %48 = load i32, ptr %47, align 4
  %49 = xor i32 %48, %37
  %50 = lshr i32 %43, 8
  %51 = and i32 %50, 63
  %52 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %51
  %53 = load i32, ptr %52, align 4
  %54 = xor i32 %49, %53
  %55 = lshr i32 %43, 16
  %56 = and i32 %45, 63
  %57 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %56
  %58 = load i32, ptr %57, align 4
  %59 = xor i32 %54, %58
  %60 = lshr i32 %45, 8
  %61 = and i32 %60, 63
  %62 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %61
  %63 = load i32, ptr %62, align 4
  %64 = xor i32 %59, %63
  %65 = lshr i32 %45, 16
  %66 = and i32 %55, 63
  %67 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %66
  %68 = load i32, ptr %67, align 4
  %69 = xor i32 %64, %68
  %70 = lshr i32 %43, 24
  %71 = and i32 %70, 63
  %72 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %71
  %73 = load i32, ptr %72, align 4
  %74 = xor i32 %69, %73
  %75 = and i32 %65, 63
  %76 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %75
  %77 = load i32, ptr %76, align 4
  %78 = xor i32 %74, %77
  %79 = lshr i32 %45, 24
  %80 = and i32 %79, 63
  %81 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %80
  %82 = load i32, ptr %81, align 4
  %83 = xor i32 %78, %82
  %84 = load i32, ptr %42, align 4
  %85 = getelementptr i32, ptr %38, i32 -1
  %86 = load i32, ptr %85, align 4
  %87 = getelementptr i32, ptr %38, i32 -4
  %88 = xor i32 %84, %83
  %89 = xor i32 %86, %83
  %90 = tail call i32 @llvm.fshl.i32(i32 %89, i32 %89, i32 28)
  %91 = and i32 %88, 63
  %92 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %91
  %93 = load i32, ptr %92, align 4
  %94 = xor i32 %93, %36
  %95 = lshr i32 %88, 8
  %96 = and i32 %95, 63
  %97 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %96
  %98 = load i32, ptr %97, align 4
  %99 = xor i32 %94, %98
  %100 = lshr i32 %88, 16
  %101 = and i32 %90, 63
  %102 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %101
  %103 = load i32, ptr %102, align 4
  %104 = xor i32 %99, %103
  %105 = lshr i32 %90, 8
  %106 = and i32 %105, 63
  %107 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %106
  %108 = load i32, ptr %107, align 4
  %109 = xor i32 %104, %108
  %110 = lshr i32 %90, 16
  %111 = and i32 %100, 63
  %112 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %111
  %113 = load i32, ptr %112, align 4
  %114 = xor i32 %109, %113
  %115 = lshr i32 %88, 24
  %116 = and i32 %115, 63
  %117 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %116
  %118 = load i32, ptr %117, align 4
  %119 = xor i32 %114, %118
  %120 = and i32 %110, 63
  %121 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %120
  %122 = load i32, ptr %121, align 4
  %123 = xor i32 %119, %122
  %124 = lshr i32 %90, 24
  %125 = and i32 %124, 63
  %126 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %125
  %127 = load i32, ptr %126, align 4
  %128 = xor i32 %123, %127
  %129 = add nuw nsw i32 %35, 1
  %130 = icmp eq i32 %129, 8
  br i1 %130, label %131, label %34

131:                                              ; preds = %34
  %132 = getelementptr i8, ptr %0, i32 248
  br label %133

133:                                              ; preds = %133, %131
  %134 = phi i32 [ %228, %133 ], [ 0, %131 ]
  %135 = phi i32 [ %182, %133 ], [ %128, %131 ]
  %136 = phi i32 [ %227, %133 ], [ %83, %131 ]
  %137 = phi ptr [ %186, %133 ], [ %132, %131 ]
  %138 = load i32, ptr %137, align 4
  %139 = getelementptr i32, ptr %137, i32 1
  %140 = load i32, ptr %139, align 4
  %141 = getelementptr i32, ptr %137, i32 -2
  %142 = xor i32 %138, %136
  %143 = xor i32 %140, %136
  %144 = tail call i32 @llvm.fshl.i32(i32 %143, i32 %143, i32 28)
  %145 = and i32 %142, 63
  %146 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %145
  %147 = load i32, ptr %146, align 4
  %148 = xor i32 %147, %135
  %149 = lshr i32 %142, 8
  %150 = and i32 %149, 63
  %151 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %150
  %152 = load i32, ptr %151, align 4
  %153 = xor i32 %148, %152
  %154 = lshr i32 %142, 16
  %155 = and i32 %144, 63
  %156 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %155
  %157 = load i32, ptr %156, align 4
  %158 = xor i32 %153, %157
  %159 = lshr i32 %144, 8
  %160 = and i32 %159, 63
  %161 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %160
  %162 = load i32, ptr %161, align 4
  %163 = xor i32 %158, %162
  %164 = lshr i32 %144, 16
  %165 = and i32 %154, 63
  %166 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %165
  %167 = load i32, ptr %166, align 4
  %168 = xor i32 %163, %167
  %169 = lshr i32 %142, 24
  %170 = and i32 %169, 63
  %171 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %170
  %172 = load i32, ptr %171, align 4
  %173 = xor i32 %168, %172
  %174 = and i32 %164, 63
  %175 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %174
  %176 = load i32, ptr %175, align 4
  %177 = xor i32 %173, %176
  %178 = lshr i32 %144, 24
  %179 = and i32 %178, 63
  %180 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %179
  %181 = load i32, ptr %180, align 4
  %182 = xor i32 %177, %181
  %183 = load i32, ptr %141, align 4
  %184 = getelementptr i32, ptr %137, i32 -1
  %185 = load i32, ptr %184, align 4
  %186 = getelementptr i32, ptr %137, i32 -4
  %187 = xor i32 %183, %182
  %188 = xor i32 %185, %182
  %189 = tail call i32 @llvm.fshl.i32(i32 %188, i32 %188, i32 28)
  %190 = and i32 %187, 63
  %191 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %190
  %192 = load i32, ptr %191, align 4
  %193 = xor i32 %192, %136
  %194 = lshr i32 %187, 8
  %195 = and i32 %194, 63
  %196 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %195
  %197 = load i32, ptr %196, align 4
  %198 = xor i32 %193, %197
  %199 = lshr i32 %187, 16
  %200 = and i32 %189, 63
  %201 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %200
  %202 = load i32, ptr %201, align 4
  %203 = xor i32 %198, %202
  %204 = lshr i32 %189, 8
  %205 = and i32 %204, 63
  %206 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %205
  %207 = load i32, ptr %206, align 4
  %208 = xor i32 %203, %207
  %209 = lshr i32 %189, 16
  %210 = and i32 %199, 63
  %211 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %210
  %212 = load i32, ptr %211, align 4
  %213 = xor i32 %208, %212
  %214 = lshr i32 %187, 24
  %215 = and i32 %214, 63
  %216 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %215
  %217 = load i32, ptr %216, align 4
  %218 = xor i32 %213, %217
  %219 = and i32 %209, 63
  %220 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %219
  %221 = load i32, ptr %220, align 4
  %222 = xor i32 %218, %221
  %223 = lshr i32 %189, 24
  %224 = and i32 %223, 63
  %225 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %224
  %226 = load i32, ptr %225, align 4
  %227 = xor i32 %222, %226
  %228 = add nuw nsw i32 %134, 1
  %229 = icmp eq i32 %228, 8
  br i1 %229, label %230, label %133

230:                                              ; preds = %133
  %231 = getelementptr i8, ptr %0, i32 120
  br label %232

232:                                              ; preds = %232, %230
  %233 = phi i32 [ %327, %232 ], [ 0, %230 ]
  %234 = phi i32 [ %326, %232 ], [ %182, %230 ]
  %235 = phi i32 [ %281, %232 ], [ %227, %230 ]
  %236 = phi ptr [ %285, %232 ], [ %231, %230 ]
  %237 = load i32, ptr %236, align 4
  %238 = getelementptr i32, ptr %236, i32 1
  %239 = load i32, ptr %238, align 4
  %240 = getelementptr i32, ptr %236, i32 -2
  %241 = xor i32 %237, %234
  %242 = xor i32 %239, %234
  %243 = tail call i32 @llvm.fshl.i32(i32 %242, i32 %242, i32 28)
  %244 = and i32 %241, 63
  %245 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %244
  %246 = load i32, ptr %245, align 4
  %247 = xor i32 %246, %235
  %248 = lshr i32 %241, 8
  %249 = and i32 %248, 63
  %250 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %249
  %251 = load i32, ptr %250, align 4
  %252 = xor i32 %247, %251
  %253 = lshr i32 %241, 16
  %254 = and i32 %243, 63
  %255 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %254
  %256 = load i32, ptr %255, align 4
  %257 = xor i32 %252, %256
  %258 = lshr i32 %243, 8
  %259 = and i32 %258, 63
  %260 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %259
  %261 = load i32, ptr %260, align 4
  %262 = xor i32 %257, %261
  %263 = lshr i32 %243, 16
  %264 = and i32 %253, 63
  %265 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %264
  %266 = load i32, ptr %265, align 4
  %267 = xor i32 %262, %266
  %268 = lshr i32 %241, 24
  %269 = and i32 %268, 63
  %270 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %269
  %271 = load i32, ptr %270, align 4
  %272 = xor i32 %267, %271
  %273 = and i32 %263, 63
  %274 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %273
  %275 = load i32, ptr %274, align 4
  %276 = xor i32 %272, %275
  %277 = lshr i32 %243, 24
  %278 = and i32 %277, 63
  %279 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %278
  %280 = load i32, ptr %279, align 4
  %281 = xor i32 %276, %280
  %282 = load i32, ptr %240, align 4
  %283 = getelementptr i32, ptr %236, i32 -1
  %284 = load i32, ptr %283, align 4
  %285 = getelementptr i32, ptr %236, i32 -4
  %286 = xor i32 %282, %281
  %287 = xor i32 %284, %281
  %288 = tail call i32 @llvm.fshl.i32(i32 %287, i32 %287, i32 28)
  %289 = and i32 %286, 63
  %290 = getelementptr [64 x i32], ptr @S8, i32 0, i32 %289
  %291 = load i32, ptr %290, align 4
  %292 = xor i32 %291, %234
  %293 = lshr i32 %286, 8
  %294 = and i32 %293, 63
  %295 = getelementptr [64 x i32], ptr @S6, i32 0, i32 %294
  %296 = load i32, ptr %295, align 4
  %297 = xor i32 %292, %296
  %298 = lshr i32 %286, 16
  %299 = and i32 %288, 63
  %300 = getelementptr [64 x i32], ptr @S7, i32 0, i32 %299
  %301 = load i32, ptr %300, align 4
  %302 = xor i32 %297, %301
  %303 = lshr i32 %288, 8
  %304 = and i32 %303, 63
  %305 = getelementptr [64 x i32], ptr @S5, i32 0, i32 %304
  %306 = load i32, ptr %305, align 4
  %307 = xor i32 %302, %306
  %308 = lshr i32 %288, 16
  %309 = and i32 %298, 63
  %310 = getelementptr [64 x i32], ptr @S4, i32 0, i32 %309
  %311 = load i32, ptr %310, align 4
  %312 = xor i32 %307, %311
  %313 = lshr i32 %286, 24
  %314 = and i32 %313, 63
  %315 = getelementptr [64 x i32], ptr @S2, i32 0, i32 %314
  %316 = load i32, ptr %315, align 4
  %317 = xor i32 %312, %316
  %318 = and i32 %308, 63
  %319 = getelementptr [64 x i32], ptr @S3, i32 0, i32 %318
  %320 = load i32, ptr %319, align 4
  %321 = xor i32 %317, %320
  %322 = lshr i32 %288, 24
  %323 = and i32 %322, 63
  %324 = getelementptr [64 x i32], ptr @S1, i32 0, i32 %323
  %325 = load i32, ptr %324, align 4
  %326 = xor i32 %321, %325
  %327 = add nuw nsw i32 %233, 1
  %328 = icmp eq i32 %327, 8
  br i1 %328, label %329, label %232

329:                                              ; preds = %232
  %330 = tail call i32 @llvm.fshl.i32(i32 %326, i32 %326, i32 31)
  %331 = xor i32 %330, %281
  %332 = and i32 %331, -1431655766
  %333 = xor i32 %332, %281
  %334 = xor i32 %332, %330
  %335 = tail call i32 @llvm.fshl.i32(i32 %333, i32 %333, i32 7) #7
  %336 = xor i32 %335, %334
  %337 = and i32 %336, -16711936
  %338 = xor i32 %337, %335
  %339 = xor i32 %337, %334
  %340 = tail call i32 @llvm.fshl.i32(i32 %335, i32 %338, i32 26)
  %341 = xor i32 %340, %339
  %342 = and i32 %341, -858993460
  %343 = xor i32 %342, %340
  %344 = xor i32 %342, %339
  %345 = tail call i32 @llvm.fshl.i32(i32 %343, i32 %343, i32 14) #7
  %346 = xor i32 %345, %344
  %347 = and i32 %346, -65536
  %348 = xor i32 %347, %345
  %349 = xor i32 %347, %344
  %350 = tail call i32 @llvm.fshl.i32(i32 %345, i32 %348, i32 20)
  %351 = xor i32 %350, %349
  %352 = and i32 %351, -252645136
  %353 = xor i32 %352, %350
  %354 = xor i32 %352, %349
  %355 = tail call i32 @llvm.fshl.i32(i32 %350, i32 %353, i32 28)
  store i32 %354, ptr %1, align 1
  %356 = getelementptr i8, ptr %1, i32 4
  store i32 %355, ptr %356, align 1
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #4

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #5

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32, i32) #6

attributes #0 = { argmemonly nofree nosync nounwind null_pointer_is_valid sspstrong uwtable(sync) "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+armv7-a,+dsp,+read-tp-hard,+soft-float,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #1 = { nofree nosync nounwind null_pointer_is_valid sspstrong uwtable(sync) "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+armv7-a,+dsp,+read-tp-hard,+soft-float,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { nounwind null_pointer_is_valid sspstrong uwtable(sync) "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+armv7-a,+dsp,+read-tp-hard,+soft-float,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #4 = { argmemonly nofree nounwind willreturn writeonly }
attributes #5 = { argmemonly nofree nounwind willreturn }
attributes #6 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6}
!llvm.ident = !{!7}

!0 = !{i32 1, !"wchar_size", i32 2}
!1 = !{i32 1, !"min_enum_size", i32 4}
!2 = !{i32 8, !"branch-target-enforcement", i32 0}
!3 = !{i32 8, !"sign-return-address", i32 0}
!4 = !{i32 8, !"sign-return-address-all", i32 0}
!5 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{!"clang version 15.0.0 (/llk/llvm-project-main/clang 126a1f78513fb688819156df98cf7ea83b5e8c18)"}
!8 = !{i64 2148942319}
