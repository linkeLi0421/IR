; ModuleID = '/llk/IR/scripts/dtc/flattree.c_pt.bc'
source_filename = "../scripts/dtc/flattree.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.version_info = type { i32, i32, i32, i32 }
%struct.emitter = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.data = type { i32, ptr, ptr }
%struct.fdt_header = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.dt_info = type { i32, ptr, i32, ptr, ptr }
%struct.reserve_info = type { i64, i64, ptr, ptr }
%struct.__va_list_tag = type { i32, i32, ptr, ptr }
%struct.node = type { i8, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32, ptr, ptr, ptr, i8, i8 }
%struct.property = type { i8, ptr, %struct.data, ptr, ptr, ptr }
%struct.label = type { i8, ptr, ptr }
%struct.inbuf = type { ptr, ptr, ptr }
%struct.marker = type { i32, i32, ptr, ptr }

@version_table = internal global [5 x %struct.version_info] [%struct.version_info { i32 1, i32 1, i32 28, i32 7 }, %struct.version_info { i32 2, i32 1, i32 32, i32 15 }, %struct.version_info { i32 3, i32 1, i32 36, i32 31 }, %struct.version_info { i32 16, i32 16, i32 36, i32 88 }, %struct.version_info { i32 17, i32 16, i32 40, i32 120 }], align 16
@.str = private unnamed_addr constant [37 x i8] c"Unknown device tree blob version %d\0A\00", align 1
@bin_emitter = internal global %struct.emitter { ptr @bin_emit_cell, ptr @bin_emit_string, ptr @bin_emit_align, ptr @bin_emit_data, ptr @bin_emit_beginnode, ptr @bin_emit_endnode, ptr @bin_emit_property }, align 8
@minsize = external local_unnamed_addr global i32, align 4
@quiet = external local_unnamed_addr global i32, align 4
@stderr = external local_unnamed_addr global ptr, align 8
@.str.1 = private unnamed_addr constant [42 x i8] c"Warning: blob size %u >= minimum size %d\0A\00", align 1
@padsize = external local_unnamed_addr global i32, align 4
@alignsize = external local_unnamed_addr global i32, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c"Error writing device tree blob: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"Short write on device tree blob\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"dt\00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c"/* autogenerated by dtc, do not edit */\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"blob_start\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"header\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"\09/* magic */\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"\09/* totalsize */\0A\00", align 1
@.str.10 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_blob_abs_end - _%s_blob_start) >> 24) & 0xff\0A\00", align 1
@.str.11 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_blob_abs_end - _%s_blob_start) >> 16) & 0xff\0A\00", align 1
@.str.12 = private unnamed_addr constant [58 x i8] c"\09.byte\09((_%s_blob_abs_end - _%s_blob_start) >> 8) & 0xff\0A\00", align 1
@.str.13 = private unnamed_addr constant [51 x i8] c"\09.byte\09(_%s_blob_abs_end - _%s_blob_start) & 0xff\0A\00", align 1
@.str.14 = private unnamed_addr constant [22 x i8] c"\09/* off_dt_struct */\0A\00", align 1
@.str.15 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_struct_start - _%s_blob_start) >> 24) & 0xff\0A\00", align 1
@.str.16 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_struct_start - _%s_blob_start) >> 16) & 0xff\0A\00", align 1
@.str.17 = private unnamed_addr constant [58 x i8] c"\09.byte\09((_%s_struct_start - _%s_blob_start) >> 8) & 0xff\0A\00", align 1
@.str.18 = private unnamed_addr constant [51 x i8] c"\09.byte\09(_%s_struct_start - _%s_blob_start) & 0xff\0A\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"\09/* off_dt_strings */\0A\00", align 1
@.str.20 = private unnamed_addr constant [60 x i8] c"\09.byte\09((_%s_strings_start - _%s_blob_start) >> 24) & 0xff\0A\00", align 1
@.str.21 = private unnamed_addr constant [60 x i8] c"\09.byte\09((_%s_strings_start - _%s_blob_start) >> 16) & 0xff\0A\00", align 1
@.str.22 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_strings_start - _%s_blob_start) >> 8) & 0xff\0A\00", align 1
@.str.23 = private unnamed_addr constant [52 x i8] c"\09.byte\09(_%s_strings_start - _%s_blob_start) & 0xff\0A\00", align 1
@.str.24 = private unnamed_addr constant [23 x i8] c"\09/* off_mem_rsvmap */\0A\00", align 1
@.str.25 = private unnamed_addr constant [58 x i8] c"\09.byte\09((_%s_reserve_map - _%s_blob_start) >> 24) & 0xff\0A\00", align 1
@.str.26 = private unnamed_addr constant [58 x i8] c"\09.byte\09((_%s_reserve_map - _%s_blob_start) >> 16) & 0xff\0A\00", align 1
@.str.27 = private unnamed_addr constant [57 x i8] c"\09.byte\09((_%s_reserve_map - _%s_blob_start) >> 8) & 0xff\0A\00", align 1
@.str.28 = private unnamed_addr constant [50 x i8] c"\09.byte\09(_%s_reserve_map - _%s_blob_start) & 0xff\0A\00", align 1
@.str.29 = private unnamed_addr constant [16 x i8] c"\09/* version */\0A\00", align 1
@.str.30 = private unnamed_addr constant [26 x i8] c"\09/* last_comp_version */\0A\00", align 1
@.str.31 = private unnamed_addr constant [24 x i8] c"\09/* boot_cpuid_phys */\0A\00", align 1
@.str.32 = private unnamed_addr constant [24 x i8] c"\09/* size_dt_strings */\0A\00", align 1
@.str.33 = private unnamed_addr constant [61 x i8] c"\09.byte\09((_%s_strings_end - _%s_strings_start) >> 24) & 0xff\0A\00", align 1
@.str.34 = private unnamed_addr constant [61 x i8] c"\09.byte\09((_%s_strings_end - _%s_strings_start) >> 16) & 0xff\0A\00", align 1
@.str.35 = private unnamed_addr constant [60 x i8] c"\09.byte\09((_%s_strings_end - _%s_strings_start) >> 8) & 0xff\0A\00", align 1
@.str.36 = private unnamed_addr constant [53 x i8] c"\09.byte\09(_%s_strings_end - _%s_strings_start) & 0xff\0A\00", align 1
@.str.37 = private unnamed_addr constant [23 x i8] c"\09/* size_dt_struct */\0A\00", align 1
@.str.38 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_struct_end - _%s_struct_start) >> 24) & 0xff\0A\00", align 1
@.str.39 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_struct_end - _%s_struct_start) >> 16) & 0xff\0A\00", align 1
@.str.40 = private unnamed_addr constant [58 x i8] c"\09.byte\09((_%s_struct_end - _%s_struct_start) >> 8) & 0xff\0A\00", align 1
@.str.41 = private unnamed_addr constant [51 x i8] c"\09.byte\09(_%s_struct_end - _%s_struct_start) & 0xff\0A\00", align 1
@.str.42 = private unnamed_addr constant [12 x i8] c"reserve_map\00", align 1
@.str.43 = private unnamed_addr constant [43 x i8] c"/* Memory reserve map from source file */\0A\00", align 1
@.str.44 = private unnamed_addr constant [12 x i8] c"\09.globl\09%s\0A\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"%s:\0A\00", align 1
@.str.46 = private unnamed_addr constant [32 x i8] c"\09.byte\09((0x%08x) >> 24) & 0xff\0A\00", align 1
@.str.47 = private unnamed_addr constant [32 x i8] c"\09.byte\09((0x%08x) >> 16) & 0xff\0A\00", align 1
@.str.48 = private unnamed_addr constant [31 x i8] c"\09.byte\09((0x%08x) >> 8) & 0xff\0A\00", align 1
@.str.49 = private unnamed_addr constant [24 x i8] c"\09.byte\09(0x%08x) & 0xff\0A\00", align 1
@reservenum = external local_unnamed_addr global i32, align 4
@.str.50 = private unnamed_addr constant [25 x i8] c"\09.long\090, 0\0A\09.long\090, 0\0A\00", align 1
@.str.51 = private unnamed_addr constant [13 x i8] c"struct_start\00", align 1
@asm_emitter = internal global %struct.emitter { ptr @asm_emit_cell, ptr @asm_emit_string, ptr @asm_emit_align, ptr @asm_emit_data, ptr @asm_emit_beginnode, ptr @asm_emit_endnode, ptr @asm_emit_property }, align 8
@.str.52 = private unnamed_addr constant [16 x i8] c"\09/* FDT_END */\0A\00", align 1
@.str.53 = private unnamed_addr constant [11 x i8] c"struct_end\00", align 1
@.str.54 = private unnamed_addr constant [14 x i8] c"strings_start\00", align 1
@.str.55 = private unnamed_addr constant [12 x i8] c"strings_end\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c"blob_end\00", align 1
@.str.57 = private unnamed_addr constant [49 x i8] c"\09.space\09%d - (_%s_blob_end - _%s_blob_start), 0\0A\00", align 1
@.str.58 = private unnamed_addr constant [15 x i8] c"\09.space\09%d, 0\0A\00", align 1
@.str.59 = private unnamed_addr constant [13 x i8] c"blob_abs_end\00", align 1
@.str.60 = private unnamed_addr constant [40 x i8] c"Error reading DT blob magic number: %s\0A\00", align 1
@.str.61 = private unnamed_addr constant [34 x i8] c"EOF reading DT blob magic number\0A\00", align 1
@.str.62 = private unnamed_addr constant [44 x i8] c"Mysterious short read reading magic number\0A\00", align 1
@.str.63 = private unnamed_addr constant [33 x i8] c"Blob has incorrect magic number\0A\00", align 1
@.str.64 = private unnamed_addr constant [32 x i8] c"Error reading DT blob size: %s\0A\00", align 1
@.str.65 = private unnamed_addr constant [26 x i8] c"EOF reading DT blob size\0A\00", align 1
@.str.66 = private unnamed_addr constant [41 x i8] c"Mysterious short read reading blob size\0A\00", align 1
@.str.67 = private unnamed_addr constant [32 x i8] c"DT blob size (%d) is too small\0A\00", align 1
@.str.68 = private unnamed_addr constant [40 x i8] c"EOF before reading %d bytes of DT blob\0A\00", align 1
@.str.69 = private unnamed_addr constant [27 x i8] c"Error reading DT blob: %s\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Mem Reserve structure offset exceeds total size\0A\00", align 1
@.str.71 = private unnamed_addr constant [40 x i8] c"DT structure offset exceeds total size\0A\00", align 1
@.str.72 = private unnamed_addr constant [40 x i8] c"String table offset exceeds total size\0A\00", align 1
@.str.73 = private unnamed_addr constant [38 x i8] c"String table extends past total size\0A\00", align 1
@.str.74 = private unnamed_addr constant [41 x i8] c"Structure block extends past total size\0A\00", align 1
@.str.75 = private unnamed_addr constant [73 x i8] c"Device tree blob doesn't begin with FDT_BEGIN_NODE (begins with 0x%08x)\0A\00", align 1
@.str.76 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.77 = private unnamed_addr constant [43 x i8] c"Device tree blob doesn't end with FDT_END\0A\00", align 1
@.str.78 = private unnamed_addr constant [14 x i8] c"FATAL ERROR: \00", align 1
@.str.79 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.80 = private unnamed_addr constant [15 x i8] c"\09.globl\09%s_%s\0A\00", align 1
@.str.81 = private unnamed_addr constant [8 x i8] c"%s_%s:\0A\00", align 1
@.str.82 = private unnamed_addr constant [9 x i8] c"_%s_%s:\0A\00", align 1
@.str.83 = private unnamed_addr constant [57 x i8] c"\09.byte\090x%02x\0A\09.byte\090x%02x\0A\09.byte\090x%02x\0A\09.byte\090x%02x\0A\00", align 1
@.str.84 = private unnamed_addr constant [16 x i8] c"\09.balign\09%d, 0\0A\00", align 1
@.str.85 = private unnamed_addr constant [16 x i8] c"\09.asciz\09\22%.*s\22\0A\00", align 1
@.str.86 = private unnamed_addr constant [14 x i8] c"\09.asciz\09\22%s\22\0A\00", align 1
@.str.87 = private unnamed_addr constant [15 x i8] c"\09.byte\090x%hhx\0A\00", align 1
@.str.89 = private unnamed_addr constant [26 x i8] c"../scripts/dtc/flattree.c\00", align 1
@.str.90 = private unnamed_addr constant [13 x i8] c"%s\09= . + %d\0A\00", align 1
@.str.91 = private unnamed_addr constant [23 x i8] c"\09/* FDT_BEGIN_NODE */\0A\00", align 1
@.str.92 = private unnamed_addr constant [21 x i8] c"\09/* FDT_END_NODE */\0A\00", align 1
@.str.93 = private unnamed_addr constant [16 x i8] c"\09.globl\09%s_end\0A\00", align 1
@.str.94 = private unnamed_addr constant [9 x i8] c"%s_end:\0A\00", align 1
@.str.95 = private unnamed_addr constant [17 x i8] c"\09/* FDT_PROP */\0A\00", align 1
@.str.96 = private unnamed_addr constant [14 x i8] c"\09.asciz \22%s\22\0A\00", align 1
@.str.97 = private unnamed_addr constant [17 x i8] c"malloc() failed\0A\00", align 1
@.str.98 = private unnamed_addr constant [48 x i8] c"Premature end of data parsing flat device tree\0A\00", align 1
@.str.99 = private unnamed_addr constant [44 x i8] c"((inb->ptr - inb->base) % sizeof(val)) == 0\00", align 1
@__PRETTY_FUNCTION__.flat_read_word = private unnamed_addr constant [40 x i8] c"uint32_t flat_read_word(struct inbuf *)\00", align 1
@.str.100 = private unnamed_addr constant [61 x i8] c"Warning: Flat tree input has subnodes preceding a property.\0A\00", align 1
@.str.101 = private unnamed_addr constant [39 x i8] c"Premature FDT_END in device tree blob\0A\00", align 1
@.str.102 = private unnamed_addr constant [49 x i8] c"Warning: NOP tag found in flat tree version <16\0A\00", align 1
@.str.103 = private unnamed_addr constant [46 x i8] c"Invalid opcode word %08x in device tree blob\0A\00", align 1
@.str.104 = private unnamed_addr constant [43 x i8] c"Path \22%s\22 is not valid as a child of \22%s\22\0A\00", align 1
@.str.105 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.106 = private unnamed_addr constant [40 x i8] c"String offset %d overruns string table\0A\00", align 1

; Function Attrs: nounwind uwtable
define dso_local void @dt_to_blob(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #0 {
  %4 = alloca %struct.data, align 8
  %5 = alloca %struct.data, align 8
  %6 = alloca %struct.data, align 8
  %7 = alloca %struct.data, align 8
  %8 = alloca %struct.data, align 8
  %9 = alloca %struct.data, align 8
  %10 = alloca %struct.data, align 8
  %11 = alloca %struct.fdt_header, align 4
  %12 = alloca %struct.data, align 8
  %13 = alloca %struct.data, align 8
  %14 = alloca %struct.data, align 8
  %15 = alloca %struct.data, align 8
  %16 = alloca %struct.data, align 8
  %17 = alloca %struct.data, align 8
  %18 = alloca %struct.data, align 8
  %19 = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %7) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %7, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %8) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %8, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %9) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %9, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %10, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %11) #18
  %20 = load i32, ptr @version_table, align 16, !tbaa !5
  %21 = icmp eq i32 %20, %2
  %22 = select i1 %21, ptr @version_table, ptr null
  %23 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 1), align 16, !tbaa !5
  %24 = icmp eq i32 %23, %2
  %25 = select i1 %24, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 1), ptr %22
  %26 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 2), align 16, !tbaa !5
  %27 = icmp eq i32 %26, %2
  %28 = select i1 %27, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 2), ptr %25
  %29 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 3), align 16, !tbaa !5
  %30 = icmp eq i32 %29, %2
  %31 = select i1 %30, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 3), ptr %28
  %32 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 4), align 16, !tbaa !5
  %33 = icmp eq i32 %32, %2
  %34 = select i1 %33, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 4), ptr %31
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %37

36:                                               ; preds = %3
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str, i32 noundef %2) #19
  unreachable

37:                                               ; preds = %3
  %38 = getelementptr inbounds %struct.dt_info, ptr %1, i64 0, i32 3
  %39 = load ptr, ptr %38, align 8, !tbaa !10
  call fastcc void @flatten_tree(ptr noundef %39, ptr noundef nonnull @bin_emitter, ptr noundef nonnull %9, ptr noundef nonnull %10, ptr noundef nonnull %34)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #18
  call void @data_append_cell(ptr nonnull sret(%struct.data) align 8 %6, ptr noundef nonnull byval(%struct.data) align 8 %9, i32 noundef 9) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %9, ptr noundef nonnull align 8 dereferenceable(24) %6, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %12) #18
  %40 = getelementptr inbounds %struct.dt_info, ptr %1, i64 0, i32 1
  %41 = load ptr, ptr %40, align 8, !tbaa !16
  call void @llvm.experimental.noalias.scope.decl(metadata !17)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %12, i8 0, i64 24, i1 false) #18, !alias.scope !17
  %42 = icmp eq ptr %41, null
  br i1 %42, label %43, label %46

43:                                               ; preds = %46, %37
  %44 = load i32, ptr @reservenum, align 4, !tbaa !14
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %59, label %54

46:                                               ; preds = %46, %37
  %47 = phi ptr [ %52, %46 ], [ %41, %37 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #18, !noalias !17
  %48 = load i64, ptr %47, align 8, !tbaa !20
  %49 = getelementptr inbounds %struct.reserve_info, ptr %47, i64 0, i32 1
  %50 = load i64, ptr %49, align 8, !tbaa !23
  call void @data_append_re(ptr nonnull sret(%struct.data) align 8 %4, ptr noundef nonnull byval(%struct.data) align 8 %12, i64 noundef %48, i64 noundef %50) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %12, ptr noundef nonnull align 8 dereferenceable(24) %4, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #18, !noalias !17
  %51 = getelementptr inbounds %struct.reserve_info, ptr %47, i64 0, i32 2
  %52 = load ptr, ptr %51, align 8, !tbaa !24
  %53 = icmp eq ptr %52, null
  br i1 %53, label %43, label %46

54:                                               ; preds = %54, %43
  %55 = phi i32 [ %56, %54 ], [ 0, %43 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #18, !noalias !17
  call void @data_append_re(ptr nonnull sret(%struct.data) align 8 %5, ptr noundef nonnull byval(%struct.data) align 8 %12, i64 noundef 0, i64 noundef 0) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %12, ptr noundef nonnull align 8 dereferenceable(24) %5, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #18, !noalias !17
  %56 = add nuw i32 %55, 1
  %57 = load i32, ptr @reservenum, align 4, !tbaa !14
  %58 = icmp ult i32 %56, %57
  br i1 %58, label %54, label %59

59:                                               ; preds = %54, %43
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %8, ptr noundef nonnull align 8 dereferenceable(24) %12, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %12) #18
  %60 = load i32, ptr %8, align 8, !tbaa !25
  %61 = load i32, ptr %9, align 8, !tbaa !25
  %62 = load i32, ptr %10, align 8, !tbaa !25
  %63 = getelementptr inbounds %struct.dt_info, ptr %1, i64 0, i32 2
  %64 = load i32, ptr %63, align 8, !tbaa !27
  %65 = add i32 %60, 16
  %66 = getelementptr inbounds i8, ptr %11, i64 4
  %67 = getelementptr inbounds i8, ptr %11, i64 28
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(40) %67, i8 -1, i64 12, i1 false) #18
  store i32 -302117424, ptr %11, align 4, !tbaa !28
  %68 = load i32, ptr %34, align 16, !tbaa !5
  %69 = call i32 @llvm.bswap.i32(i32 %68) #18
  %70 = getelementptr inbounds %struct.fdt_header, ptr %11, i64 0, i32 5
  store i32 %69, ptr %70, align 4, !tbaa !30
  %71 = getelementptr inbounds %struct.version_info, ptr %34, i64 0, i32 1
  %72 = load i32, ptr %71, align 4, !tbaa !31
  %73 = call i32 @llvm.bswap.i32(i32 %72) #18
  %74 = getelementptr inbounds %struct.fdt_header, ptr %11, i64 0, i32 6
  store i32 %73, ptr %74, align 4, !tbaa !32
  %75 = getelementptr inbounds %struct.version_info, ptr %34, i64 0, i32 2
  %76 = load i32, ptr %75, align 4, !tbaa !33
  %77 = add nsw i32 %76, 7
  %78 = and i32 %77, -8
  %79 = call i32 @llvm.bswap.i32(i32 %78) #18
  %80 = getelementptr inbounds %struct.fdt_header, ptr %11, i64 0, i32 4
  store i32 %79, ptr %80, align 4, !tbaa !34
  %81 = add nsw i32 %65, %78
  %82 = call i32 @llvm.bswap.i32(i32 %81) #18
  %83 = getelementptr inbounds %struct.fdt_header, ptr %11, i64 0, i32 2
  store i32 %82, ptr %83, align 4, !tbaa !35
  %84 = add nsw i32 %81, %61
  %85 = call i32 @llvm.bswap.i32(i32 %84) #18
  %86 = getelementptr inbounds %struct.fdt_header, ptr %11, i64 0, i32 3
  store i32 %85, ptr %86, align 4, !tbaa !36
  %87 = add nsw i32 %84, %62
  %88 = call i32 @llvm.bswap.i32(i32 %87) #18
  store i32 %88, ptr %66, align 4, !tbaa !37
  %89 = getelementptr inbounds %struct.version_info, ptr %34, i64 0, i32 3
  %90 = load i32, ptr %89, align 4, !tbaa !38
  %91 = and i32 %90, 8
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %59
  %94 = call i32 @llvm.bswap.i32(i32 %64) #18
  %95 = getelementptr inbounds %struct.fdt_header, ptr %11, i64 0, i32 7
  store i32 %94, ptr %95, align 4, !tbaa !39
  br label %96

96:                                               ; preds = %93, %59
  %97 = and i32 %90, 16
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %102, label %99

99:                                               ; preds = %96
  %100 = call i32 @llvm.bswap.i32(i32 %62) #18
  %101 = getelementptr inbounds %struct.fdt_header, ptr %11, i64 0, i32 8
  store i32 %100, ptr %101, align 4, !tbaa !40
  br label %102

102:                                              ; preds = %99, %96
  %103 = and i32 %90, 32
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %108, label %105

105:                                              ; preds = %102
  %106 = call i32 @llvm.bswap.i32(i32 %61) #18
  %107 = getelementptr inbounds %struct.fdt_header, ptr %11, i64 0, i32 9
  store i32 %106, ptr %107, align 4, !tbaa !41
  br label %108

108:                                              ; preds = %105, %102
  %109 = load i32, ptr @minsize, align 4, !tbaa !14
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %111, label %120

111:                                              ; preds = %108
  %112 = sub i32 %109, %87
  %113 = icmp slt i32 %112, 0
  br i1 %113, label %114, label %120

114:                                              ; preds = %111
  %115 = load i32, ptr @quiet, align 4, !tbaa !14
  %116 = icmp slt i32 %115, 1
  br i1 %116, label %117, label %120

117:                                              ; preds = %114
  %118 = load ptr, ptr @stderr, align 8, !tbaa !15
  %119 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %118, ptr noundef nonnull @.str.1, i32 noundef %87, i32 noundef %109) #20
  br label %120

120:                                              ; preds = %117, %114, %111, %108
  %121 = phi i32 [ 0, %117 ], [ 0, %114 ], [ %112, %111 ], [ 0, %108 ]
  %122 = load i32, ptr @padsize, align 4, !tbaa !14
  %123 = icmp sgt i32 %122, 0
  %124 = select i1 %123, i32 %122, i32 %121
  %125 = load i32, ptr @alignsize, align 4, !tbaa !14
  %126 = icmp sgt i32 %125, 0
  br i1 %126, label %127, label %136

127:                                              ; preds = %120
  %128 = load i32, ptr %66, align 4, !tbaa !37
  %129 = call i32 @llvm.bswap.i32(i32 %128) #18
  %130 = add nsw i32 %125, -1
  %131 = add nuw i32 %130, %124
  %132 = add i32 %131, %129
  %133 = sub nsw i32 0, %125
  %134 = and i32 %132, %133
  %135 = sub i32 %134, %129
  br label %136

136:                                              ; preds = %127, %120
  %137 = phi i32 [ %135, %127 ], [ %124, %120 ]
  %138 = icmp sgt i32 %137, 0
  br i1 %138, label %139, label %144

139:                                              ; preds = %136
  %140 = load i32, ptr %66, align 4, !tbaa !37
  %141 = call i32 @llvm.bswap.i32(i32 %140) #18
  %142 = add nsw i32 %141, %137
  %143 = call i32 @llvm.bswap.i32(i32 %142) #18
  store i32 %143, ptr %66, align 4, !tbaa !37
  br label %144

144:                                              ; preds = %139, %136
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %13) #18
  %145 = load i32, ptr %75, align 4, !tbaa !33
  call void @data_append_data(ptr nonnull sret(%struct.data) align 8 %13, ptr noundef nonnull byval(%struct.data) align 8 %7, ptr noundef nonnull %11, i32 noundef %145) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %7, ptr noundef nonnull align 8 dereferenceable(24) %13, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %13) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %14) #18
  call void @data_append_align(ptr nonnull sret(%struct.data) align 8 %14, ptr noundef nonnull byval(%struct.data) align 8 %7, i32 noundef 8) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %7, ptr noundef nonnull align 8 dereferenceable(24) %14, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %14) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %15) #18
  call void @data_merge(ptr nonnull sret(%struct.data) align 8 %15, ptr noundef nonnull byval(%struct.data) align 8 %7, ptr noundef nonnull byval(%struct.data) align 8 %8) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %7, ptr noundef nonnull align 8 dereferenceable(24) %15, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %15) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %16) #18
  call void @data_append_zeroes(ptr nonnull sret(%struct.data) align 8 %16, ptr noundef nonnull byval(%struct.data) align 8 %7, i32 noundef 16) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %7, ptr noundef nonnull align 8 dereferenceable(24) %16, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %16) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %17) #18
  call void @data_merge(ptr nonnull sret(%struct.data) align 8 %17, ptr noundef nonnull byval(%struct.data) align 8 %7, ptr noundef nonnull byval(%struct.data) align 8 %9) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %7, ptr noundef nonnull align 8 dereferenceable(24) %17, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %17) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %18) #18
  call void @data_merge(ptr nonnull sret(%struct.data) align 8 %18, ptr noundef nonnull byval(%struct.data) align 8 %7, ptr noundef nonnull byval(%struct.data) align 8 %10) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %7, ptr noundef nonnull align 8 dereferenceable(24) %18, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %18) #18
  br i1 %138, label %146, label %147

146:                                              ; preds = %144
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %19) #18
  call void @data_append_zeroes(ptr nonnull sret(%struct.data) align 8 %19, ptr noundef nonnull byval(%struct.data) align 8 %7, i32 noundef %137) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %7, ptr noundef nonnull align 8 dereferenceable(24) %19, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %19) #18
  br label %147

147:                                              ; preds = %146, %144
  %148 = getelementptr inbounds %struct.data, ptr %7, i64 0, i32 1
  %149 = load ptr, ptr %148, align 8, !tbaa !42
  %150 = load i32, ptr %7, align 8, !tbaa !25
  %151 = zext i32 %150 to i64
  %152 = call i64 @fwrite(ptr noundef %149, i64 noundef %151, i64 noundef 1, ptr noundef %0)
  %153 = icmp eq i64 %152, 1
  br i1 %153, label %162, label %154

154:                                              ; preds = %147
  %155 = call i32 @ferror(ptr noundef %0) #18
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %161, label %157

157:                                              ; preds = %154
  %158 = tail call ptr @__errno_location() #21
  %159 = load i32, ptr %158, align 4, !tbaa !14
  %160 = call ptr @strerror(i32 noundef %159) #18
  call void (ptr, ...) @die(ptr noundef nonnull @.str.2, ptr noundef %160) #19
  unreachable

161:                                              ; preds = %154
  call void (ptr, ...) @die(ptr noundef nonnull @.str.3) #19
  unreachable

162:                                              ; preds = %147
  call void @data_free(ptr noundef nonnull byval(%struct.data) align 8 %7) #18
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %11) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %10) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %9) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %8) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %7) #18
  ret void
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: inlinehint noreturn nounwind uwtable
define internal void @die(ptr nocapture noundef readonly %0, ...) unnamed_addr #3 {
  %2 = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #18
  call void @llvm.va_start(ptr nonnull %2)
  %3 = load ptr, ptr @stderr, align 8, !tbaa !15
  %4 = call i64 @fwrite(ptr nonnull @.str.78, i64 13, i64 1, ptr %3) #20
  %5 = load ptr, ptr @stderr, align 8, !tbaa !15
  %6 = call i32 @vfprintf(ptr noundef %5, ptr noundef %0, ptr noundef nonnull %2) #20
  call void @llvm.va_end(ptr nonnull %2)
  call void @exit(i32 noundef 1) #22
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc void @flatten_tree(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr noundef %3, ptr nocapture noundef readonly %4) unnamed_addr #0 {
  %6 = alloca %struct.data, align 8
  %7 = alloca %struct.data, align 8
  %8 = load i8, ptr %0, align 8, !tbaa !43, !range !46
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %154

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.emitter, ptr %1, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !47
  %13 = getelementptr inbounds %struct.node, ptr %0, i64 0, i32 11
  %14 = load ptr, ptr %13, align 8, !tbaa !49
  tail call void %12(ptr noundef %2, ptr noundef %14) #18
  %15 = getelementptr inbounds %struct.version_info, ptr %4, i64 0, i32 3
  %16 = load i32, ptr %15, align 4, !tbaa !38
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %struct.emitter, ptr %1, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !50
  %21 = getelementptr inbounds %struct.node, ptr %0, i64 0, i32 1
  %22 = getelementptr inbounds %struct.node, ptr %0, i64 0, i32 6
  %23 = select i1 %18, ptr %21, ptr %22
  %24 = load ptr, ptr %23, align 8, !tbaa !15
  tail call void %20(ptr noundef %2, ptr noundef %24, i32 noundef 0) #18
  %25 = getelementptr inbounds %struct.emitter, ptr %1, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !51
  tail call void %26(ptr noundef %2, i32 noundef 4) #18
  %27 = getelementptr inbounds %struct.node, ptr %0, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8, !tbaa !15
  %29 = icmp eq ptr %28, null
  br i1 %29, label %89, label %30

30:                                               ; preds = %10
  %31 = getelementptr inbounds %struct.data, ptr %3, i64 0, i32 1
  %32 = getelementptr inbounds %struct.emitter, ptr %1, i64 0, i32 6
  %33 = getelementptr inbounds %struct.emitter, ptr %1, i64 0, i32 3
  br label %34

34:                                               ; preds = %84, %30
  %35 = phi ptr [ %28, %30 ], [ %87, %84 ]
  %36 = phi i8 [ 0, %30 ], [ %85, %84 ]
  %37 = load i8, ptr %35, align 8, !tbaa !52, !range !46
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %84

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.property, ptr %35, i64 0, i32 1
  %41 = load ptr, ptr %40, align 8, !tbaa !54
  %42 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %41, ptr noundef nonnull dereferenceable(5) @.str.79) #23
  %43 = icmp eq i32 %42, 0
  %44 = select i1 %43, i8 1, i8 %36
  %45 = load i32, ptr %3, align 8, !tbaa !25
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %58, label %47

47:                                               ; preds = %39
  %48 = load ptr, ptr %31, align 8, !tbaa !42
  %49 = zext i32 %45 to i64
  br label %50

50:                                               ; preds = %55, %47
  %51 = phi i64 [ 0, %47 ], [ %56, %55 ]
  %52 = getelementptr inbounds i8, ptr %48, i64 %51
  %53 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %41, ptr noundef nonnull dereferenceable(1) %52) #23
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %50
  %56 = add nuw nsw i64 %51, 1
  %57 = icmp eq i64 %56, %49
  br i1 %57, label %58, label %50

58:                                               ; preds = %55, %39
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %7) #18
  %59 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %41) #23
  %60 = trunc i64 %59 to i32
  %61 = add i32 %60, 1
  call void @data_append_data(ptr nonnull sret(%struct.data) align 8 %7, ptr noundef nonnull byval(%struct.data) align 8 %3, ptr noundef %41, i32 noundef %61) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %3, ptr noundef nonnull align 8 dereferenceable(24) %7, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %7) #18
  br label %64

62:                                               ; preds = %50
  %63 = trunc i64 %51 to i32
  br label %64

64:                                               ; preds = %62, %58
  %65 = phi i32 [ %45, %58 ], [ %63, %62 ]
  %66 = load ptr, ptr %32, align 8, !tbaa !55
  %67 = getelementptr inbounds %struct.property, ptr %35, i64 0, i32 4
  %68 = load ptr, ptr %67, align 8, !tbaa !56
  call void %66(ptr noundef %2, ptr noundef %68) #18
  %69 = load ptr, ptr %1, align 8, !tbaa !57
  %70 = getelementptr inbounds %struct.property, ptr %35, i64 0, i32 2
  %71 = load i32, ptr %70, align 8, !tbaa !58
  call void %69(ptr noundef %2, i32 noundef %71) #18
  %72 = load ptr, ptr %1, align 8, !tbaa !57
  call void %72(ptr noundef %2, i32 noundef %65) #18
  %73 = load i32, ptr %15, align 4, !tbaa !38
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %81, label %76

76:                                               ; preds = %64
  %77 = load i32, ptr %70, align 8, !tbaa !58
  %78 = icmp ugt i32 %77, 7
  br i1 %78, label %79, label %81

79:                                               ; preds = %76
  %80 = load ptr, ptr %25, align 8, !tbaa !51
  call void %80(ptr noundef %2, i32 noundef 8) #18
  br label %81

81:                                               ; preds = %79, %76, %64
  %82 = load ptr, ptr %33, align 8, !tbaa !59
  call void %82(ptr noundef %2, ptr noundef nonnull byval(%struct.data) align 8 %70) #18
  %83 = load ptr, ptr %25, align 8, !tbaa !51
  call void %83(ptr noundef %2, i32 noundef 4) #18
  br label %84

84:                                               ; preds = %81, %34
  %85 = phi i8 [ %36, %34 ], [ %44, %81 ]
  %86 = getelementptr inbounds %struct.property, ptr %35, i64 0, i32 3
  %87 = load ptr, ptr %86, align 8, !tbaa !15
  %88 = icmp eq ptr %87, null
  br i1 %88, label %89, label %34

89:                                               ; preds = %84, %10
  %90 = phi i8 [ 0, %10 ], [ %85, %84 ]
  %91 = load i32, ptr %15, align 4, !tbaa !38
  %92 = and i32 %91, 4
  %93 = icmp ne i32 %92, 0
  %94 = and i8 %90, 1
  %95 = icmp eq i8 %94, 0
  %96 = select i1 %93, i1 %95, i1 false
  br i1 %96, label %97, label %137

97:                                               ; preds = %89
  %98 = getelementptr inbounds %struct.emitter, ptr %1, i64 0, i32 6
  %99 = load ptr, ptr %98, align 8, !tbaa !55
  call void %99(ptr noundef %2, ptr noundef null) #18
  %100 = load ptr, ptr %1, align 8, !tbaa !57
  %101 = getelementptr inbounds %struct.node, ptr %0, i64 0, i32 7
  %102 = load i32, ptr %101, align 8, !tbaa !60
  %103 = add nsw i32 %102, 1
  call void %100(ptr noundef %2, i32 noundef %103) #18
  %104 = load ptr, ptr %1, align 8, !tbaa !57
  %105 = load i32, ptr %3, align 8, !tbaa !25
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %119, label %107

107:                                              ; preds = %97
  %108 = getelementptr inbounds %struct.data, ptr %3, i64 0, i32 1
  %109 = load ptr, ptr %108, align 8, !tbaa !42
  %110 = zext i32 %105 to i64
  br label %111

111:                                              ; preds = %116, %107
  %112 = phi i64 [ 0, %107 ], [ %117, %116 ]
  %113 = getelementptr inbounds i8, ptr %109, i64 %112
  %114 = call i32 @strcmp(ptr noundef nonnull dereferenceable(5) @.str.79, ptr noundef nonnull dereferenceable(1) %113) #23
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %120, label %116

116:                                              ; preds = %111
  %117 = add nuw nsw i64 %112, 1
  %118 = icmp eq i64 %117, %110
  br i1 %118, label %119, label %111

119:                                              ; preds = %116, %97
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #18
  call void @data_append_data(ptr nonnull sret(%struct.data) align 8 %6, ptr noundef nonnull byval(%struct.data) align 8 %3, ptr noundef nonnull @.str.79, i32 noundef 5) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %3, ptr noundef nonnull align 8 dereferenceable(24) %6, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #18
  br label %122

120:                                              ; preds = %111
  %121 = trunc i64 %112 to i32
  br label %122

122:                                              ; preds = %120, %119
  %123 = phi i32 [ %105, %119 ], [ %121, %120 ]
  call void %104(ptr noundef %2, i32 noundef %123) #18
  %124 = load i32, ptr %15, align 4, !tbaa !38
  %125 = and i32 %124, 2
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %132, label %127

127:                                              ; preds = %122
  %128 = load i32, ptr %101, align 8, !tbaa !60
  %129 = icmp sgt i32 %128, 6
  br i1 %129, label %130, label %132

130:                                              ; preds = %127
  %131 = load ptr, ptr %25, align 8, !tbaa !51
  call void %131(ptr noundef %2, i32 noundef 8) #18
  br label %132

132:                                              ; preds = %130, %127, %122
  %133 = load ptr, ptr %19, align 8, !tbaa !50
  %134 = load ptr, ptr %21, align 8, !tbaa !61
  %135 = load i32, ptr %101, align 8, !tbaa !60
  call void %133(ptr noundef %2, ptr noundef %134, i32 noundef %135) #18
  %136 = load ptr, ptr %25, align 8, !tbaa !51
  call void %136(ptr noundef %2, i32 noundef 4) #18
  br label %137

137:                                              ; preds = %132, %89
  %138 = getelementptr inbounds %struct.node, ptr %0, i64 0, i32 3
  %139 = load ptr, ptr %138, align 8, !tbaa !15
  %140 = icmp eq ptr %139, null
  br i1 %140, label %150, label %141

141:                                              ; preds = %146, %137
  %142 = phi ptr [ %148, %146 ], [ %139, %137 ]
  %143 = load i8, ptr %142, align 8, !tbaa !43, !range !46
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %145, label %146

145:                                              ; preds = %141
  call fastcc void @flatten_tree(ptr noundef nonnull %142, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  br label %146

146:                                              ; preds = %145, %141
  %147 = getelementptr inbounds %struct.node, ptr %142, i64 0, i32 5
  %148 = load ptr, ptr %147, align 8, !tbaa !15
  %149 = icmp eq ptr %148, null
  br i1 %149, label %150, label %141

150:                                              ; preds = %146, %137
  %151 = getelementptr inbounds %struct.emitter, ptr %1, i64 0, i32 5
  %152 = load ptr, ptr %151, align 8, !tbaa !62
  %153 = load ptr, ptr %13, align 8, !tbaa !49
  call void %152(ptr noundef %2, ptr noundef %153) #18
  br label %154

154:                                              ; preds = %150, %5
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_cell(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #18
  call void @data_append_cell(ptr nonnull sret(%struct.data) align 8 %3, ptr noundef byval(%struct.data) align 8 %0, i32 noundef %1) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 8 dereferenceable(24) %3, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #18
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

declare void @data_append_data(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, ptr noundef, i32 noundef) local_unnamed_addr #6

declare void @data_append_align(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i32 noundef) local_unnamed_addr #6

declare void @data_merge(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, ptr noundef byval(%struct.data) align 8) local_unnamed_addr #6

declare void @data_append_zeroes(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i32 noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare noundef i32 @ferror(ptr nocapture noundef) local_unnamed_addr #7

; Function Attrs: nounwind
declare ptr @strerror(i32 noundef) local_unnamed_addr #8

; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
declare ptr @__errno_location() local_unnamed_addr #9

declare void @data_free(ptr noundef byval(%struct.data) align 8) local_unnamed_addr #6

; Function Attrs: nounwind uwtable
define dso_local void @dt_to_asm(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #0 {
  %4 = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %4, i8 0, i64 24, i1 false)
  %5 = load i32, ptr @version_table, align 16, !tbaa !5
  %6 = icmp eq i32 %5, %2
  %7 = select i1 %6, ptr @version_table, ptr null
  %8 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 1), align 16, !tbaa !5
  %9 = icmp eq i32 %8, %2
  %10 = select i1 %9, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 1), ptr %7
  %11 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 2), align 16, !tbaa !5
  %12 = icmp eq i32 %11, %2
  %13 = select i1 %12, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 2), ptr %10
  %14 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 3), align 16, !tbaa !5
  %15 = icmp eq i32 %14, %2
  %16 = select i1 %15, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 3), ptr %13
  %17 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 4), align 16, !tbaa !5
  %18 = icmp eq i32 %17, %2
  %19 = select i1 %18, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 4), ptr %16
  %20 = icmp eq ptr %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %3
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str, i32 noundef %2) #19
  unreachable

22:                                               ; preds = %3
  %23 = tail call i64 @fwrite(ptr nonnull @.str.5, i64 41, i64 1, ptr %0)
  %24 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.6) #18
  %25 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.6) #18
  %26 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.6) #18
  %27 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.7) #18
  %28 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.7) #18
  %29 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.7) #18
  %30 = tail call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %0)
  %31 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.83, i32 noundef 208, i32 noundef 13, i32 noundef 254, i32 noundef 237) #18
  %32 = tail call i64 @fwrite(ptr nonnull @.str.9, i64 17, i64 1, ptr %0)
  %33 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.10, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %34 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.11, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %35 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.12, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %36 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %37 = tail call i64 @fwrite(ptr nonnull @.str.14, i64 21, i64 1, ptr %0)
  %38 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.15, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %39 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.16, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %40 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.17, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %41 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.18, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %42 = tail call i64 @fwrite(ptr nonnull @.str.19, i64 22, i64 1, ptr %0)
  %43 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.20, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %44 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.21, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %45 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.22, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %46 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.23, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %47 = tail call i64 @fwrite(ptr nonnull @.str.24, i64 22, i64 1, ptr %0)
  %48 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.25, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %49 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.26, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %50 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.27, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %51 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.28, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %52 = tail call i64 @fwrite(ptr nonnull @.str.29, i64 15, i64 1, ptr %0)
  %53 = load i32, ptr %19, align 16, !tbaa !5
  %54 = lshr i32 %53, 24
  %55 = lshr i32 %53, 16
  %56 = and i32 %55, 255
  %57 = lshr i32 %53, 8
  %58 = and i32 %57, 255
  %59 = and i32 %53, 255
  %60 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.83, i32 noundef %54, i32 noundef %56, i32 noundef %58, i32 noundef %59) #18
  %61 = tail call i64 @fwrite(ptr nonnull @.str.30, i64 25, i64 1, ptr %0)
  %62 = getelementptr inbounds %struct.version_info, ptr %19, i64 0, i32 1
  %63 = load i32, ptr %62, align 4, !tbaa !31
  %64 = lshr i32 %63, 24
  %65 = lshr i32 %63, 16
  %66 = and i32 %65, 255
  %67 = lshr i32 %63, 8
  %68 = and i32 %67, 255
  %69 = and i32 %63, 255
  %70 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.83, i32 noundef %64, i32 noundef %66, i32 noundef %68, i32 noundef %69) #18
  %71 = getelementptr inbounds %struct.version_info, ptr %19, i64 0, i32 3
  %72 = load i32, ptr %71, align 4, !tbaa !38
  %73 = and i32 %72, 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %87, label %75

75:                                               ; preds = %22
  %76 = tail call i64 @fwrite(ptr nonnull @.str.31, i64 23, i64 1, ptr %0)
  %77 = getelementptr inbounds %struct.dt_info, ptr %1, i64 0, i32 2
  %78 = load i32, ptr %77, align 8, !tbaa !27
  %79 = lshr i32 %78, 24
  %80 = lshr i32 %78, 16
  %81 = and i32 %80, 255
  %82 = lshr i32 %78, 8
  %83 = and i32 %82, 255
  %84 = and i32 %78, 255
  %85 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.83, i32 noundef %79, i32 noundef %81, i32 noundef %83, i32 noundef %84) #18
  %86 = load i32, ptr %71, align 4, !tbaa !38
  br label %87

87:                                               ; preds = %75, %22
  %88 = phi i32 [ %86, %75 ], [ %72, %22 ]
  %89 = and i32 %88, 16
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %98, label %91

91:                                               ; preds = %87
  %92 = tail call i64 @fwrite(ptr nonnull @.str.32, i64 23, i64 1, ptr %0)
  %93 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.33, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %94 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.34, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %95 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.35, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %96 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.36, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %97 = load i32, ptr %71, align 4, !tbaa !38
  br label %98

98:                                               ; preds = %91, %87
  %99 = phi i32 [ %97, %91 ], [ %88, %87 ]
  %100 = and i32 %99, 32
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %108, label %102

102:                                              ; preds = %98
  %103 = tail call i64 @fwrite(ptr nonnull @.str.37, i64 22, i64 1, ptr %0)
  %104 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.38, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %105 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.39, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %106 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.40, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %107 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.41, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  br label %108

108:                                              ; preds = %102, %98
  %109 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.84, i32 noundef 8) #18
  %110 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.42) #18
  %111 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.42) #18
  %112 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.42) #18
  %113 = tail call i64 @fwrite(ptr nonnull @.str.43, i64 42, i64 1, ptr %0)
  %114 = getelementptr inbounds %struct.dt_info, ptr %1, i64 0, i32 1
  %115 = load ptr, ptr %114, align 8, !tbaa !15
  %116 = icmp eq ptr %115, null
  br i1 %116, label %117, label %120

117:                                              ; preds = %139, %108
  %118 = load i32, ptr @reservenum, align 4, !tbaa !14
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %206, label %200

120:                                              ; preds = %139, %108
  %121 = phi ptr [ %198, %139 ], [ %115, %108 ]
  %122 = getelementptr inbounds %struct.reserve_info, ptr %121, i64 0, i32 3
  %123 = load ptr, ptr %122, align 8, !tbaa !15
  %124 = icmp eq ptr %123, null
  br i1 %124, label %139, label %125

125:                                              ; preds = %135, %120
  %126 = phi ptr [ %137, %135 ], [ %123, %120 ]
  %127 = load i8, ptr %126, align 8, !tbaa !63, !range !46
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %129, label %135

129:                                              ; preds = %125
  %130 = getelementptr inbounds %struct.label, ptr %126, i64 0, i32 1
  %131 = load ptr, ptr %130, align 8, !tbaa !65
  %132 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.44, ptr noundef %131)
  %133 = load ptr, ptr %130, align 8, !tbaa !65
  %134 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.45, ptr noundef %133)
  br label %135

135:                                              ; preds = %129, %125
  %136 = getelementptr inbounds %struct.label, ptr %126, i64 0, i32 2
  %137 = load ptr, ptr %136, align 8, !tbaa !15
  %138 = icmp eq ptr %137, null
  br i1 %138, label %139, label %125

139:                                              ; preds = %135, %120
  %140 = load i64, ptr %121, align 8, !tbaa !20
  %141 = lshr i64 %140, 32
  %142 = trunc i64 %141 to i32
  %143 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.46, i32 noundef %142)
  %144 = load i64, ptr %121, align 8, !tbaa !20
  %145 = lshr i64 %144, 32
  %146 = trunc i64 %145 to i32
  %147 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.47, i32 noundef %146)
  %148 = load i64, ptr %121, align 8, !tbaa !20
  %149 = lshr i64 %148, 32
  %150 = trunc i64 %149 to i32
  %151 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.48, i32 noundef %150)
  %152 = load i64, ptr %121, align 8, !tbaa !20
  %153 = lshr i64 %152, 32
  %154 = trunc i64 %153 to i32
  %155 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.49, i32 noundef %154)
  %156 = load i64, ptr %121, align 8, !tbaa !20
  %157 = trunc i64 %156 to i32
  %158 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.46, i32 noundef %157)
  %159 = load i64, ptr %121, align 8, !tbaa !20
  %160 = trunc i64 %159 to i32
  %161 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.47, i32 noundef %160)
  %162 = load i64, ptr %121, align 8, !tbaa !20
  %163 = trunc i64 %162 to i32
  %164 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.48, i32 noundef %163)
  %165 = load i64, ptr %121, align 8, !tbaa !20
  %166 = trunc i64 %165 to i32
  %167 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.49, i32 noundef %166)
  %168 = getelementptr inbounds %struct.reserve_info, ptr %121, i64 0, i32 1
  %169 = load i64, ptr %168, align 8, !tbaa !23
  %170 = lshr i64 %169, 32
  %171 = trunc i64 %170 to i32
  %172 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.46, i32 noundef %171)
  %173 = load i64, ptr %168, align 8, !tbaa !23
  %174 = lshr i64 %173, 32
  %175 = trunc i64 %174 to i32
  %176 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.47, i32 noundef %175)
  %177 = load i64, ptr %168, align 8, !tbaa !23
  %178 = lshr i64 %177, 32
  %179 = trunc i64 %178 to i32
  %180 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.48, i32 noundef %179)
  %181 = load i64, ptr %168, align 8, !tbaa !23
  %182 = lshr i64 %181, 32
  %183 = trunc i64 %182 to i32
  %184 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.49, i32 noundef %183)
  %185 = load i64, ptr %168, align 8, !tbaa !23
  %186 = trunc i64 %185 to i32
  %187 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.46, i32 noundef %186)
  %188 = load i64, ptr %168, align 8, !tbaa !23
  %189 = trunc i64 %188 to i32
  %190 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.47, i32 noundef %189)
  %191 = load i64, ptr %168, align 8, !tbaa !23
  %192 = trunc i64 %191 to i32
  %193 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.48, i32 noundef %192)
  %194 = load i64, ptr %168, align 8, !tbaa !23
  %195 = trunc i64 %194 to i32
  %196 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.49, i32 noundef %195)
  %197 = getelementptr inbounds %struct.reserve_info, ptr %121, i64 0, i32 2
  %198 = load ptr, ptr %197, align 8, !tbaa !15
  %199 = icmp eq ptr %198, null
  br i1 %199, label %117, label %120

200:                                              ; preds = %200, %117
  %201 = phi i32 [ %203, %200 ], [ 0, %117 ]
  %202 = tail call i64 @fwrite(ptr nonnull @.str.50, i64 24, i64 1, ptr %0)
  %203 = add nuw i32 %201, 1
  %204 = load i32, ptr @reservenum, align 4, !tbaa !14
  %205 = icmp ult i32 %203, %204
  br i1 %205, label %200, label %206

206:                                              ; preds = %200, %117
  %207 = tail call i64 @fwrite(ptr nonnull @.str.50, i64 24, i64 1, ptr %0)
  %208 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.51) #18
  %209 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.51) #18
  %210 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.51) #18
  %211 = getelementptr inbounds %struct.dt_info, ptr %1, i64 0, i32 3
  %212 = load ptr, ptr %211, align 8, !tbaa !10
  call fastcc void @flatten_tree(ptr noundef %212, ptr noundef nonnull @asm_emitter, ptr noundef %0, ptr noundef nonnull %4, ptr noundef nonnull %19)
  %213 = call i64 @fwrite(ptr nonnull @.str.52, i64 15, i64 1, ptr %0)
  %214 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.83, i32 noundef 0, i32 noundef 0, i32 noundef 0, i32 noundef 9) #18
  %215 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.53) #18
  %216 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.53) #18
  %217 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.53) #18
  %218 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.54) #18
  %219 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.54) #18
  %220 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.54) #18
  %221 = load i32, ptr %4, align 8
  %222 = getelementptr inbounds i8, ptr %4, i64 8
  %223 = load ptr, ptr %222, align 8
  %224 = zext i32 %221 to i64
  %225 = getelementptr inbounds i8, ptr %223, i64 %224
  %226 = icmp eq i32 %221, 0
  br i1 %226, label %236, label %227

227:                                              ; preds = %227, %206
  %228 = phi ptr [ %234, %227 ], [ %223, %206 ]
  %229 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %228) #23
  %230 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.96, ptr noundef %228) #18
  %231 = shl i64 %229, 32
  %232 = add i64 %231, 4294967296
  %233 = ashr exact i64 %232, 32
  %234 = getelementptr inbounds i8, ptr %228, i64 %233
  %235 = icmp ult ptr %234, %225
  br i1 %235, label %227, label %236

236:                                              ; preds = %227, %206
  %237 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.55) #18
  %238 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.55) #18
  %239 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.55) #18
  %240 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.56) #18
  %241 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.56) #18
  %242 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.56) #18
  %243 = load i32, ptr @minsize, align 4, !tbaa !14
  %244 = icmp sgt i32 %243, 0
  br i1 %244, label %245, label %247

245:                                              ; preds = %236
  %246 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.57, i32 noundef %243, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  br label %247

247:                                              ; preds = %245, %236
  %248 = load i32, ptr @padsize, align 4, !tbaa !14
  %249 = icmp sgt i32 %248, 0
  br i1 %249, label %250, label %252

250:                                              ; preds = %247
  %251 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.58, i32 noundef %248)
  br label %252

252:                                              ; preds = %250, %247
  %253 = load i32, ptr @alignsize, align 4, !tbaa !14
  %254 = icmp sgt i32 %253, 0
  br i1 %254, label %255, label %257

255:                                              ; preds = %252
  %256 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.84, i32 noundef %253) #18
  br label %257

257:                                              ; preds = %255, %252
  %258 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.59) #18
  %259 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.59) #18
  %260 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.59) #18
  call void @data_free(ptr noundef nonnull byval(%struct.data) align 8 %4) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #18
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_cell(ptr nocapture noundef %0, i32 noundef %1) #10 {
  %3 = lshr i32 %1, 24
  %4 = lshr i32 %1, 16
  %5 = and i32 %4, 255
  %6 = lshr i32 %1, 8
  %7 = and i32 %6, 255
  %8 = and i32 %1, 255
  %9 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.83, i32 noundef %3, i32 noundef %5, i32 noundef %7, i32 noundef %8)
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_align(ptr nocapture noundef %0, i32 noundef %1) #10 {
  %3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.84, i32 noundef %1)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local ptr @dt_from_blob(ptr noundef %0) local_unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.inbuf, align 8
  %5 = alloca %struct.inbuf, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #18
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #18
  %6 = tail call ptr @srcfile_relative_open(ptr noundef %0, ptr noundef null) #18
  %7 = call i64 @fread(ptr noundef nonnull %2, i64 noundef 4, i64 noundef 1, ptr noundef %6)
  %8 = tail call i32 @ferror(ptr noundef %6) #18
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %1
  %11 = tail call ptr @__errno_location() #21
  %12 = load i32, ptr %11, align 4, !tbaa !14
  %13 = tail call ptr @strerror(i32 noundef %12) #18
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.60, ptr noundef %13) #19
  unreachable

14:                                               ; preds = %1
  %15 = trunc i64 %7 to i32
  %16 = icmp slt i32 %15, 1
  br i1 %16, label %17, label %22

17:                                               ; preds = %14
  %18 = tail call i32 @feof(ptr noundef %6) #18
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %17
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.61) #19
  unreachable

21:                                               ; preds = %17
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.62) #19
  unreachable

22:                                               ; preds = %14
  %23 = load i32, ptr %2, align 4, !tbaa !14
  %24 = icmp eq i32 %23, -302117424
  br i1 %24, label %26, label %25

25:                                               ; preds = %22
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.63) #19
  unreachable

26:                                               ; preds = %22
  %27 = call i64 @fread(ptr noundef nonnull %3, i64 noundef 4, i64 noundef 1, ptr noundef %6)
  %28 = tail call i32 @ferror(ptr noundef %6) #18
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = tail call ptr @__errno_location() #21
  %32 = load i32, ptr %31, align 4, !tbaa !14
  %33 = tail call ptr @strerror(i32 noundef %32) #18
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.64, ptr noundef %33) #19
  unreachable

34:                                               ; preds = %26
  %35 = trunc i64 %27 to i32
  %36 = icmp slt i32 %35, 1
  br i1 %36, label %37, label %42

37:                                               ; preds = %34
  %38 = tail call i32 @feof(ptr noundef %6) #18
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %41, label %40

40:                                               ; preds = %37
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.65) #19
  unreachable

41:                                               ; preds = %37
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.66) #19
  unreachable

42:                                               ; preds = %34
  %43 = load i32, ptr %3, align 4, !tbaa !14
  %44 = tail call i32 @llvm.bswap.i32(i32 %43) #18
  %45 = zext i32 %44 to i64
  %46 = icmp ult i32 %44, 28
  br i1 %46, label %47, label %48

47:                                               ; preds = %42
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.67, i32 noundef %44) #19
  unreachable

48:                                               ; preds = %42
  %49 = tail call noalias ptr @malloc(i64 noundef %45) #24
  %50 = icmp eq ptr %49, null
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.97) #22
  unreachable

52:                                               ; preds = %48
  store i32 -302117424, ptr %49, align 4, !tbaa !28
  %53 = getelementptr inbounds %struct.fdt_header, ptr %49, i64 0, i32 1
  store i32 %43, ptr %53, align 4, !tbaa !37
  %54 = add i32 %44, -8
  %55 = getelementptr inbounds i8, ptr %49, i64 8
  br label %56

56:                                               ; preds = %71, %52
  %57 = phi ptr [ %76, %71 ], [ %55, %52 ]
  %58 = phi i32 [ %73, %71 ], [ %54, %52 ]
  %59 = tail call i32 @feof(ptr noundef %6) #18
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %62, label %61

61:                                               ; preds = %56
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.68, i32 noundef %44) #19
  unreachable

62:                                               ; preds = %56
  %63 = sext i32 %58 to i64
  %64 = tail call i64 @fread(ptr noundef %57, i64 noundef 1, i64 noundef %63, ptr noundef %6)
  %65 = tail call i32 @ferror(ptr noundef %6) #18
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %71, label %67

67:                                               ; preds = %62
  %68 = tail call ptr @__errno_location() #21
  %69 = load i32, ptr %68, align 4, !tbaa !14
  %70 = tail call ptr @strerror(i32 noundef %69) #18
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.69, ptr noundef %70) #19
  unreachable

71:                                               ; preds = %62
  %72 = trunc i64 %64 to i32
  %73 = sub nsw i32 %58, %72
  %74 = shl i64 %64, 32
  %75 = ashr exact i64 %74, 32
  %76 = getelementptr inbounds i8, ptr %57, i64 %75
  %77 = icmp eq i32 %73, 0
  br i1 %77, label %78, label %56

78:                                               ; preds = %71
  %79 = load i32, ptr %55, align 4, !tbaa !35
  %80 = getelementptr inbounds %struct.fdt_header, ptr %49, i64 0, i32 3
  %81 = load i32, ptr %80, align 4, !tbaa !36
  %82 = getelementptr inbounds %struct.fdt_header, ptr %49, i64 0, i32 4
  %83 = load i32, ptr %82, align 4, !tbaa !34
  %84 = getelementptr inbounds %struct.fdt_header, ptr %49, i64 0, i32 5
  %85 = load i32, ptr %84, align 4, !tbaa !30
  %86 = getelementptr inbounds %struct.fdt_header, ptr %49, i64 0, i32 7
  %87 = load i32, ptr %86, align 4, !tbaa !39
  %88 = tail call i32 @llvm.bswap.i32(i32 %79) #18
  %89 = tail call i32 @llvm.bswap.i32(i32 %81) #18
  %90 = tail call i32 @llvm.bswap.i32(i32 %83) #18
  %91 = tail call i32 @llvm.bswap.i32(i32 %85) #18
  %92 = icmp ult i32 %90, %44
  br i1 %92, label %94, label %93

93:                                               ; preds = %78
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.70) #19
  unreachable

94:                                               ; preds = %78
  %95 = icmp ult i32 %88, %44
  br i1 %95, label %97, label %96

96:                                               ; preds = %94
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.71) #19
  unreachable

97:                                               ; preds = %94
  %98 = icmp ugt i32 %89, %44
  br i1 %98, label %99, label %100

99:                                               ; preds = %97
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.72) #19
  unreachable

100:                                              ; preds = %97
  %101 = icmp ugt i32 %91, 2
  br i1 %101, label %102, label %111

102:                                              ; preds = %100
  %103 = getelementptr inbounds %struct.fdt_header, ptr %49, i64 0, i32 8
  %104 = load i32, ptr %103, align 4, !tbaa !40
  %105 = tail call i32 @llvm.bswap.i32(i32 %104) #18
  %106 = add i32 %105, %89
  %107 = icmp ult i32 %106, %89
  %108 = icmp ugt i32 %106, %44
  %109 = select i1 %107, i1 true, i1 %108
  br i1 %109, label %110, label %117

110:                                              ; preds = %102
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.73) #19
  unreachable

111:                                              ; preds = %100
  %112 = zext i32 %89 to i64
  %113 = getelementptr inbounds i8, ptr %49, i64 %112
  %114 = getelementptr inbounds i8, ptr %49, i64 %45
  store ptr %113, ptr %5, align 8, !tbaa !66
  %115 = getelementptr inbounds %struct.inbuf, ptr %5, i64 0, i32 1
  store ptr %114, ptr %115, align 8, !tbaa !68
  %116 = getelementptr inbounds %struct.inbuf, ptr %5, i64 0, i32 2
  store ptr %113, ptr %116, align 8, !tbaa !69
  br label %134

117:                                              ; preds = %102
  %118 = zext i32 %89 to i64
  %119 = getelementptr inbounds i8, ptr %49, i64 %118
  %120 = zext i32 %105 to i64
  %121 = getelementptr inbounds i8, ptr %119, i64 %120
  store ptr %119, ptr %5, align 8, !tbaa !66
  %122 = getelementptr inbounds %struct.inbuf, ptr %5, i64 0, i32 1
  store ptr %121, ptr %122, align 8, !tbaa !68
  %123 = getelementptr inbounds %struct.inbuf, ptr %5, i64 0, i32 2
  store ptr %119, ptr %123, align 8, !tbaa !69
  %124 = icmp ugt i32 %91, 16
  br i1 %124, label %125, label %134

125:                                              ; preds = %117
  %126 = getelementptr inbounds %struct.fdt_header, ptr %49, i64 0, i32 9
  %127 = load i32, ptr %126, align 4, !tbaa !41
  %128 = tail call i32 @llvm.bswap.i32(i32 %127) #18
  %129 = add i32 %128, %88
  %130 = icmp ult i32 %129, %88
  %131 = icmp ugt i32 %129, %44
  %132 = select i1 %130, i1 true, i1 %131
  br i1 %132, label %133, label %134

133:                                              ; preds = %125
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.74) #19
  unreachable

134:                                              ; preds = %125, %117, %111
  %135 = icmp ult i32 %91, 16
  %136 = select i1 %135, i32 7, i32 64
  %137 = zext i32 %90 to i64
  %138 = getelementptr inbounds i8, ptr %49, i64 %137
  %139 = getelementptr inbounds i8, ptr %49, i64 %45
  %140 = zext i32 %88 to i64
  %141 = getelementptr inbounds i8, ptr %49, i64 %140
  store ptr %141, ptr %4, align 8, !tbaa !66
  %142 = getelementptr inbounds %struct.inbuf, ptr %4, i64 0, i32 1
  store ptr %139, ptr %142, align 8, !tbaa !68
  %143 = getelementptr inbounds %struct.inbuf, ptr %4, i64 0, i32 2
  store ptr %141, ptr %143, align 8, !tbaa !69
  %144 = getelementptr inbounds i8, ptr %138, i64 16
  %145 = icmp ugt ptr %144, %139
  br i1 %145, label %146, label %147

146:                                              ; preds = %154, %134
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

147:                                              ; preds = %154, %134
  %148 = phi ptr [ %160, %154 ], [ %144, %134 ]
  %149 = phi ptr [ %148, %154 ], [ %138, %134 ]
  %150 = phi ptr [ %159, %154 ], [ null, %134 ]
  %151 = getelementptr inbounds i8, ptr %149, i64 8
  %152 = load i64, ptr %151, align 1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %162, label %154

154:                                              ; preds = %147
  %155 = load i64, ptr %149, align 1
  %156 = tail call i64 @llvm.bswap.i64(i64 %152) #18
  %157 = tail call i64 @llvm.bswap.i64(i64 %155) #18
  %158 = tail call ptr @build_reserve_entry(i64 noundef %157, i64 noundef %156) #18
  %159 = tail call ptr @add_reserve_entry(ptr noundef %150, ptr noundef %158) #18
  %160 = getelementptr inbounds i8, ptr %148, i64 16
  %161 = icmp ugt ptr %160, %139
  br i1 %161, label %146, label %147

162:                                              ; preds = %147
  %163 = getelementptr inbounds i8, ptr %141, i64 4
  %164 = icmp ugt ptr %163, %139
  br i1 %164, label %165, label %166

165:                                              ; preds = %162
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

166:                                              ; preds = %162
  %167 = load i32, ptr %141, align 1
  store ptr %163, ptr %143, align 8, !tbaa !69
  %168 = icmp eq i32 %167, 16777216
  br i1 %168, label %171, label %169

169:                                              ; preds = %166
  %170 = tail call i32 @llvm.bswap.i32(i32 %167) #18
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.75, i32 noundef %170) #19
  unreachable

171:                                              ; preds = %166
  %172 = call fastcc ptr @unflatten_tree(ptr noundef nonnull %4, ptr noundef nonnull %5, ptr noundef nonnull @.str.76, i32 noundef %136)
  %173 = load ptr, ptr %143, align 8, !tbaa !69
  %174 = load ptr, ptr %4, align 8, !tbaa !66
  %175 = ptrtoint ptr %173 to i64
  %176 = ptrtoint ptr %174 to i64
  %177 = sub i64 %175, %176
  %178 = and i64 %177, 3
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %181, label %180

180:                                              ; preds = %171
  tail call void @__assert_fail(ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.89, i32 noundef 591, ptr noundef nonnull @__PRETTY_FUNCTION__.flat_read_word) #22
  unreachable

181:                                              ; preds = %171
  %182 = getelementptr inbounds i8, ptr %173, i64 4
  %183 = load ptr, ptr %142, align 8, !tbaa !68
  %184 = icmp ugt ptr %182, %183
  br i1 %184, label %185, label %186

185:                                              ; preds = %181
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

186:                                              ; preds = %181
  %187 = load i32, ptr %173, align 1
  %188 = icmp eq i32 %187, 150994944
  br i1 %188, label %190, label %189

189:                                              ; preds = %186
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.77) #19
  unreachable

190:                                              ; preds = %186
  %191 = tail call i32 @llvm.bswap.i32(i32 %87) #18
  tail call void @free(ptr noundef nonnull %49) #18
  %192 = tail call i32 @fclose(ptr noundef %6)
  %193 = tail call ptr @build_dt_info(i32 noundef 1, ptr noundef %150, ptr noundef %172, i32 noundef %191) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #18
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #18
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #18
  ret ptr %193
}

declare ptr @srcfile_relative_open(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i64 @fread(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @feof(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nounwind uwtable
define internal fastcc ptr @unflatten_tree(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, i32 noundef %3) unnamed_addr #0 {
  %5 = alloca %struct.data, align 8
  %6 = alloca %struct.data, align 8
  %7 = alloca %struct.data, align 8
  %8 = alloca %struct.data, align 8
  %9 = tail call ptr @build_node(ptr noundef null, ptr noundef null, ptr noundef null) #18
  %10 = getelementptr inbounds %struct.inbuf, ptr %0, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !69
  %12 = getelementptr inbounds %struct.inbuf, ptr %0, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !68
  br label %14

14:                                               ; preds = %19, %4
  %15 = phi ptr [ %11, %4 ], [ %21, %19 ]
  %16 = phi i32 [ 0, %4 ], [ %20, %19 ]
  %17 = icmp ult ptr %15, %13
  br i1 %17, label %19, label %18

18:                                               ; preds = %14
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

19:                                               ; preds = %14
  %20 = add nuw nsw i32 %16, 1
  %21 = getelementptr inbounds i8, ptr %15, i64 1
  %22 = load i8, ptr %15, align 1, !tbaa !70
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %14

24:                                               ; preds = %19
  %25 = tail call ptr @xstrdup(ptr noundef %11) #18
  %26 = load ptr, ptr %10, align 8, !tbaa !69
  %27 = zext i32 %20 to i64
  %28 = getelementptr inbounds i8, ptr %26, i64 %27
  %29 = load ptr, ptr %0, align 8, !tbaa !66
  %30 = ptrtoint ptr %28 to i64
  %31 = ptrtoint ptr %29 to i64
  %32 = sub i64 %30, %31
  %33 = shl i64 %32, 32
  %34 = add i64 %33, 12884901888
  %35 = ashr exact i64 %34, 32
  %36 = and i64 %35, -4
  %37 = getelementptr inbounds i8, ptr %29, i64 %36
  store ptr %37, ptr %10, align 8, !tbaa !69
  %38 = load ptr, ptr %12, align 8, !tbaa !68
  %39 = icmp ugt ptr %37, %38
  br i1 %39, label %40, label %41

40:                                               ; preds = %24
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

41:                                               ; preds = %24
  %42 = and i32 %3, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %58, label %44

44:                                               ; preds = %41
  %45 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #23
  %46 = tail call i32 @strncmp(ptr noundef %25, ptr noundef %2, i64 noundef %45) #23
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %49, label %48

48:                                               ; preds = %44
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.104, ptr noundef %25, ptr noundef %2) #22
  unreachable

49:                                               ; preds = %44
  %50 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(2) @.str.105) #23
  %51 = icmp ne i32 %50, 0
  %52 = zext i1 %51 to i64
  %53 = add i64 %45, %52
  %54 = shl i64 %53, 32
  %55 = ashr exact i64 %54, 32
  %56 = getelementptr inbounds i8, ptr %25, i64 %55
  %57 = tail call ptr @xstrdup(ptr noundef %56) #18
  br label %58

58:                                               ; preds = %49, %41
  %59 = phi ptr [ %57, %49 ], [ %25, %41 ]
  %60 = getelementptr inbounds %struct.node, ptr %9, i64 0, i32 1
  store ptr %59, ptr %60, align 8, !tbaa !61
  %61 = and i32 %3, 64
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds %struct.node, ptr %9, i64 0, i32 3
  %64 = getelementptr inbounds %struct.inbuf, ptr %1, i64 0, i32 1
  %65 = and i32 %3, 2
  %66 = icmp ne i32 %65, 0
  %67 = getelementptr inbounds %struct.data, ptr %5, i64 0, i32 1
  br label %68

68:                                               ; preds = %195, %58
  %69 = load ptr, ptr %10, align 8, !tbaa !69
  %70 = load ptr, ptr %0, align 8, !tbaa !66
  %71 = ptrtoint ptr %69 to i64
  %72 = ptrtoint ptr %70 to i64
  %73 = sub i64 %71, %72
  %74 = and i64 %73, 3
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %77, label %76

76:                                               ; preds = %68
  call void @__assert_fail(ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.89, i32 noundef 591, ptr noundef nonnull @__PRETTY_FUNCTION__.flat_read_word) #22
  unreachable

77:                                               ; preds = %68
  %78 = getelementptr inbounds i8, ptr %69, i64 4
  %79 = load ptr, ptr %12, align 8, !tbaa !68
  %80 = icmp ugt ptr %78, %79
  br i1 %80, label %81, label %82

81:                                               ; preds = %77
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

82:                                               ; preds = %77
  %83 = load i32, ptr %69, align 1
  store ptr %78, ptr %10, align 8, !tbaa !69
  %84 = call i32 @llvm.bswap.i32(i32 %83) #18
  switch i32 %84, label %194 [
    i32 3, label %85
    i32 1, label %187
    i32 4, label %190
    i32 9, label %189
    i32 2, label %197
  ]

85:                                               ; preds = %82
  %86 = load ptr, ptr %63, align 8, !tbaa !71
  %87 = icmp eq ptr %86, null
  br i1 %87, label %94, label %88

88:                                               ; preds = %85
  %89 = load ptr, ptr @stderr, align 8, !tbaa !15
  %90 = call i64 @fwrite(ptr nonnull @.str.100, i64 60, i64 1, ptr %89) #20
  %91 = load ptr, ptr %10, align 8, !tbaa !69
  %92 = load ptr, ptr %0, align 8, !tbaa !66
  %93 = ptrtoint ptr %92 to i64
  br label %94

94:                                               ; preds = %88, %85
  %95 = phi i64 [ %93, %88 ], [ %72, %85 ]
  %96 = phi ptr [ %91, %88 ], [ %78, %85 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %7) #18
  %97 = ptrtoint ptr %96 to i64
  %98 = sub i64 %97, %95
  %99 = and i64 %98, 3
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %102, label %101

101:                                              ; preds = %94
  call void @__assert_fail(ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.89, i32 noundef 591, ptr noundef nonnull @__PRETTY_FUNCTION__.flat_read_word) #22
  unreachable

102:                                              ; preds = %94
  %103 = getelementptr inbounds i8, ptr %96, i64 4
  %104 = load ptr, ptr %12, align 8, !tbaa !68
  %105 = icmp ugt ptr %103, %104
  br i1 %105, label %106, label %107

106:                                              ; preds = %102
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

107:                                              ; preds = %102
  %108 = load i32, ptr %96, align 1
  store ptr %103, ptr %10, align 8, !tbaa !69
  %109 = call i32 @llvm.bswap.i32(i32 %108) #18
  %110 = ptrtoint ptr %103 to i64
  %111 = sub i64 %110, %95
  %112 = and i64 %111, 3
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %115, label %114

114:                                              ; preds = %107
  call void @__assert_fail(ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.89, i32 noundef 591, ptr noundef nonnull @__PRETTY_FUNCTION__.flat_read_word) #22
  unreachable

115:                                              ; preds = %107
  %116 = getelementptr inbounds i8, ptr %96, i64 8
  %117 = icmp ugt ptr %116, %104
  br i1 %117, label %118, label %119

118:                                              ; preds = %115
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

119:                                              ; preds = %115
  %120 = load i32, ptr %103, align 1
  store ptr %116, ptr %10, align 8, !tbaa !69
  %121 = call i32 @llvm.bswap.i32(i32 %120) #18
  %122 = load ptr, ptr %1, align 8, !tbaa !66
  %123 = sext i32 %121 to i64
  %124 = getelementptr inbounds i8, ptr %122, i64 %123
  %125 = load ptr, ptr %64, align 8, !tbaa !68
  %126 = icmp uge ptr %124, %125
  %127 = icmp slt i32 %121, 0
  %128 = or i1 %127, %126
  br i1 %128, label %134, label %135

129:                                              ; preds = %135
  %130 = getelementptr inbounds i8, ptr %136, i64 1
  %131 = icmp uge ptr %130, %125
  %132 = icmp ult ptr %130, %122
  %133 = select i1 %131, i1 true, i1 %132
  br i1 %133, label %134, label %135

134:                                              ; preds = %129, %119
  call void (ptr, ...) @die(ptr noundef nonnull @.str.106, i32 noundef %121) #22
  unreachable

135:                                              ; preds = %129, %119
  %136 = phi ptr [ %130, %129 ], [ %124, %119 ]
  %137 = load i8, ptr %136, align 1, !tbaa !70
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %139, label %129

139:                                              ; preds = %135
  %140 = call ptr @xstrdup(ptr noundef %124) #18
  %141 = icmp ugt i32 %109, 7
  %142 = select i1 %66, i1 %141, i1 false
  br i1 %142, label %143, label %158

143:                                              ; preds = %139
  %144 = load ptr, ptr %10, align 8, !tbaa !69
  %145 = load ptr, ptr %0, align 8, !tbaa !66
  %146 = ptrtoint ptr %144 to i64
  %147 = ptrtoint ptr %145 to i64
  %148 = sub i64 %146, %147
  %149 = shl i64 %148, 32
  %150 = add i64 %149, 30064771072
  %151 = ashr exact i64 %150, 32
  %152 = and i64 %151, -8
  %153 = getelementptr inbounds i8, ptr %145, i64 %152
  store ptr %153, ptr %10, align 8, !tbaa !69
  %154 = load ptr, ptr %12, align 8, !tbaa !68
  %155 = icmp ugt ptr %153, %154
  br i1 %155, label %157, label %156

156:                                              ; preds = %143
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #18, !noalias !72
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false) #18, !noalias !72
  br label %161

157:                                              ; preds = %143
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

158:                                              ; preds = %139
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %8)
  call void @llvm.experimental.noalias.scope.decl(metadata !75) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #18, !noalias !75
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false) #18, !noalias !75
  %159 = icmp eq i32 %108, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %158
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %8, i8 0, i64 24, i1 false), !alias.scope !75
  br label %185

161:                                              ; preds = %158, %156
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #18, !noalias !75
  call void @data_grow_for(ptr nonnull sret(%struct.data) align 8 %6, ptr noundef nonnull byval(%struct.data) align 8 %5, i32 noundef %109) #18, !noalias !75
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %5, ptr noundef nonnull align 8 dereferenceable(24) %6, i64 24, i1 false) #18, !tbaa.struct !13, !noalias !75
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #18, !noalias !75
  store i32 %109, ptr %5, align 8, !tbaa !25, !noalias !75
  %162 = load ptr, ptr %10, align 8, !tbaa !69, !noalias !75
  %163 = sext i32 %109 to i64
  %164 = getelementptr inbounds i8, ptr %162, i64 %163
  %165 = load ptr, ptr %12, align 8, !tbaa !68, !noalias !75
  %166 = icmp ugt ptr %164, %165
  br i1 %166, label %167, label %168

167:                                              ; preds = %161
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22, !noalias !75
  unreachable

168:                                              ; preds = %161
  %169 = load ptr, ptr %67, align 8, !tbaa !42, !noalias !75
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %169, ptr align 1 %162, i64 %163, i1 false) #18, !noalias !75
  %170 = load ptr, ptr %10, align 8, !tbaa !69, !noalias !75
  %171 = getelementptr inbounds i8, ptr %170, i64 %163
  %172 = load ptr, ptr %0, align 8, !tbaa !66, !noalias !75
  %173 = ptrtoint ptr %171 to i64
  %174 = ptrtoint ptr %172 to i64
  %175 = sub i64 %173, %174
  %176 = shl i64 %175, 32
  %177 = add i64 %176, 12884901888
  %178 = ashr exact i64 %177, 32
  %179 = and i64 %178, -4
  %180 = getelementptr inbounds i8, ptr %172, i64 %179
  store ptr %180, ptr %10, align 8, !tbaa !69, !noalias !75
  %181 = load ptr, ptr %12, align 8, !tbaa !68, !noalias !75
  %182 = icmp ugt ptr %180, %181
  br i1 %182, label %183, label %184

183:                                              ; preds = %168
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22, !noalias !75
  unreachable

184:                                              ; preds = %168
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %8, ptr noundef nonnull align 8 dereferenceable(24) %5, i64 24, i1 false) #18, !tbaa.struct !13
  br label %185

185:                                              ; preds = %184, %160
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #18, !noalias !75
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %7, ptr noundef nonnull align 8 dereferenceable(24) %8, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %8)
  %186 = call ptr @build_property(ptr noundef %140, ptr noundef nonnull byval(%struct.data) align 8 %7, ptr noundef null) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %7) #18
  call void @add_property(ptr noundef %9, ptr noundef %186) #18
  br label %195

187:                                              ; preds = %82
  %188 = call fastcc ptr @unflatten_tree(ptr noundef nonnull %0, ptr noundef %1, ptr noundef %25, i32 noundef %3)
  call void @add_child(ptr noundef %9, ptr noundef %188) #18
  br label %195

189:                                              ; preds = %82
  call void (ptr, ...) @die(ptr noundef nonnull @.str.101) #19
  unreachable

190:                                              ; preds = %82
  br i1 %62, label %191, label %195

191:                                              ; preds = %190
  %192 = load ptr, ptr @stderr, align 8, !tbaa !15
  %193 = call i64 @fwrite(ptr nonnull @.str.102, i64 48, i64 1, ptr %192) #20
  br label %195

194:                                              ; preds = %82
  call void (ptr, ...) @die(ptr noundef nonnull @.str.103, i32 noundef %84) #19
  unreachable

195:                                              ; preds = %191, %190, %187, %185
  %196 = icmp eq i32 %83, 33554432
  br i1 %196, label %197, label %68

197:                                              ; preds = %195, %82
  %198 = getelementptr inbounds %struct.node, ptr %9, i64 0, i32 1
  %199 = load ptr, ptr %198, align 8, !tbaa !61
  %200 = icmp eq ptr %199, %25
  br i1 %200, label %202, label %201

201:                                              ; preds = %197
  call void @free(ptr noundef %25) #18
  br label %202

202:                                              ; preds = %201, %197
  ret ptr %9
}

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #5

declare ptr @build_dt_info(i32 noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #6

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr) #12

; Function Attrs: nofree nounwind
declare noundef i32 @vfprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #5

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr) #12

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #13

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #14

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #14

; Function Attrs: nounwind uwtable
define internal void @bin_emit_string(ptr noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = alloca %struct.data, align 8
  %5 = alloca %struct.data, align 8
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #23
  %9 = trunc i64 %8 to i32
  br label %10

10:                                               ; preds = %7, %3
  %11 = phi i32 [ %9, %7 ], [ %2, %3 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #18
  call void @data_append_data(ptr nonnull sret(%struct.data) align 8 %4, ptr noundef byval(%struct.data) align 8 %0, ptr noundef %1, i32 noundef %11) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 8 dereferenceable(24) %4, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #18
  call void @data_append_byte(ptr nonnull sret(%struct.data) align 8 %5, ptr noundef byval(%struct.data) align 8 %0, i8 noundef zeroext 0) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 8 dereferenceable(24) %5, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_align(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #18
  call void @data_append_align(ptr nonnull sret(%struct.data) align 8 %3, ptr noundef byval(%struct.data) align 8 %0, i32 noundef %1) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 8 dereferenceable(24) %3, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_data(ptr noundef %0, ptr nocapture noundef readonly byval(%struct.data) align 8 %1) #0 {
  %3 = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #18
  %4 = getelementptr inbounds %struct.data, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !42
  %6 = load i32, ptr %1, align 8, !tbaa !25
  call void @data_append_data(ptr nonnull sret(%struct.data) align 8 %3, ptr noundef byval(%struct.data) align 8 %0, ptr noundef %5, i32 noundef %6) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 8 dereferenceable(24) %3, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_beginnode(ptr noundef %0, ptr nocapture noundef readnone %1) #0 {
  %3 = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #18
  call void @data_append_cell(ptr nonnull sret(%struct.data) align 8 %3, ptr noundef byval(%struct.data) align 8 %0, i32 noundef 1) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 8 dereferenceable(24) %3, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_endnode(ptr noundef %0, ptr nocapture noundef readnone %1) #0 {
  %3 = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #18
  call void @data_append_cell(ptr nonnull sret(%struct.data) align 8 %3, ptr noundef byval(%struct.data) align 8 %0, i32 noundef 2) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 8 dereferenceable(24) %3, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_property(ptr noundef %0, ptr nocapture noundef readnone %1) #0 {
  %3 = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #18
  call void @data_append_cell(ptr nonnull sret(%struct.data) align 8 %3, ptr noundef byval(%struct.data) align 8 %0, i32 noundef 3) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 8 dereferenceable(24) %3, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #18
  ret void
}

declare void @data_append_byte(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i8 noundef zeroext) local_unnamed_addr #6

declare void @data_append_cell(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i32 noundef) local_unnamed_addr #6

declare void @data_append_re(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i64 noundef, i64 noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_string(ptr nocapture noundef %0, ptr noundef %1, i32 noundef %2) #10 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %3
  %6 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.85, i32 noundef %2, ptr noundef %1)
  br label %9

7:                                                ; preds = %3
  %8 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.86, ptr noundef %1)
  br label %9

9:                                                ; preds = %7, %5
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_data(ptr nocapture noundef %0, ptr nocapture noundef readonly byval(%struct.data) align 8 %1) #10 {
  %3 = getelementptr inbounds %struct.data, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !15
  %5 = icmp eq ptr %4, null
  br i1 %5, label %6, label %12

6:                                                ; preds = %23, %2
  %7 = load i32, ptr %1, align 8, !tbaa !25
  %8 = icmp ugt i32 %7, 3
  br i1 %8, label %9, label %29

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.data, ptr %1, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !42
  br label %35

12:                                               ; preds = %23, %2
  %13 = phi ptr [ %25, %23 ], [ %4, %2 ]
  %14 = load i32, ptr %13, align 8, !tbaa !77
  %15 = icmp eq i32 %14, 3
  br i1 %15, label %16, label %23

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.marker, ptr %13, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !79
  %19 = getelementptr inbounds %struct.marker, ptr %13, i64 0, i32 1
  %20 = load i32, ptr %19, align 4, !tbaa !80
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.44, ptr noundef %18) #18
  %22 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.90, ptr noundef %18, i32 noundef %20) #18
  br label %23

23:                                               ; preds = %16, %12
  %24 = getelementptr inbounds %struct.marker, ptr %13, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8, !tbaa !15
  %26 = icmp eq ptr %25, null
  br i1 %26, label %6, label %12

27:                                               ; preds = %35
  %28 = and i32 %7, -4
  br label %29

29:                                               ; preds = %27, %6
  %30 = phi i32 [ 0, %6 ], [ %28, %27 ]
  %31 = icmp eq i32 %7, %30
  br i1 %31, label %63, label %32

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.data, ptr %1, i64 0, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !42
  br label %54

35:                                               ; preds = %35, %9
  %36 = phi i64 [ 0, %9 ], [ %50, %35 ]
  %37 = getelementptr inbounds i8, ptr %11, i64 %36
  %38 = load i8, ptr %37, align 1, !tbaa !70
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i8, ptr %37, i64 1
  %41 = load i8, ptr %40, align 1, !tbaa !70
  %42 = zext i8 %41 to i32
  %43 = getelementptr inbounds i8, ptr %37, i64 2
  %44 = load i8, ptr %43, align 1, !tbaa !70
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds i8, ptr %37, i64 3
  %47 = load i8, ptr %46, align 1, !tbaa !70
  %48 = zext i8 %47 to i32
  %49 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.83, i32 noundef %39, i32 noundef %42, i32 noundef %45, i32 noundef %48) #18
  %50 = add nuw nsw i64 %36, 4
  %51 = trunc i64 %50 to i32
  %52 = sub i32 %7, %51
  %53 = icmp ugt i32 %52, 3
  br i1 %53, label %35, label %27

54:                                               ; preds = %54, %32
  %55 = phi i32 [ %30, %32 ], [ %61, %54 ]
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i8, ptr %34, i64 %56
  %58 = load i8, ptr %57, align 1, !tbaa !70
  %59 = sext i8 %58 to i32
  %60 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.87, i32 noundef %59)
  %61 = add i32 %55, 1
  %62 = icmp eq i32 %7, %61
  br i1 %62, label %63, label %54

63:                                               ; preds = %54, %29
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_beginnode(ptr nocapture noundef %0, ptr noundef readonly %1) #10 {
  %3 = icmp eq ptr %1, null
  br i1 %3, label %18, label %4

4:                                                ; preds = %14, %2
  %5 = phi ptr [ %16, %14 ], [ %1, %2 ]
  %6 = load i8, ptr %5, align 8, !tbaa !63, !range !46
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.label, ptr %5, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !65
  %11 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.44, ptr noundef %10)
  %12 = load ptr, ptr %9, align 8, !tbaa !65
  %13 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.45, ptr noundef %12)
  br label %14

14:                                               ; preds = %8, %4
  %15 = getelementptr inbounds %struct.label, ptr %5, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !81
  %17 = icmp eq ptr %16, null
  br i1 %17, label %18, label %4

18:                                               ; preds = %14, %2
  %19 = tail call i64 @fwrite(ptr nonnull @.str.91, i64 22, i64 1, ptr %0)
  %20 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.83, i32 noundef 0, i32 noundef 0, i32 noundef 0, i32 noundef 1) #18
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_endnode(ptr nocapture noundef %0, ptr noundef readonly %1) #10 {
  %3 = tail call i64 @fwrite(ptr nonnull @.str.92, i64 20, i64 1, ptr %0)
  %4 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.83, i32 noundef 0, i32 noundef 0, i32 noundef 0, i32 noundef 2) #18
  %5 = icmp eq ptr %1, null
  br i1 %5, label %20, label %6

6:                                                ; preds = %16, %2
  %7 = phi ptr [ %18, %16 ], [ %1, %2 ]
  %8 = load i8, ptr %7, align 8, !tbaa !63, !range !46
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.label, ptr %7, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !65
  %13 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.93, ptr noundef %12)
  %14 = load ptr, ptr %11, align 8, !tbaa !65
  %15 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.94, ptr noundef %14)
  br label %16

16:                                               ; preds = %10, %6
  %17 = getelementptr inbounds %struct.label, ptr %7, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !81
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %6

20:                                               ; preds = %16, %2
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_property(ptr nocapture noundef %0, ptr noundef readonly %1) #10 {
  %3 = icmp eq ptr %1, null
  br i1 %3, label %18, label %4

4:                                                ; preds = %14, %2
  %5 = phi ptr [ %16, %14 ], [ %1, %2 ]
  %6 = load i8, ptr %5, align 8, !tbaa !63, !range !46
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.label, ptr %5, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !65
  %11 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.44, ptr noundef %10)
  %12 = load ptr, ptr %9, align 8, !tbaa !65
  %13 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.45, ptr noundef %12)
  br label %14

14:                                               ; preds = %8, %4
  %15 = getelementptr inbounds %struct.label, ptr %5, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !81
  %17 = icmp eq ptr %16, null
  br i1 %17, label %18, label %4

18:                                               ; preds = %14, %2
  %19 = tail call i64 @fwrite(ptr nonnull @.str.95, i64 16, i64 1, ptr %0)
  %20 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.83, i32 noundef 0, i32 noundef 0, i32 noundef 0, i32 noundef 3) #18
  ret void
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #13

; Function Attrs: inaccessiblememonly mustprogress nofree nounwind willreturn allocsize(0)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #15

declare ptr @build_reserve_entry(i64 noundef, i64 noundef) local_unnamed_addr #6

declare ptr @add_reserve_entry(ptr noundef, ptr noundef) local_unnamed_addr #6

declare ptr @build_node(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @add_property(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @add_child(ptr noundef, ptr noundef) local_unnamed_addr #6

declare ptr @xstrdup(ptr noundef) local_unnamed_addr #6

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #14

declare ptr @build_property(ptr noundef, ptr noundef byval(%struct.data) align 8, ptr noundef) local_unnamed_addr #6

declare void @data_grow_for(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i32 noundef) local_unnamed_addr #6

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.bswap.i32(i32) #16

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.bswap.i64(i64) #16

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #17

attributes #0 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #2 = { argmemonly nofree nounwind willreturn writeonly }
attributes #3 = { inlinehint noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly nofree nounwind willreturn }
attributes #5 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nofree nounwind readonly "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { mustprogress nofree nosync nounwind readnone willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nocallback nofree nosync nounwind willreturn }
attributes #13 = { noreturn nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { argmemonly mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { inaccessiblememonly mustprogress nofree nounwind willreturn allocsize(0) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #17 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }
attributes #18 = { nounwind }
attributes #19 = { noreturn }
attributes #20 = { cold }
attributes #21 = { nounwind readnone willreturn }
attributes #22 = { noreturn nounwind }
attributes #23 = { nounwind readonly willreturn }
attributes #24 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 15.0.0 (/llk/llvm-project-main/clang 126a1f78513fb688819156df98cf7ea83b5e8c18)"}
!5 = !{!6, !7, i64 0}
!6 = !{!"version_info", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12}
!7 = !{!"int", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!11, !12, i64 24}
!11 = !{!"dt_info", !7, i64 0, !12, i64 8, !7, i64 16, !12, i64 24, !12, i64 32}
!12 = !{!"any pointer", !8, i64 0}
!13 = !{i64 0, i64 4, !14, i64 8, i64 8, !15, i64 16, i64 8, !15}
!14 = !{!7, !7, i64 0}
!15 = !{!12, !12, i64 0}
!16 = !{!11, !12, i64 8}
!17 = !{!18}
!18 = distinct !{!18, !19, !"flatten_reserve_list: argument 0"}
!19 = distinct !{!19, !"flatten_reserve_list"}
!20 = !{!21, !22, i64 0}
!21 = !{!"reserve_info", !22, i64 0, !22, i64 8, !12, i64 16, !12, i64 24}
!22 = !{!"long", !8, i64 0}
!23 = !{!21, !22, i64 8}
!24 = !{!21, !12, i64 16}
!25 = !{!26, !7, i64 0}
!26 = !{!"data", !7, i64 0, !12, i64 8, !12, i64 16}
!27 = !{!11, !7, i64 16}
!28 = !{!29, !7, i64 0}
!29 = !{!"fdt_header", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12, !7, i64 16, !7, i64 20, !7, i64 24, !7, i64 28, !7, i64 32, !7, i64 36}
!30 = !{!29, !7, i64 20}
!31 = !{!6, !7, i64 4}
!32 = !{!29, !7, i64 24}
!33 = !{!6, !7, i64 8}
!34 = !{!29, !7, i64 16}
!35 = !{!29, !7, i64 8}
!36 = !{!29, !7, i64 12}
!37 = !{!29, !7, i64 4}
!38 = !{!6, !7, i64 12}
!39 = !{!29, !7, i64 28}
!40 = !{!29, !7, i64 32}
!41 = !{!29, !7, i64 36}
!42 = !{!26, !12, i64 8}
!43 = !{!44, !45, i64 0}
!44 = !{!"node", !45, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !12, i64 40, !12, i64 48, !7, i64 56, !7, i64 60, !7, i64 64, !7, i64 68, !12, i64 72, !12, i64 80, !12, i64 88, !45, i64 96, !45, i64 97}
!45 = !{!"_Bool", !8, i64 0}
!46 = !{i8 0, i8 2}
!47 = !{!48, !12, i64 32}
!48 = !{!"emitter", !12, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !12, i64 40, !12, i64 48}
!49 = !{!44, !12, i64 72}
!50 = !{!48, !12, i64 8}
!51 = !{!48, !12, i64 16}
!52 = !{!53, !45, i64 0}
!53 = !{!"property", !45, i64 0, !12, i64 8, !26, i64 16, !12, i64 40, !12, i64 48, !12, i64 56}
!54 = !{!53, !12, i64 8}
!55 = !{!48, !12, i64 48}
!56 = !{!53, !12, i64 48}
!57 = !{!48, !12, i64 0}
!58 = !{!53, !7, i64 16}
!59 = !{!48, !12, i64 24}
!60 = !{!44, !7, i64 56}
!61 = !{!44, !12, i64 8}
!62 = !{!48, !12, i64 40}
!63 = !{!64, !45, i64 0}
!64 = !{!"label", !45, i64 0, !12, i64 8, !12, i64 16}
!65 = !{!64, !12, i64 8}
!66 = !{!67, !12, i64 0}
!67 = !{!"inbuf", !12, i64 0, !12, i64 8, !12, i64 16}
!68 = !{!67, !12, i64 8}
!69 = !{!67, !12, i64 16}
!70 = !{!8, !8, i64 0}
!71 = !{!44, !12, i64 24}
!72 = !{!73}
!73 = distinct !{!73, !74, !"flat_read_data: argument 0:thread"}
!74 = distinct !{!74, !"flat_read_data"}
!75 = !{!76}
!76 = distinct !{!76, !74, !"flat_read_data: argument 0"}
!77 = !{!78, !8, i64 0}
!78 = !{!"marker", !8, i64 0, !7, i64 4, !12, i64 8, !12, i64 16}
!79 = !{!78, !12, i64 8}
!80 = !{!78, !7, i64 4}
!81 = !{!64, !12, i64 16}
